/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 1690.0, "series": [{"data": [[0.0, 2.0], [0.1, 99.0], [0.2, 133.0], [0.3, 149.0], [0.4, 157.0], [0.5, 164.0], [0.6, 169.0], [0.7, 176.0], [0.8, 182.0], [0.9, 187.0], [1.0, 192.0], [1.1, 197.0], [1.2, 204.0], [1.3, 210.0], [1.4, 215.0], [1.5, 220.0], [1.6, 224.0], [1.7, 227.0], [1.8, 231.0], [1.9, 233.0], [2.0, 236.0], [2.1, 238.0], [2.2, 239.0], [2.3, 240.0], [2.4, 241.0], [2.5, 242.0], [2.6, 243.0], [2.7, 244.0], [2.8, 245.0], [2.9, 245.0], [3.0, 246.0], [3.1, 246.0], [3.2, 246.0], [3.3, 247.0], [3.4, 247.0], [3.5, 248.0], [3.6, 248.0], [3.7, 249.0], [3.8, 249.0], [3.9, 249.0], [4.0, 250.0], [4.1, 250.0], [4.2, 250.0], [4.3, 251.0], [4.4, 251.0], [4.5, 251.0], [4.6, 252.0], [4.7, 252.0], [4.8, 252.0], [4.9, 253.0], [5.0, 253.0], [5.1, 253.0], [5.2, 253.0], [5.3, 254.0], [5.4, 254.0], [5.5, 254.0], [5.6, 255.0], [5.7, 255.0], [5.8, 255.0], [5.9, 255.0], [6.0, 255.0], [6.1, 256.0], [6.2, 256.0], [6.3, 256.0], [6.4, 256.0], [6.5, 256.0], [6.6, 257.0], [6.7, 257.0], [6.8, 257.0], [6.9, 257.0], [7.0, 258.0], [7.1, 258.0], [7.2, 258.0], [7.3, 258.0], [7.4, 258.0], [7.5, 258.0], [7.6, 259.0], [7.7, 259.0], [7.8, 259.0], [7.9, 259.0], [8.0, 259.0], [8.1, 260.0], [8.2, 260.0], [8.3, 260.0], [8.4, 260.0], [8.5, 260.0], [8.6, 260.0], [8.7, 261.0], [8.8, 261.0], [8.9, 261.0], [9.0, 261.0], [9.1, 261.0], [9.2, 261.0], [9.3, 262.0], [9.4, 262.0], [9.5, 262.0], [9.6, 262.0], [9.7, 262.0], [9.8, 262.0], [9.9, 262.0], [10.0, 263.0], [10.1, 263.0], [10.2, 263.0], [10.3, 263.0], [10.4, 263.0], [10.5, 263.0], [10.6, 264.0], [10.7, 264.0], [10.8, 264.0], [10.9, 264.0], [11.0, 264.0], [11.1, 264.0], [11.2, 264.0], [11.3, 265.0], [11.4, 265.0], [11.5, 265.0], [11.6, 265.0], [11.7, 265.0], [11.8, 265.0], [11.9, 266.0], [12.0, 266.0], [12.1, 266.0], [12.2, 266.0], [12.3, 266.0], [12.4, 266.0], [12.5, 266.0], [12.6, 267.0], [12.7, 267.0], [12.8, 267.0], [12.9, 267.0], [13.0, 267.0], [13.1, 267.0], [13.2, 267.0], [13.3, 268.0], [13.4, 268.0], [13.5, 268.0], [13.6, 268.0], [13.7, 268.0], [13.8, 268.0], [13.9, 268.0], [14.0, 268.0], [14.1, 269.0], [14.2, 269.0], [14.3, 269.0], [14.4, 269.0], [14.5, 269.0], [14.6, 269.0], [14.7, 269.0], [14.8, 269.0], [14.9, 270.0], [15.0, 270.0], [15.1, 270.0], [15.2, 270.0], [15.3, 270.0], [15.4, 270.0], [15.5, 270.0], [15.6, 270.0], [15.7, 271.0], [15.8, 271.0], [15.9, 271.0], [16.0, 271.0], [16.1, 271.0], [16.2, 271.0], [16.3, 271.0], [16.4, 271.0], [16.5, 271.0], [16.6, 272.0], [16.7, 272.0], [16.8, 272.0], [16.9, 272.0], [17.0, 272.0], [17.1, 272.0], [17.2, 272.0], [17.3, 272.0], [17.4, 272.0], [17.5, 273.0], [17.6, 273.0], [17.7, 273.0], [17.8, 273.0], [17.9, 273.0], [18.0, 273.0], [18.1, 273.0], [18.2, 273.0], [18.3, 273.0], [18.4, 274.0], [18.5, 274.0], [18.6, 274.0], [18.7, 274.0], [18.8, 274.0], [18.9, 274.0], [19.0, 274.0], [19.1, 274.0], [19.2, 274.0], [19.3, 274.0], [19.4, 275.0], [19.5, 275.0], [19.6, 275.0], [19.7, 275.0], [19.8, 275.0], [19.9, 275.0], [20.0, 275.0], [20.1, 275.0], [20.2, 275.0], [20.3, 276.0], [20.4, 276.0], [20.5, 276.0], [20.6, 276.0], [20.7, 276.0], [20.8, 276.0], [20.9, 276.0], [21.0, 276.0], [21.1, 276.0], [21.2, 276.0], [21.3, 277.0], [21.4, 277.0], [21.5, 277.0], [21.6, 277.0], [21.7, 277.0], [21.8, 277.0], [21.9, 277.0], [22.0, 277.0], [22.1, 277.0], [22.2, 278.0], [22.3, 278.0], [22.4, 278.0], [22.5, 278.0], [22.6, 278.0], [22.7, 278.0], [22.8, 278.0], [22.9, 278.0], [23.0, 278.0], [23.1, 278.0], [23.2, 279.0], [23.3, 279.0], [23.4, 279.0], [23.5, 279.0], [23.6, 279.0], [23.7, 279.0], [23.8, 279.0], [23.9, 279.0], [24.0, 279.0], [24.1, 279.0], [24.2, 280.0], [24.3, 280.0], [24.4, 280.0], [24.5, 280.0], [24.6, 280.0], [24.7, 280.0], [24.8, 280.0], [24.9, 280.0], [25.0, 280.0], [25.1, 280.0], [25.2, 281.0], [25.3, 281.0], [25.4, 281.0], [25.5, 281.0], [25.6, 281.0], [25.7, 281.0], [25.8, 281.0], [25.9, 281.0], [26.0, 281.0], [26.1, 281.0], [26.2, 282.0], [26.3, 282.0], [26.4, 282.0], [26.5, 282.0], [26.6, 282.0], [26.7, 282.0], [26.8, 282.0], [26.9, 282.0], [27.0, 282.0], [27.1, 282.0], [27.2, 283.0], [27.3, 283.0], [27.4, 283.0], [27.5, 283.0], [27.6, 283.0], [27.7, 283.0], [27.8, 283.0], [27.9, 283.0], [28.0, 283.0], [28.1, 283.0], [28.2, 283.0], [28.3, 284.0], [28.4, 284.0], [28.5, 284.0], [28.6, 284.0], [28.7, 284.0], [28.8, 284.0], [28.9, 284.0], [29.0, 284.0], [29.1, 284.0], [29.2, 284.0], [29.3, 285.0], [29.4, 285.0], [29.5, 285.0], [29.6, 285.0], [29.7, 285.0], [29.8, 285.0], [29.9, 285.0], [30.0, 285.0], [30.1, 285.0], [30.2, 285.0], [30.3, 285.0], [30.4, 286.0], [30.5, 286.0], [30.6, 286.0], [30.7, 286.0], [30.8, 286.0], [30.9, 286.0], [31.0, 286.0], [31.1, 286.0], [31.2, 286.0], [31.3, 286.0], [31.4, 287.0], [31.5, 287.0], [31.6, 287.0], [31.7, 287.0], [31.8, 287.0], [31.9, 287.0], [32.0, 287.0], [32.1, 287.0], [32.2, 287.0], [32.3, 287.0], [32.4, 288.0], [32.5, 288.0], [32.6, 288.0], [32.7, 288.0], [32.8, 288.0], [32.9, 288.0], [33.0, 288.0], [33.1, 288.0], [33.2, 288.0], [33.3, 288.0], [33.4, 288.0], [33.5, 289.0], [33.6, 289.0], [33.7, 289.0], [33.8, 289.0], [33.9, 289.0], [34.0, 289.0], [34.1, 289.0], [34.2, 289.0], [34.3, 289.0], [34.4, 289.0], [34.5, 289.0], [34.6, 290.0], [34.7, 290.0], [34.8, 290.0], [34.9, 290.0], [35.0, 290.0], [35.1, 290.0], [35.2, 290.0], [35.3, 290.0], [35.4, 290.0], [35.5, 290.0], [35.6, 290.0], [35.7, 290.0], [35.8, 291.0], [35.9, 291.0], [36.0, 291.0], [36.1, 291.0], [36.2, 291.0], [36.3, 291.0], [36.4, 291.0], [36.5, 291.0], [36.6, 291.0], [36.7, 291.0], [36.8, 291.0], [36.9, 292.0], [37.0, 292.0], [37.1, 292.0], [37.2, 292.0], [37.3, 292.0], [37.4, 292.0], [37.5, 292.0], [37.6, 292.0], [37.7, 292.0], [37.8, 292.0], [37.9, 292.0], [38.0, 293.0], [38.1, 293.0], [38.2, 293.0], [38.3, 293.0], [38.4, 293.0], [38.5, 293.0], [38.6, 293.0], [38.7, 293.0], [38.8, 293.0], [38.9, 293.0], [39.0, 293.0], [39.1, 294.0], [39.2, 294.0], [39.3, 294.0], [39.4, 294.0], [39.5, 294.0], [39.6, 294.0], [39.7, 294.0], [39.8, 294.0], [39.9, 294.0], [40.0, 294.0], [40.1, 294.0], [40.2, 295.0], [40.3, 295.0], [40.4, 295.0], [40.5, 295.0], [40.6, 295.0], [40.7, 295.0], [40.8, 295.0], [40.9, 295.0], [41.0, 295.0], [41.1, 295.0], [41.2, 295.0], [41.3, 295.0], [41.4, 296.0], [41.5, 296.0], [41.6, 296.0], [41.7, 296.0], [41.8, 296.0], [41.9, 296.0], [42.0, 296.0], [42.1, 296.0], [42.2, 296.0], [42.3, 296.0], [42.4, 296.0], [42.5, 297.0], [42.6, 297.0], [42.7, 297.0], [42.8, 297.0], [42.9, 297.0], [43.0, 297.0], [43.1, 297.0], [43.2, 297.0], [43.3, 297.0], [43.4, 297.0], [43.5, 297.0], [43.6, 298.0], [43.7, 298.0], [43.8, 298.0], [43.9, 298.0], [44.0, 298.0], [44.1, 298.0], [44.2, 298.0], [44.3, 298.0], [44.4, 298.0], [44.5, 298.0], [44.6, 298.0], [44.7, 299.0], [44.8, 299.0], [44.9, 299.0], [45.0, 299.0], [45.1, 299.0], [45.2, 299.0], [45.3, 299.0], [45.4, 299.0], [45.5, 299.0], [45.6, 299.0], [45.7, 299.0], [45.8, 300.0], [45.9, 300.0], [46.0, 300.0], [46.1, 300.0], [46.2, 300.0], [46.3, 300.0], [46.4, 300.0], [46.5, 300.0], [46.6, 300.0], [46.7, 300.0], [46.8, 300.0], [46.9, 301.0], [47.0, 301.0], [47.1, 301.0], [47.2, 301.0], [47.3, 301.0], [47.4, 301.0], [47.5, 301.0], [47.6, 301.0], [47.7, 301.0], [47.8, 301.0], [47.9, 301.0], [48.0, 302.0], [48.1, 302.0], [48.2, 302.0], [48.3, 302.0], [48.4, 302.0], [48.5, 302.0], [48.6, 302.0], [48.7, 302.0], [48.8, 302.0], [48.9, 302.0], [49.0, 302.0], [49.1, 303.0], [49.2, 303.0], [49.3, 303.0], [49.4, 303.0], [49.5, 303.0], [49.6, 303.0], [49.7, 303.0], [49.8, 303.0], [49.9, 303.0], [50.0, 303.0], [50.1, 303.0], [50.2, 304.0], [50.3, 304.0], [50.4, 304.0], [50.5, 304.0], [50.6, 304.0], [50.7, 304.0], [50.8, 304.0], [50.9, 304.0], [51.0, 304.0], [51.1, 304.0], [51.2, 305.0], [51.3, 305.0], [51.4, 305.0], [51.5, 305.0], [51.6, 305.0], [51.7, 305.0], [51.8, 305.0], [51.9, 305.0], [52.0, 305.0], [52.1, 305.0], [52.2, 306.0], [52.3, 306.0], [52.4, 306.0], [52.5, 306.0], [52.6, 306.0], [52.7, 306.0], [52.8, 306.0], [52.9, 306.0], [53.0, 306.0], [53.1, 306.0], [53.2, 306.0], [53.3, 307.0], [53.4, 307.0], [53.5, 307.0], [53.6, 307.0], [53.7, 307.0], [53.8, 307.0], [53.9, 307.0], [54.0, 307.0], [54.1, 307.0], [54.2, 308.0], [54.3, 308.0], [54.4, 308.0], [54.5, 308.0], [54.6, 308.0], [54.7, 308.0], [54.8, 308.0], [54.9, 308.0], [55.0, 308.0], [55.1, 308.0], [55.2, 308.0], [55.3, 309.0], [55.4, 309.0], [55.5, 309.0], [55.6, 309.0], [55.7, 309.0], [55.8, 309.0], [55.9, 309.0], [56.0, 309.0], [56.1, 309.0], [56.2, 309.0], [56.3, 310.0], [56.4, 310.0], [56.5, 310.0], [56.6, 310.0], [56.7, 310.0], [56.8, 310.0], [56.9, 310.0], [57.0, 310.0], [57.1, 310.0], [57.2, 311.0], [57.3, 311.0], [57.4, 311.0], [57.5, 311.0], [57.6, 311.0], [57.7, 311.0], [57.8, 311.0], [57.9, 311.0], [58.0, 311.0], [58.1, 312.0], [58.2, 312.0], [58.3, 312.0], [58.4, 312.0], [58.5, 312.0], [58.6, 312.0], [58.7, 312.0], [58.8, 312.0], [58.9, 312.0], [59.0, 312.0], [59.1, 313.0], [59.2, 313.0], [59.3, 313.0], [59.4, 313.0], [59.5, 313.0], [59.6, 313.0], [59.7, 313.0], [59.8, 313.0], [59.9, 313.0], [60.0, 314.0], [60.1, 314.0], [60.2, 314.0], [60.3, 314.0], [60.4, 314.0], [60.5, 314.0], [60.6, 314.0], [60.7, 314.0], [60.8, 314.0], [60.9, 315.0], [61.0, 315.0], [61.1, 315.0], [61.2, 315.0], [61.3, 315.0], [61.4, 315.0], [61.5, 315.0], [61.6, 315.0], [61.7, 315.0], [61.8, 315.0], [61.9, 316.0], [62.0, 316.0], [62.1, 316.0], [62.2, 316.0], [62.3, 316.0], [62.4, 316.0], [62.5, 316.0], [62.6, 316.0], [62.7, 317.0], [62.8, 317.0], [62.9, 317.0], [63.0, 317.0], [63.1, 317.0], [63.2, 317.0], [63.3, 317.0], [63.4, 317.0], [63.5, 318.0], [63.6, 318.0], [63.7, 318.0], [63.8, 318.0], [63.9, 318.0], [64.0, 318.0], [64.1, 318.0], [64.2, 318.0], [64.3, 318.0], [64.4, 319.0], [64.5, 319.0], [64.6, 319.0], [64.7, 319.0], [64.8, 319.0], [64.9, 319.0], [65.0, 319.0], [65.1, 319.0], [65.2, 320.0], [65.3, 320.0], [65.4, 320.0], [65.5, 320.0], [65.6, 320.0], [65.7, 320.0], [65.8, 320.0], [65.9, 320.0], [66.0, 321.0], [66.1, 321.0], [66.2, 321.0], [66.3, 321.0], [66.4, 321.0], [66.5, 321.0], [66.6, 321.0], [66.7, 322.0], [66.8, 322.0], [66.9, 322.0], [67.0, 322.0], [67.1, 322.0], [67.2, 322.0], [67.3, 322.0], [67.4, 323.0], [67.5, 323.0], [67.6, 323.0], [67.7, 323.0], [67.8, 323.0], [67.9, 323.0], [68.0, 323.0], [68.1, 323.0], [68.2, 324.0], [68.3, 324.0], [68.4, 324.0], [68.5, 324.0], [68.6, 324.0], [68.7, 324.0], [68.8, 324.0], [68.9, 325.0], [69.0, 325.0], [69.1, 325.0], [69.2, 325.0], [69.3, 325.0], [69.4, 325.0], [69.5, 326.0], [69.6, 326.0], [69.7, 326.0], [69.8, 326.0], [69.9, 326.0], [70.0, 326.0], [70.1, 326.0], [70.2, 327.0], [70.3, 327.0], [70.4, 327.0], [70.5, 327.0], [70.6, 327.0], [70.7, 327.0], [70.8, 328.0], [70.9, 328.0], [71.0, 328.0], [71.1, 328.0], [71.2, 328.0], [71.3, 328.0], [71.4, 329.0], [71.5, 329.0], [71.6, 329.0], [71.7, 329.0], [71.8, 329.0], [71.9, 329.0], [72.0, 330.0], [72.1, 330.0], [72.2, 330.0], [72.3, 330.0], [72.4, 330.0], [72.5, 331.0], [72.6, 331.0], [72.7, 331.0], [72.8, 331.0], [72.9, 331.0], [73.0, 331.0], [73.1, 332.0], [73.2, 332.0], [73.3, 332.0], [73.4, 332.0], [73.5, 332.0], [73.6, 333.0], [73.7, 333.0], [73.8, 333.0], [73.9, 333.0], [74.0, 333.0], [74.1, 333.0], [74.2, 334.0], [74.3, 334.0], [74.4, 334.0], [74.5, 334.0], [74.6, 334.0], [74.7, 335.0], [74.8, 335.0], [74.9, 335.0], [75.0, 335.0], [75.1, 335.0], [75.2, 336.0], [75.3, 336.0], [75.4, 336.0], [75.5, 336.0], [75.6, 336.0], [75.7, 337.0], [75.8, 337.0], [75.9, 337.0], [76.0, 337.0], [76.1, 337.0], [76.2, 338.0], [76.3, 338.0], [76.4, 338.0], [76.5, 338.0], [76.6, 338.0], [76.7, 339.0], [76.8, 339.0], [76.9, 339.0], [77.0, 339.0], [77.1, 339.0], [77.2, 340.0], [77.3, 340.0], [77.4, 340.0], [77.5, 340.0], [77.6, 341.0], [77.7, 341.0], [77.8, 341.0], [77.9, 341.0], [78.0, 342.0], [78.1, 342.0], [78.2, 342.0], [78.3, 342.0], [78.4, 343.0], [78.5, 343.0], [78.6, 343.0], [78.7, 343.0], [78.8, 344.0], [78.9, 344.0], [79.0, 344.0], [79.1, 344.0], [79.2, 345.0], [79.3, 345.0], [79.4, 345.0], [79.5, 345.0], [79.6, 346.0], [79.7, 346.0], [79.8, 346.0], [79.9, 346.0], [80.0, 347.0], [80.1, 347.0], [80.2, 347.0], [80.3, 348.0], [80.4, 348.0], [80.5, 348.0], [80.6, 348.0], [80.7, 349.0], [80.8, 349.0], [80.9, 349.0], [81.0, 350.0], [81.1, 350.0], [81.2, 350.0], [81.3, 351.0], [81.4, 351.0], [81.5, 351.0], [81.6, 352.0], [81.7, 352.0], [81.8, 352.0], [81.9, 353.0], [82.0, 353.0], [82.1, 353.0], [82.2, 354.0], [82.3, 354.0], [82.4, 354.0], [82.5, 355.0], [82.6, 355.0], [82.7, 355.0], [82.8, 356.0], [82.9, 356.0], [83.0, 356.0], [83.1, 357.0], [83.2, 357.0], [83.3, 358.0], [83.4, 358.0], [83.5, 358.0], [83.6, 359.0], [83.7, 359.0], [83.8, 359.0], [83.9, 360.0], [84.0, 360.0], [84.1, 360.0], [84.2, 361.0], [84.3, 361.0], [84.4, 361.0], [84.5, 362.0], [84.6, 362.0], [84.7, 363.0], [84.8, 363.0], [84.9, 363.0], [85.0, 364.0], [85.1, 364.0], [85.2, 365.0], [85.3, 365.0], [85.4, 366.0], [85.5, 366.0], [85.6, 366.0], [85.7, 367.0], [85.8, 367.0], [85.9, 367.0], [86.0, 368.0], [86.1, 368.0], [86.2, 369.0], [86.3, 369.0], [86.4, 369.0], [86.5, 370.0], [86.6, 370.0], [86.7, 371.0], [86.8, 371.0], [86.9, 371.0], [87.0, 372.0], [87.1, 372.0], [87.2, 373.0], [87.3, 373.0], [87.4, 374.0], [87.5, 374.0], [87.6, 375.0], [87.7, 375.0], [87.8, 376.0], [87.9, 376.0], [88.0, 377.0], [88.1, 377.0], [88.2, 378.0], [88.3, 378.0], [88.4, 379.0], [88.5, 380.0], [88.6, 380.0], [88.7, 381.0], [88.8, 381.0], [88.9, 382.0], [89.0, 382.0], [89.1, 383.0], [89.2, 384.0], [89.3, 384.0], [89.4, 385.0], [89.5, 386.0], [89.6, 386.0], [89.7, 387.0], [89.8, 388.0], [89.9, 389.0], [90.0, 389.0], [90.1, 390.0], [90.2, 391.0], [90.3, 392.0], [90.4, 393.0], [90.5, 394.0], [90.6, 395.0], [90.7, 397.0], [90.8, 398.0], [90.9, 399.0], [91.0, 400.0], [91.1, 402.0], [91.2, 403.0], [91.3, 404.0], [91.4, 406.0], [91.5, 407.0], [91.6, 409.0], [91.7, 411.0], [91.8, 414.0], [91.9, 416.0], [92.0, 418.0], [92.1, 420.0], [92.2, 422.0], [92.3, 425.0], [92.4, 427.0], [92.5, 430.0], [92.6, 432.0], [92.7, 435.0], [92.8, 437.0], [92.9, 439.0], [93.0, 441.0], [93.1, 444.0], [93.2, 446.0], [93.3, 448.0], [93.4, 450.0], [93.5, 453.0], [93.6, 455.0], [93.7, 458.0], [93.8, 460.0], [93.9, 462.0], [94.0, 463.0], [94.1, 465.0], [94.2, 467.0], [94.3, 470.0], [94.4, 473.0], [94.5, 475.0], [94.6, 478.0], [94.7, 480.0], [94.8, 482.0], [94.9, 486.0], [95.0, 489.0], [95.1, 493.0], [95.2, 496.0], [95.3, 500.0], [95.4, 503.0], [95.5, 506.0], [95.6, 508.0], [95.7, 511.0], [95.8, 515.0], [95.9, 518.0], [96.0, 521.0], [96.1, 523.0], [96.2, 526.0], [96.3, 528.0], [96.4, 532.0], [96.5, 535.0], [96.6, 539.0], [96.7, 543.0], [96.8, 548.0], [96.9, 552.0], [97.0, 557.0], [97.1, 562.0], [97.2, 567.0], [97.3, 574.0], [97.4, 578.0], [97.5, 584.0], [97.6, 591.0], [97.7, 599.0], [97.8, 606.0], [97.9, 611.0], [98.0, 617.0], [98.1, 626.0], [98.2, 634.0], [98.3, 652.0], [98.4, 679.0], [98.5, 693.0], [98.6, 707.0], [98.7, 724.0], [98.8, 743.0], [98.9, 761.0], [99.0, 790.0], [99.1, 826.0], [99.2, 857.0], [99.3, 889.0], [99.4, 912.0], [99.5, 937.0], [99.6, 964.0], [99.7, 1000.0], [99.8, 1066.0], [99.9, 1232.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 90378.0, "series": [{"data": [[0.0, 203.0], [600.0, 1665.0], [700.0, 982.0], [200.0, 89241.0], [800.0, 631.0], [900.0, 704.0], [1000.0, 248.0], [1100.0, 127.0], [300.0, 90378.0], [1200.0, 106.0], [1300.0, 66.0], [1400.0, 42.0], [1500.0, 12.0], [100.0, 2066.0], [400.0, 8675.0], [1600.0, 5.0], [500.0, 4849.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 17.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 190619.0, "series": [{"data": [[0.0, 190619.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 9364.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 17.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 716.6228456913836, "minX": 1.66042566E12, "maxY": 999.6079997865301, "series": [{"data": [[1.66042572E12, 999.6079997865301], [1.66042578E12, 716.6228456913836], [1.66042566E12, 783.2377799415765]], "isOverall": false, "label": "Thread Group Create Type", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66042578E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.0, "maxY": 879.0, "series": [{"data": [[3.0, 5.0], [4.0, 12.0], [5.0, 12.5], [8.0, 20.666666666666668], [10.0, 22.0], [12.0, 19.0], [13.0, 27.0], [15.0, 33.5], [16.0, 14.0], [18.0, 22.0], [20.0, 19.0], [21.0, 20.0], [22.0, 19.0], [24.0, 66.33333333333334], [26.0, 7.0], [27.0, 82.0], [29.0, 89.0], [30.0, 75.0], [31.0, 104.2], [32.0, 41.6], [33.0, 107.0], [34.0, 90.66666666666667], [35.0, 31.25], [36.0, 92.0], [37.0, 75.0], [38.0, 76.75], [39.0, 28.5], [41.0, 79.0], [40.0, 28.0], [43.0, 105.5], [42.0, 49.0], [45.0, 52.333333333333336], [44.0, 49.0], [47.0, 36.0], [46.0, 69.0], [49.0, 122.6], [50.0, 84.6], [51.0, 59.0], [52.0, 115.0], [53.0, 75.0], [54.0, 106.85714285714285], [55.0, 84.5], [56.0, 108.66666666666667], [57.0, 147.0], [58.0, 89.0], [59.0, 140.2], [60.0, 110.0], [61.0, 125.2], [63.0, 135.00000000000003], [62.0, 17.0], [65.0, 147.0], [66.0, 100.5], [67.0, 128.83333333333334], [64.0, 61.25], [68.0, 111.0], [71.0, 119.8], [70.0, 82.0], [72.0, 162.75], [74.0, 80.0], [73.0, 101.5], [76.0, 110.77777777777777], [78.0, 132.83333333333334], [79.0, 97.0], [81.0, 116.66666666666667], [82.0, 147.0], [83.0, 78.5], [86.0, 162.0], [87.0, 100.66666666666667], [84.0, 61.0], [90.0, 140.5], [91.0, 88.75], [88.0, 106.0], [93.0, 160.5], [94.0, 162.1], [95.0, 174.0], [92.0, 97.0], [97.0, 138.0], [98.0, 113.0], [96.0, 91.0], [101.0, 167.0], [102.0, 143.0], [103.0, 100.0], [100.0, 90.0], [104.0, 169.0], [105.0, 148.66666666666666], [106.0, 172.52941176470588], [107.0, 85.0], [108.0, 133.0], [109.0, 118.4], [111.0, 94.0], [110.0, 108.0], [112.0, 122.0], [115.0, 91.0], [114.0, 105.0], [113.0, 115.0], [117.0, 141.0], [119.0, 131.66666666666666], [118.0, 112.0], [120.0, 199.75], [121.0, 163.2], [122.0, 207.9333333333333], [123.0, 131.0], [124.0, 190.6875], [125.0, 138.75], [126.0, 89.0], [129.0, 207.75], [128.0, 267.0], [132.0, 176.66666666666666], [135.0, 72.0], [134.0, 99.0], [133.0, 113.0], [131.0, 114.0], [130.0, 100.66666666666667], [137.0, 184.71428571428572], [142.0, 250.0], [143.0, 90.5], [141.0, 125.0], [140.0, 132.0], [139.0, 112.0], [138.0, 110.0], [144.0, 207.25], [145.0, 243.33333333333331], [148.0, 181.8181818181818], [146.0, 192.5], [150.0, 158.75], [149.0, 183.875], [151.0, 198.0], [147.0, 107.0], [152.0, 279.4], [157.0, 219.73333333333335], [159.0, 137.0], [158.0, 106.0], [156.0, 97.0], [155.0, 144.5], [154.0, 104.5], [153.0, 142.0], [160.0, 232.22222222222223], [162.0, 192.33333333333334], [163.0, 190.33333333333331], [165.0, 201.66666666666666], [166.0, 294.0], [167.0, 221.2], [164.0, 143.0], [161.0, 144.0], [168.0, 178.0], [170.0, 213.8], [171.0, 220.5], [172.0, 153.25], [173.0, 241.57142857142856], [175.0, 143.33333333333331], [169.0, 128.0], [176.0, 186.5], [177.0, 199.5], [178.0, 151.58333333333334], [181.0, 143.0], [182.0, 252.57142857142858], [183.0, 128.0], [179.0, 113.0], [184.0, 189.33333333333334], [185.0, 183.66666666666666], [189.0, 215.8], [190.0, 194.125], [191.0, 189.0], [188.0, 107.0], [187.0, 82.0], [186.0, 114.0], [194.0, 209.16666666666666], [195.0, 172.4], [196.0, 180.0], [199.0, 117.33333333333333], [198.0, 126.0], [197.0, 108.0], [193.0, 124.75], [200.0, 241.42857142857142], [204.0, 190.0], [206.0, 227.0], [207.0, 257.0], [205.0, 123.33333333333333], [203.0, 120.0], [202.0, 141.33333333333334], [208.0, 149.0], [210.0, 255.85714285714286], [211.0, 327.6], [213.0, 247.0], [215.0, 140.5], [214.0, 123.33333333333333], [212.0, 132.83333333333334], [223.0, 128.0], [222.0, 143.33333333333334], [221.0, 131.0], [220.0, 151.0], [219.0, 113.5], [218.0, 151.5], [216.0, 120.0], [226.0, 232.0], [228.0, 257.0], [231.0, 154.5], [229.0, 146.0], [227.0, 127.0], [225.0, 143.0], [224.0, 107.0], [239.0, 136.0], [237.0, 127.0], [236.0, 148.5], [235.0, 166.33333333333334], [234.0, 130.0], [233.0, 142.5], [232.0, 167.33333333333334], [244.0, 264.875], [245.0, 257.0], [246.0, 319.5], [247.0, 172.0], [243.0, 142.66666666666666], [242.0, 107.0], [241.0, 139.0], [240.0, 148.0], [249.0, 300.75], [252.0, 317.95652173913044], [253.0, 220.25], [255.0, 148.7142857142857], [254.0, 145.0], [251.0, 136.0], [250.0, 120.0], [248.0, 158.0], [270.0, 123.0], [259.0, 305.2307692307692], [260.0, 204.33333333333334], [261.0, 141.8], [263.0, 140.66666666666666], [256.0, 141.0], [258.0, 140.71428571428572], [257.0, 133.5], [262.0, 152.44444444444446], [266.0, 476.0], [267.0, 314.22222222222223], [271.0, 144.0], [269.0, 158.0], [268.0, 158.33333333333334], [265.0, 153.0], [264.0, 140.5], [286.0, 440.2], [273.0, 392.9375], [272.0, 141.0], [279.0, 142.0], [278.0, 154.0], [277.0, 148.66666666666666], [276.0, 132.0], [274.0, 223.75], [285.0, 192.7142857142857], [287.0, 354.125], [284.0, 167.625], [275.0, 151.29999999999998], [282.0, 160.5], [281.0, 149.66666666666666], [280.0, 145.0], [288.0, 398.5], [293.0, 351.6666666666667], [292.0, 171.0], [294.0, 390.3333333333333], [295.0, 331.0], [303.0, 152.66666666666666], [296.0, 146.33333333333334], [302.0, 164.0], [301.0, 153.0], [300.0, 159.5], [291.0, 134.0], [290.0, 164.33333333333334], [289.0, 164.16666666666666], [299.0, 167.5], [298.0, 160.25], [318.0, 173.0], [319.0, 146.0], [317.0, 156.0], [316.0, 157.5], [315.0, 134.5], [314.0, 157.0], [313.0, 155.0], [312.0, 155.0], [311.0, 140.5], [305.0, 154.66666666666666], [304.0, 158.79999999999998], [307.0, 151.0], [306.0, 144.5], [310.0, 149.0], [309.0, 175.5], [308.0, 156.0], [332.0, 159.0], [326.0, 215.85714285714286], [325.0, 604.75], [324.0, 166.5], [327.0, 493.39130434782624], [321.0, 160.5], [320.0, 147.5], [323.0, 146.0], [322.0, 155.6], [328.0, 360.76190476190476], [335.0, 171.0], [334.0, 154.5], [331.0, 156.25], [329.0, 142.0], [350.0, 158.0], [344.0, 427.2], [342.0, 518.5909090909091], [341.0, 159.77777777777777], [343.0, 163.8], [337.0, 154.28571428571428], [336.0, 160.75], [339.0, 159.0], [338.0, 156.0], [345.0, 443.5], [351.0, 173.0], [349.0, 172.0], [348.0, 159.33333333333334], [347.0, 140.0], [346.0, 164.0], [366.0, 160.33333333333334], [353.0, 401.3333333333333], [352.0, 444.25], [354.0, 755.0], [355.0, 156.33333333333334], [365.0, 153.2857142857143], [364.0, 158.66666666666666], [356.0, 335.5], [358.0, 159.5], [359.0, 536.5714285714286], [360.0, 540.3750000000001], [362.0, 512.3571428571427], [361.0, 153.66666666666666], [363.0, 463.5882352941176], [367.0, 156.0], [382.0, 171.66666666666666], [383.0, 166.90909090909093], [381.0, 164.75], [371.0, 163.57142857142858], [370.0, 176.33333333333334], [369.0, 161.25], [379.0, 166.2222222222222], [378.0, 164.5], [377.0, 167.2], [376.0, 168.25], [374.0, 169.75], [373.0, 160.8], [372.0, 178.14285714285714], [398.0, 184.8], [394.0, 485.5454545454545], [395.0, 235.76923076923077], [399.0, 176.2], [397.0, 176.0], [396.0, 170.66666666666666], [393.0, 176.0], [392.0, 173.0], [391.0, 185.5], [385.0, 172.6], [384.0, 170.5], [387.0, 164.5], [386.0, 180.57142857142856], [389.0, 178.125], [388.0, 170.0], [402.0, 481.0], [404.0, 328.0], [405.0, 241.45454545454547], [407.0, 380.21428571428567], [400.0, 165.5], [406.0, 205.0], [409.0, 371.0], [408.0, 181.0], [411.0, 175.0], [410.0, 189.5], [415.0, 190.0], [414.0, 210.0], [413.0, 171.75], [412.0, 189.0], [403.0, 178.77777777777777], [430.0, 172.5], [426.0, 443.3750000000001], [427.0, 281.0], [428.0, 354.14285714285717], [431.0, 183.83333333333326], [429.0, 172.5], [425.0, 175.0], [424.0, 180.66666666666669], [422.0, 186.2], [419.0, 180.0], [418.0, 180.75000000000003], [417.0, 180.5], [416.0, 189.33333333333334], [420.0, 204.0], [446.0, 469.04000000000013], [438.0, 354.65217391304344], [437.0, 193.5], [436.0, 194.33333333333334], [439.0, 196.4], [433.0, 178.0], [432.0, 198.0], [435.0, 192.33333333333331], [434.0, 184.0], [444.0, 281.375], [445.0, 879.0], [447.0, 309.7333333333333], [443.0, 195.0], [442.0, 188.44444444444446], [441.0, 193.41666666666666], [440.0, 186.4], [460.0, 267.69999999999993], [449.0, 366.6], [450.0, 485.0], [451.0, 204.66666666666666], [453.0, 477.3333333333333], [452.0, 184.0], [455.0, 199.0], [448.0, 195.28571428571428], [457.0, 514.2857142857143], [458.0, 400.2702702702703], [459.0, 191.66666666666666], [462.0, 339.99999999999994], [463.0, 184.79999999999998], [456.0, 199.63636363636363], [461.0, 198.33333333333334], [476.0, 296.875], [466.0, 508.07692307692304], [467.0, 578.375], [468.0, 424.7857142857143], [469.0, 197.66666666666666], [470.0, 318.75], [471.0, 264.45], [465.0, 189.14285714285714], [464.0, 202.0], [472.0, 223.25], [473.0, 282.125], [475.0, 186.33333333333334], [474.0, 190.0], [477.0, 397.7142857142857], [479.0, 232.55555555555554], [478.0, 193.4], [492.0, 379.0], [481.0, 361.55555555555554], [482.0, 458.2857142857143], [483.0, 193.0], [485.0, 367.44444444444446], [484.0, 200.9090909090909], [486.0, 234.87500000000003], [487.0, 200.0], [480.0, 197.5], [491.0, 349.0], [490.0, 198.16666666666666], [489.0, 184.0], [488.0, 189.25], [495.0, 196.08], [494.0, 184.0], [493.0, 190.1875], [499.0, 230.2], [497.0, 491.8], [496.0, 326.25], [503.0, 193.0], [498.0, 416.03333333333336], [500.0, 276.0], [501.0, 185.0], [502.0, 288.6666666666667], [507.0, 444.6666666666667], [506.0, 188.0], [505.0, 191.66666666666666], [504.0, 191.62499999999997], [511.0, 195.0], [510.0, 195.6153846153846], [509.0, 201.0], [508.0, 188.4666666666667], [540.0, 330.2142857142857], [533.0, 465.5], [534.0, 291.6969696969697], [535.0, 195.0], [536.0, 218.83333333333334], [519.0, 188.75], [518.0, 199.25], [517.0, 195.0], [515.0, 208.0], [514.0, 202.0], [513.0, 193.5], [512.0, 200.83333333333334], [527.0, 225.0], [526.0, 193.5], [525.0, 185.0], [523.0, 194.0], [522.0, 193.0], [521.0, 197.6], [520.0, 199.5], [537.0, 281.8571428571429], [539.0, 560.1333333333333], [538.0, 197.7857142857143], [541.0, 674.8], [542.0, 467.5833333333335], [543.0, 211.5], [528.0, 180.5], [530.0, 197.33333333333334], [529.0, 191.15384615384613], [532.0, 191.0], [531.0, 202.83333333333331], [572.0, 219.0], [550.0, 628.7777777777777], [549.0, 598.1666666666666], [548.0, 206.66666666666666], [547.0, 200.33333333333334], [546.0, 197.0], [545.0, 200.66666666666666], [544.0, 210.0], [551.0, 685.1666666666666], [552.0, 645.9062499999999], [553.0, 207.10000000000002], [554.0, 462.28571428571416], [555.0, 662.9024390243902], [556.0, 208.5], [558.0, 208.92307692307688], [557.0, 211.4], [559.0, 205.99999999999997], [568.0, 530.4594594594593], [570.0, 560.27027027027], [569.0, 219.66666666666666], [571.0, 220.4], [573.0, 219.5], [575.0, 221.0], [561.0, 214.0], [563.0, 215.125], [562.0, 228.2], [565.0, 228.0], [564.0, 216.2], [567.0, 222.5], [566.0, 224.04761904761907], [574.0, 228.0], [604.0, 278.3333333333333], [581.0, 326.12903225806446], [576.0, 368.2], [578.0, 219.5], [577.0, 222.6], [579.0, 484.75], [580.0, 263.14285714285717], [582.0, 276.07142857142856], [583.0, 441.8888888888889], [585.0, 276.96551724137925], [584.0, 218.0], [587.0, 239.0], [586.0, 213.0], [589.0, 223.56521739130437], [588.0, 230.25], [590.0, 229.44444444444446], [607.0, 238.66666666666666], [593.0, 228.41666666666666], [592.0, 224.1818181818182], [595.0, 224.5], [594.0, 233.66666666666666], [597.0, 225.88888888888889], [596.0, 217.0], [599.0, 235.5], [598.0, 235.0], [606.0, 239.33333333333334], [605.0, 244.5], [603.0, 240.5], [602.0, 250.5], [601.0, 248.8], [600.0, 230.66666666666666], [633.0, 272.875], [621.0, 460.5], [615.0, 334.61290322580635], [614.0, 257.0], [613.0, 254.66666666666666], [612.0, 247.77777777777774], [611.0, 266.0], [610.0, 249.36363636363637], [609.0, 247.16666666666666], [608.0, 247.29999999999998], [632.0, 262.1052631578948], [634.0, 268.8], [636.0, 285.0], [635.0, 268.43478260869557], [637.0, 734.4444444444445], [638.0, 486.3243243243243], [639.0, 266.0], [616.0, 554.0], [618.0, 260.82608695652175], [617.0, 230.0], [619.0, 371.64285714285717], [620.0, 303.77777777777777], [622.0, 361.578947368421], [623.0, 413.8888888888889], [624.0, 367.5], [625.0, 249.0], [626.0, 288.62499999999994], [627.0, 313.9473684210526], [628.0, 287.0], [630.0, 265.0], [629.0, 260.2307692307692], [666.0, 411.1428571428571], [641.0, 529.8], [640.0, 289.7857142857143], [655.0, 264.7142857142857], [654.0, 272.2916666666667], [653.0, 264.8], [652.0, 288.0], [651.0, 272.4545454545455], [650.0, 264.5], [649.0, 264.7857142857143], [648.0, 261.6666666666667], [642.0, 277.41666666666674], [643.0, 266.0], [645.0, 273.5], [644.0, 263.16666666666663], [647.0, 264.5], [646.0, 260.66666666666663], [667.0, 374.8], [668.0, 449.66666666666663], [669.0, 685.0476190476192], [670.0, 528.4545454545453], [663.0, 278.08333333333337], [662.0, 275.5], [661.0, 282.5], [660.0, 280.5], [659.0, 272.49999999999994], [658.0, 270.0], [656.0, 269.79999999999995], [665.0, 280.25], [664.0, 276.5], [676.0, 335.8181818181818], [673.0, 772.75], [672.0, 272.6666666666667], [687.0, 271.0], [686.0, 277.6], [685.0, 277.1666666666667], [684.0, 286.94736842105266], [683.0, 278.0], [682.0, 282.85714285714283], [681.0, 280.0], [680.0, 284.57142857142856], [674.0, 457.38461538461536], [675.0, 423.1874999999999], [678.0, 421.68], [677.0, 282.12500000000006], [696.0, 268.75], [679.0, 278.9230769230769], [698.0, 263.25], [697.0, 263.44], [699.0, 399.9473684210526], [702.0, 344.4], [701.0, 275.38888888888886], [700.0, 275.6], [703.0, 562.4545454545454], [689.0, 270.40909090909093], [688.0, 276.54545454545456], [690.0, 697.5877862595419], [691.0, 343.0], [692.0, 294.7272727272727], [693.0, 489.0], [695.0, 271.05555555555566], [694.0, 305.0], [732.0, 276.0], [704.0, 313.12000000000006], [705.0, 273.8888888888889], [706.0, 279.3333333333333], [707.0, 283.6666666666667], [709.0, 282.0], [708.0, 280.0], [711.0, 272.2777777777778], [710.0, 271.4285714285714], [729.0, 279.85], [728.0, 280.0], [713.0, 343.0], [712.0, 275.26666666666665], [714.0, 282.3076923076924], [716.0, 283.25], [715.0, 277.0], [718.0, 272.0], [717.0, 278.842105263158], [719.0, 275.0], [735.0, 699.8780487804877], [721.0, 281.9], [720.0, 256.0], [723.0, 273.0], [722.0, 276.0], [725.0, 273.0], [724.0, 268.3333333333333], [734.0, 270.14285714285717], [733.0, 277.44444444444434], [731.0, 280.0], [730.0, 279.8888888888889], [762.0, 283.8], [738.0, 490.77777777777777], [736.0, 558.9714285714285], [737.0, 277.33333333333337], [751.0, 281.0], [750.0, 278.75], [749.0, 283.21428571428567], [747.0, 287.3333333333333], [746.0, 283.41666666666663], [745.0, 283.00000000000006], [744.0, 285.71428571428567], [739.0, 357.42857142857144], [741.0, 275.5], [740.0, 277.0], [743.0, 277.85714285714283], [742.0, 280.4545454545455], [761.0, 284.9230769230769], [760.0, 285.5], [764.0, 513.6923076923077], [765.0, 611.7142857142857], [766.0, 692.7647058823529], [767.0, 484.66666666666663], [753.0, 282.3], [752.0, 272.0], [755.0, 276.0], [754.0, 285.0], [757.0, 282.0], [756.0, 281.0], [759.0, 278.0], [758.0, 283.0], [763.0, 286.0], [796.0, 279.50000000000006], [768.0, 385.96296296296293], [783.0, 297.25], [782.0, 298.6], [781.0, 298.0952380952382], [780.0, 298.7], [779.0, 293.5166666666666], [778.0, 291.09090909090907], [777.0, 298.6111111111111], [776.0, 292.0], [769.0, 324.3076923076923], [770.0, 322.6296296296297], [771.0, 295.58333333333337], [773.0, 286.77777777777777], [772.0, 292.8181818181818], [775.0, 293.14814814814815], [774.0, 286.14285714285717], [793.0, 278.0], [792.0, 276.9583333333334], [799.0, 280.88235294117646], [785.0, 285.16666666666663], [784.0, 289.39130434782606], [787.0, 289.1538461538462], [786.0, 284.27777777777777], [789.0, 283.33333333333326], [788.0, 288.55], [791.0, 275.36842105263156], [790.0, 274.99999999999994], [798.0, 280.54545454545456], [797.0, 277.8484848484848], [795.0, 280.8888888888889], [794.0, 279.5], [826.0, 280.0098039215688], [830.0, 535.1666666666667], [814.0, 341.7272727272727], [813.0, 306.5], [812.0, 281.5], [811.0, 295.0], [810.0, 287.32876712328766], [809.0, 289.24999999999994], [808.0, 288.9090909090909], [815.0, 468.0], [817.0, 472.5483870967744], [818.0, 384.90000000000003], [820.0, 313.0], [819.0, 287.52], [821.0, 292.56000000000006], [823.0, 283.66666666666663], [822.0, 281.05], [829.0, 767.5], [828.0, 278.0], [827.0, 280.0], [825.0, 285.1176470588235], [824.0, 286.15384615384613], [807.0, 286.0], [806.0, 282.6], [805.0, 280.0], [804.0, 273.0], [803.0, 286.5], [802.0, 286.40540540540525], [801.0, 285.8888888888889], [800.0, 288.04166666666663], [831.0, 290.7954545454546], [816.0, 299.0], [859.0, 307.59375000000006], [833.0, 392.1351351351352], [841.0, 406.46153846153845], [840.0, 293.5], [842.0, 398.125], [845.0, 309.8888888888889], [844.0, 295.82352941176475], [843.0, 294.157894736842], [847.0, 290.0250000000001], [832.0, 290.3333333333333], [846.0, 291.2666666666667], [851.0, 585.6989247311824], [850.0, 294.2], [849.0, 295.9166666666667], [848.0, 295.5], [852.0, 452.6206896551724], [855.0, 688.5283018867924], [854.0, 296.44444444444446], [853.0, 303.38461538461536], [856.0, 717.2222222222221], [839.0, 290.6666666666667], [838.0, 291.1333333333333], [837.0, 295.74999999999994], [836.0, 295.9230769230769], [835.0, 290.3529411764706], [834.0, 293.43750000000006], [858.0, 306.13043478260863], [857.0, 299.9130434782609], [860.0, 311.4], [862.0, 309.13333333333327], [861.0, 308.2272727272727], [863.0, 310.0], [870.0, 322.2758620689655], [877.0, 365.49999999999994], [866.0, 439.0], [865.0, 455.8205128205128], [864.0, 308.5714285714286], [878.0, 312.8478260869565], [879.0, 364.29411764705884], [867.0, 315.1212121212121], [869.0, 316.2857142857143], [868.0, 314.5189873417723], [871.0, 338.1071428571428], [889.0, 291.7142857142857], [888.0, 288.66666666666663], [891.0, 286.55555555555554], [890.0, 281.4666666666667], [892.0, 496.44999999999993], [893.0, 343.17857142857144], [895.0, 644.0476190476189], [894.0, 277.5416666666667], [880.0, 606.8260869565222], [881.0, 304.25], [882.0, 304.0648148148149], [884.0, 293.47058823529414], [883.0, 305.7692307692308], [885.0, 296.9444444444444], [887.0, 290.53333333333336], [886.0, 295.6428571428571], [872.0, 346.00000000000006], [873.0, 584.3770491803277], [876.0, 470.209677419355], [875.0, 315.1], [874.0, 317.54666666666674], [900.0, 478.65384615384613], [908.0, 478.1034482758621], [897.0, 283.70370370370375], [896.0, 670.2105263157896], [911.0, 302.6855345911953], [910.0, 269.45454545454544], [909.0, 278.5], [899.0, 350.8085106382979], [898.0, 280.8333333333333], [903.0, 474.29999999999995], [902.0, 268.5], [901.0, 269.35714285714283], [920.0, 576.8000000000001], [922.0, 320.7894736842105], [921.0, 291.8055555555556], [923.0, 396.15873015873024], [924.0, 451.0], [925.0, 345.8444444444445], [927.0, 297.3235294117647], [914.0, 273.8717948717949], [913.0, 268.7714285714285], [912.0, 262.0], [926.0, 297.5], [915.0, 380.92592592592587], [917.0, 326.6296296296296], [916.0, 275.20312499999994], [919.0, 287.14285714285717], [918.0, 283.33333333333326], [904.0, 295.59999999999997], [905.0, 275.77777777777777], [906.0, 608.0], [907.0, 273.6615384615383], [931.0, 303.943396226415], [942.0, 307.0384615384615], [928.0, 330.7368421052631], [929.0, 303.9629629629631], [930.0, 314.0779220779221], [945.0, 315.3333333333333], [944.0, 303.00000000000006], [958.0, 340.93258426966304], [959.0, 476.1764705882353], [956.0, 312.80821917808225], [955.0, 299.2272727272727], [957.0, 783.3750000000001], [952.0, 358.53968253968264], [935.0, 301.3333333333333], [934.0, 303.3333333333333], [933.0, 302.1], [932.0, 306.14285714285717], [953.0, 287.8275862068965], [954.0, 346.88888888888886], [946.0, 462.2033898305085], [947.0, 355.0], [948.0, 295.15625], [949.0, 366.7777777777776], [950.0, 286.83783783783775], [951.0, 313.284403669725], [938.0, 591.4945054945055], [937.0, 300.84615384615387], [939.0, 301.1428571428571], [940.0, 309.66666666666663], [941.0, 375.13043478260875], [943.0, 338.4423076923076], [967.0, 364.11864406779677], [962.0, 471.1428571428571], [960.0, 336.9999999999999], [961.0, 320.3537735849057], [975.0, 382.34999999999985], [963.0, 346.25170068027194], [964.0, 381.48780487804873], [966.0, 337.4074074074074], [965.0, 335.741935483871], [985.0, 396.7209302325581], [984.0, 346.93788819875766], [986.0, 601.2], [989.0, 333.60416666666663], [988.0, 334.7153846153847], [987.0, 337.0], [991.0, 326.4554455445544], [977.0, 364.2835820895524], [976.0, 371.2264150943396], [979.0, 370.0449438202248], [978.0, 371.5], [981.0, 360.5849056603772], [980.0, 369.5362318840579], [983.0, 358.8771929824561], [982.0, 355.0], [990.0, 330.1309523809523], [970.0, 359.0813953488373], [969.0, 352.3466666666667], [968.0, 339.0], [971.0, 367.48979591836735], [972.0, 366.74725274725284], [973.0, 370.2613636363636], [974.0, 521.375], [994.0, 334.7719298245615], [992.0, 337.54081632653055], [995.0, 348.7941176470587], [996.0, 331.7631578947368], [997.0, 401.88888888888897], [998.0, 319.15641476274163], [999.0, 303.8943661971828], [1000.0, 324.493418572336], [993.0, 323.5555555555555], [1.0, 3.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[983.4619850000041, 325.31400500000336]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 19427.416666666668, "minX": 1.66042566E12, "maxY": 7826238.0, "series": [{"data": [[1.66042572E12, 7826238.0], [1.66042578E12, 312623.5], [1.66042566E12, 214471.83333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66042572E12, 708921.0], [1.66042578E12, 28318.25], [1.66042566E12, 19427.416666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66042578E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 257.54295257181, "minX": 1.66042566E12, "maxY": 571.4274586173319, "series": [{"data": [[1.66042572E12, 321.27661436652915], [1.66042578E12, 257.54295257181], [1.66042566E12, 571.4274586173319]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66042578E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 257.54054776219266, "minX": 1.66042566E12, "maxY": 571.3900681596889, "series": [{"data": [[1.66042572E12, 321.2737218486511], [1.66042578E12, 257.54054776219266], [1.66042566E12, 571.3900681596889]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66042578E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.66042566E12, "maxY": 0.1924050632911384, "series": [{"data": [[1.66042572E12, 0.0011740847475717865], [1.66042578E12, 0.0], [1.66042566E12, 0.1924050632911384]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66042578E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.66042566E12, "maxY": 1690.0, "series": [{"data": [[1.66042572E12, 1196.0], [1.66042578E12, 353.0], [1.66042566E12, 1690.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66042572E12, 380.0], [1.66042578E12, 308.0], [1.66042566E12, 948.4000000000005]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66042572E12, 428.0], [1.66042578E12, 329.0], [1.66042566E12, 1415.6400000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66042572E12, 397.0], [1.66042578E12, 317.0], [1.66042566E12, 1172.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66042572E12, 117.0], [1.66042578E12, 2.0], [1.66042566E12, 72.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66042572E12, 329.0], [1.66042578E12, 278.0], [1.66042566E12, 526.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66042578E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 143.0, "minX": 107.0, "maxY": 915.0, "series": [{"data": [[708.0, 482.0], [760.0, 527.0], [1082.0, 915.0], [1484.0, 171.0], [1559.0, 601.0], [1640.0, 451.0], [1784.0, 593.0], [2003.0, 469.0], [2107.0, 488.0], [2162.0, 428.0], [2452.0, 390.0], [2723.0, 369.0], [2749.0, 359.0], [2923.0, 349.0], [2839.0, 354.0], [2900.0, 351.0], [2885.0, 277.0], [2825.0, 388.0], [2846.0, 347.0], [2938.0, 333.0], [2932.0, 328.0], [2914.0, 346.0], [2879.0, 343.0], [2964.0, 308.0], [3051.0, 311.0], [3047.0, 318.0], [3052.0, 330.0], [2945.0, 338.0], [3083.0, 321.0], [3077.0, 319.0], [3165.0, 328.0], [3111.0, 321.0], [3103.0, 296.0], [3116.0, 295.0], [3301.0, 298.0], [3282.0, 303.0], [3271.0, 297.0], [3209.0, 300.0], [3262.0, 307.0], [3288.0, 314.0], [3220.0, 306.0], [3443.0, 290.0], [3334.0, 297.0], [3399.0, 288.0], [3445.0, 294.0], [3407.0, 290.0], [3414.0, 290.0], [3441.0, 297.0], [3385.0, 290.0], [3350.0, 291.0], [3426.0, 293.0], [3383.0, 303.0], [3423.0, 298.0], [3486.0, 291.0], [3557.0, 271.0], [3466.0, 283.0], [3458.0, 290.0], [3491.0, 288.0], [3534.0, 281.0], [3457.0, 290.0], [3553.0, 262.0], [3638.0, 278.0], [3667.0, 277.0], [3698.0, 268.0], [3608.0, 270.0], [3635.0, 270.0], [3793.0, 271.0], [107.0, 143.0], [361.0, 263.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3793.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 142.0, "minX": 107.0, "maxY": 915.0, "series": [{"data": [[708.0, 482.0], [760.0, 527.0], [1082.0, 915.0], [1484.0, 171.0], [1559.0, 601.0], [1640.0, 451.0], [1784.0, 593.0], [2003.0, 469.0], [2107.0, 488.0], [2162.0, 428.0], [2452.0, 390.0], [2723.0, 369.0], [2749.0, 359.0], [2923.0, 349.0], [2839.0, 354.0], [2900.0, 351.0], [2885.0, 277.0], [2825.0, 388.0], [2846.0, 347.0], [2938.0, 333.0], [2932.0, 328.0], [2914.0, 346.0], [2879.0, 343.0], [2964.0, 308.0], [3051.0, 311.0], [3047.0, 318.0], [3052.0, 330.0], [2945.0, 338.0], [3083.0, 321.0], [3077.0, 319.0], [3165.0, 328.0], [3111.0, 321.0], [3103.0, 296.0], [3116.0, 295.0], [3301.0, 298.0], [3282.0, 303.0], [3271.0, 297.0], [3209.0, 300.0], [3262.0, 307.0], [3288.0, 314.0], [3220.0, 306.0], [3443.0, 290.0], [3334.0, 297.0], [3399.0, 288.0], [3445.0, 294.0], [3407.0, 290.0], [3414.0, 290.0], [3441.0, 297.0], [3385.0, 290.0], [3350.0, 291.0], [3426.0, 293.0], [3383.0, 303.0], [3423.0, 298.0], [3486.0, 291.0], [3557.0, 271.0], [3466.0, 283.0], [3458.0, 290.0], [3491.0, 288.0], [3534.0, 281.0], [3457.0, 290.0], [3553.0, 262.0], [3638.0, 278.0], [3667.0, 277.0], [3698.0, 268.0], [3608.0, 270.0], [3635.0, 270.0], [3793.0, 271.0], [107.0, 142.0], [361.0, 263.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3793.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 102.25, "minX": 1.66042566E12, "maxY": 3122.1666666666665, "series": [{"data": [[1.66042572E12, 3122.1666666666665], [1.66042578E12, 108.91666666666667], [1.66042566E12, 102.25]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66042578E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 85.58333333333333, "minX": 1.66042566E12, "maxY": 3123.0, "series": [{"data": [[1.66042572E12, 3123.0], [1.66042578E12, 124.75], [1.66042566E12, 85.58333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66042578E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 85.58333333333333, "minX": 1.66042566E12, "maxY": 3123.0, "series": [{"data": [[1.66042572E12, 3123.0], [1.66042578E12, 124.75], [1.66042566E12, 85.58333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66042578E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 85.58333333333333, "minX": 1.66042566E12, "maxY": 3123.0, "series": [{"data": [[1.66042572E12, 3123.0], [1.66042578E12, 124.75], [1.66042566E12, 85.58333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66042578E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

