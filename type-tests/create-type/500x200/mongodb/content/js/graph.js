/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 955.0, "minX": 0.0, "maxY": 48885.0, "series": [{"data": [[0.0, 955.0], [0.1, 2911.0], [0.2, 4068.0], [0.3, 4209.0], [0.4, 4264.0], [0.5, 4319.0], [0.6, 4376.0], [0.7, 4429.0], [0.8, 4481.0], [0.9, 4499.0], [1.0, 4514.0], [1.1, 4523.0], [1.2, 4532.0], [1.3, 4537.0], [1.4, 4544.0], [1.5, 4551.0], [1.6, 4558.0], [1.7, 4564.0], [1.8, 4570.0], [1.9, 4575.0], [2.0, 4579.0], [2.1, 4584.0], [2.2, 4589.0], [2.3, 4592.0], [2.4, 4596.0], [2.5, 4600.0], [2.6, 4604.0], [2.7, 4607.0], [2.8, 4612.0], [2.9, 4616.0], [3.0, 4619.0], [3.1, 4623.0], [3.2, 4629.0], [3.3, 4634.0], [3.4, 4639.0], [3.5, 4643.0], [3.6, 4648.0], [3.7, 4651.0], [3.8, 4655.0], [3.9, 4659.0], [4.0, 4662.0], [4.1, 4665.0], [4.2, 4668.0], [4.3, 4671.0], [4.4, 4673.0], [4.5, 4676.0], [4.6, 4679.0], [4.7, 4682.0], [4.8, 4685.0], [4.9, 4688.0], [5.0, 4691.0], [5.1, 4693.0], [5.2, 4696.0], [5.3, 4698.0], [5.4, 4701.0], [5.5, 4703.0], [5.6, 4705.0], [5.7, 4708.0], [5.8, 4710.0], [5.9, 4712.0], [6.0, 4715.0], [6.1, 4718.0], [6.2, 4721.0], [6.3, 4722.0], [6.4, 4725.0], [6.5, 4727.0], [6.6, 4729.0], [6.7, 4731.0], [6.8, 4734.0], [6.9, 4736.0], [7.0, 4738.0], [7.1, 4740.0], [7.2, 4741.0], [7.3, 4743.0], [7.4, 4745.0], [7.5, 4747.0], [7.6, 4749.0], [7.7, 4750.0], [7.8, 4752.0], [7.9, 4754.0], [8.0, 4756.0], [8.1, 4758.0], [8.2, 4760.0], [8.3, 4761.0], [8.4, 4763.0], [8.5, 4765.0], [8.6, 4767.0], [8.7, 4769.0], [8.8, 4771.0], [8.9, 4773.0], [9.0, 4774.0], [9.1, 4777.0], [9.2, 4779.0], [9.3, 4780.0], [9.4, 4782.0], [9.5, 4784.0], [9.6, 4786.0], [9.7, 4788.0], [9.8, 4790.0], [9.9, 4791.0], [10.0, 4793.0], [10.1, 4795.0], [10.2, 4797.0], [10.3, 4799.0], [10.4, 4801.0], [10.5, 4803.0], [10.6, 4804.0], [10.7, 4806.0], [10.8, 4808.0], [10.9, 4810.0], [11.0, 4812.0], [11.1, 4813.0], [11.2, 4815.0], [11.3, 4817.0], [11.4, 4819.0], [11.5, 4820.0], [11.6, 4822.0], [11.7, 4824.0], [11.8, 4825.0], [11.9, 4826.0], [12.0, 4828.0], [12.1, 4829.0], [12.2, 4831.0], [12.3, 4832.0], [12.4, 4834.0], [12.5, 4835.0], [12.6, 4836.0], [12.7, 4837.0], [12.8, 4839.0], [12.9, 4840.0], [13.0, 4842.0], [13.1, 4843.0], [13.2, 4845.0], [13.3, 4846.0], [13.4, 4848.0], [13.5, 4849.0], [13.6, 4851.0], [13.7, 4852.0], [13.8, 4853.0], [13.9, 4854.0], [14.0, 4855.0], [14.1, 4857.0], [14.2, 4858.0], [14.3, 4859.0], [14.4, 4861.0], [14.5, 4862.0], [14.6, 4863.0], [14.7, 4864.0], [14.8, 4865.0], [14.9, 4867.0], [15.0, 4868.0], [15.1, 4869.0], [15.2, 4870.0], [15.3, 4872.0], [15.4, 4873.0], [15.5, 4874.0], [15.6, 4876.0], [15.7, 4877.0], [15.8, 4878.0], [15.9, 4879.0], [16.0, 4881.0], [16.1, 4882.0], [16.2, 4883.0], [16.3, 4885.0], [16.4, 4886.0], [16.5, 4887.0], [16.6, 4889.0], [16.7, 4890.0], [16.8, 4892.0], [16.9, 4893.0], [17.0, 4895.0], [17.1, 4897.0], [17.2, 4899.0], [17.3, 4901.0], [17.4, 4903.0], [17.5, 4905.0], [17.6, 4907.0], [17.7, 4910.0], [17.8, 4912.0], [17.9, 4914.0], [18.0, 4917.0], [18.1, 4919.0], [18.2, 4922.0], [18.3, 4924.0], [18.4, 4926.0], [18.5, 4928.0], [18.6, 4930.0], [18.7, 4932.0], [18.8, 4934.0], [18.9, 4936.0], [19.0, 4938.0], [19.1, 4940.0], [19.2, 4942.0], [19.3, 4944.0], [19.4, 4946.0], [19.5, 4948.0], [19.6, 4950.0], [19.7, 4952.0], [19.8, 4954.0], [19.9, 4955.0], [20.0, 4957.0], [20.1, 4959.0], [20.2, 4961.0], [20.3, 4963.0], [20.4, 4965.0], [20.5, 4967.0], [20.6, 4969.0], [20.7, 4971.0], [20.8, 4973.0], [20.9, 4975.0], [21.0, 4977.0], [21.1, 4979.0], [21.2, 4981.0], [21.3, 4983.0], [21.4, 4985.0], [21.5, 4986.0], [21.6, 4988.0], [21.7, 4990.0], [21.8, 4992.0], [21.9, 4993.0], [22.0, 4995.0], [22.1, 4997.0], [22.2, 4999.0], [22.3, 5000.0], [22.4, 5002.0], [22.5, 5004.0], [22.6, 5005.0], [22.7, 5007.0], [22.8, 5009.0], [22.9, 5010.0], [23.0, 5012.0], [23.1, 5014.0], [23.2, 5016.0], [23.3, 5017.0], [23.4, 5019.0], [23.5, 5021.0], [23.6, 5024.0], [23.7, 5026.0], [23.8, 5028.0], [23.9, 5030.0], [24.0, 5033.0], [24.1, 5035.0], [24.2, 5037.0], [24.3, 5039.0], [24.4, 5041.0], [24.5, 5043.0], [24.6, 5045.0], [24.7, 5047.0], [24.8, 5050.0], [24.9, 5052.0], [25.0, 5054.0], [25.1, 5056.0], [25.2, 5057.0], [25.3, 5059.0], [25.4, 5061.0], [25.5, 5063.0], [25.6, 5065.0], [25.7, 5066.0], [25.8, 5068.0], [25.9, 5070.0], [26.0, 5071.0], [26.1, 5073.0], [26.2, 5074.0], [26.3, 5076.0], [26.4, 5078.0], [26.5, 5080.0], [26.6, 5082.0], [26.7, 5084.0], [26.8, 5086.0], [26.9, 5088.0], [27.0, 5090.0], [27.1, 5093.0], [27.2, 5095.0], [27.3, 5097.0], [27.4, 5100.0], [27.5, 5102.0], [27.6, 5105.0], [27.7, 5108.0], [27.8, 5110.0], [27.9, 5114.0], [28.0, 5117.0], [28.1, 5120.0], [28.2, 5123.0], [28.3, 5126.0], [28.4, 5128.0], [28.5, 5130.0], [28.6, 5133.0], [28.7, 5136.0], [28.8, 5138.0], [28.9, 5141.0], [29.0, 5143.0], [29.1, 5146.0], [29.2, 5148.0], [29.3, 5150.0], [29.4, 5152.0], [29.5, 5155.0], [29.6, 5157.0], [29.7, 5160.0], [29.8, 5162.0], [29.9, 5164.0], [30.0, 5167.0], [30.1, 5170.0], [30.2, 5172.0], [30.3, 5175.0], [30.4, 5178.0], [30.5, 5180.0], [30.6, 5183.0], [30.7, 5186.0], [30.8, 5189.0], [30.9, 5191.0], [31.0, 5194.0], [31.1, 5197.0], [31.2, 5200.0], [31.3, 5203.0], [31.4, 5206.0], [31.5, 5209.0], [31.6, 5212.0], [31.7, 5214.0], [31.8, 5217.0], [31.9, 5219.0], [32.0, 5222.0], [32.1, 5225.0], [32.2, 5227.0], [32.3, 5230.0], [32.4, 5233.0], [32.5, 5236.0], [32.6, 5238.0], [32.7, 5241.0], [32.8, 5244.0], [32.9, 5247.0], [33.0, 5251.0], [33.1, 5255.0], [33.2, 5258.0], [33.3, 5262.0], [33.4, 5265.0], [33.5, 5270.0], [33.6, 5274.0], [33.7, 5277.0], [33.8, 5281.0], [33.9, 5284.0], [34.0, 5287.0], [34.1, 5289.0], [34.2, 5292.0], [34.3, 5296.0], [34.4, 5299.0], [34.5, 5301.0], [34.6, 5304.0], [34.7, 5306.0], [34.8, 5309.0], [34.9, 5311.0], [35.0, 5314.0], [35.1, 5316.0], [35.2, 5319.0], [35.3, 5321.0], [35.4, 5324.0], [35.5, 5326.0], [35.6, 5329.0], [35.7, 5331.0], [35.8, 5333.0], [35.9, 5335.0], [36.0, 5337.0], [36.1, 5339.0], [36.2, 5341.0], [36.3, 5343.0], [36.4, 5345.0], [36.5, 5347.0], [36.6, 5349.0], [36.7, 5351.0], [36.8, 5352.0], [36.9, 5354.0], [37.0, 5356.0], [37.1, 5358.0], [37.2, 5360.0], [37.3, 5362.0], [37.4, 5364.0], [37.5, 5366.0], [37.6, 5368.0], [37.7, 5370.0], [37.8, 5372.0], [37.9, 5375.0], [38.0, 5377.0], [38.1, 5379.0], [38.2, 5382.0], [38.3, 5384.0], [38.4, 5386.0], [38.5, 5388.0], [38.6, 5391.0], [38.7, 5393.0], [38.8, 5395.0], [38.9, 5397.0], [39.0, 5399.0], [39.1, 5401.0], [39.2, 5403.0], [39.3, 5405.0], [39.4, 5407.0], [39.5, 5409.0], [39.6, 5411.0], [39.7, 5412.0], [39.8, 5414.0], [39.9, 5416.0], [40.0, 5418.0], [40.1, 5420.0], [40.2, 5421.0], [40.3, 5423.0], [40.4, 5425.0], [40.5, 5427.0], [40.6, 5428.0], [40.7, 5430.0], [40.8, 5432.0], [40.9, 5434.0], [41.0, 5436.0], [41.1, 5438.0], [41.2, 5440.0], [41.3, 5442.0], [41.4, 5444.0], [41.5, 5446.0], [41.6, 5448.0], [41.7, 5450.0], [41.8, 5452.0], [41.9, 5454.0], [42.0, 5455.0], [42.1, 5457.0], [42.2, 5459.0], [42.3, 5461.0], [42.4, 5463.0], [42.5, 5464.0], [42.6, 5466.0], [42.7, 5468.0], [42.8, 5470.0], [42.9, 5472.0], [43.0, 5474.0], [43.1, 5476.0], [43.2, 5478.0], [43.3, 5480.0], [43.4, 5482.0], [43.5, 5484.0], [43.6, 5486.0], [43.7, 5488.0], [43.8, 5491.0], [43.9, 5493.0], [44.0, 5495.0], [44.1, 5497.0], [44.2, 5499.0], [44.3, 5502.0], [44.4, 5503.0], [44.5, 5506.0], [44.6, 5508.0], [44.7, 5510.0], [44.8, 5512.0], [44.9, 5515.0], [45.0, 5517.0], [45.1, 5519.0], [45.2, 5521.0], [45.3, 5524.0], [45.4, 5526.0], [45.5, 5529.0], [45.6, 5532.0], [45.7, 5534.0], [45.8, 5537.0], [45.9, 5540.0], [46.0, 5543.0], [46.1, 5545.0], [46.2, 5548.0], [46.3, 5550.0], [46.4, 5552.0], [46.5, 5555.0], [46.6, 5558.0], [46.7, 5561.0], [46.8, 5563.0], [46.9, 5565.0], [47.0, 5568.0], [47.1, 5572.0], [47.2, 5575.0], [47.3, 5578.0], [47.4, 5581.0], [47.5, 5584.0], [47.6, 5587.0], [47.7, 5589.0], [47.8, 5593.0], [47.9, 5596.0], [48.0, 5599.0], [48.1, 5603.0], [48.2, 5605.0], [48.3, 5609.0], [48.4, 5612.0], [48.5, 5616.0], [48.6, 5620.0], [48.7, 5625.0], [48.8, 5629.0], [48.9, 5633.0], [49.0, 5637.0], [49.1, 5642.0], [49.2, 5647.0], [49.3, 5650.0], [49.4, 5654.0], [49.5, 5659.0], [49.6, 5664.0], [49.7, 5669.0], [49.8, 5673.0], [49.9, 5679.0], [50.0, 5683.0], [50.1, 5687.0], [50.2, 5691.0], [50.3, 5696.0], [50.4, 5702.0], [50.5, 5707.0], [50.6, 5711.0], [50.7, 5716.0], [50.8, 5722.0], [50.9, 5727.0], [51.0, 5731.0], [51.1, 5736.0], [51.2, 5740.0], [51.3, 5744.0], [51.4, 5749.0], [51.5, 5753.0], [51.6, 5756.0], [51.7, 5760.0], [51.8, 5764.0], [51.9, 5767.0], [52.0, 5770.0], [52.1, 5774.0], [52.2, 5778.0], [52.3, 5783.0], [52.4, 5787.0], [52.5, 5791.0], [52.6, 5795.0], [52.7, 5799.0], [52.8, 5802.0], [52.9, 5805.0], [53.0, 5808.0], [53.1, 5812.0], [53.2, 5816.0], [53.3, 5820.0], [53.4, 5823.0], [53.5, 5827.0], [53.6, 5829.0], [53.7, 5833.0], [53.8, 5836.0], [53.9, 5840.0], [54.0, 5843.0], [54.1, 5847.0], [54.2, 5850.0], [54.3, 5853.0], [54.4, 5856.0], [54.5, 5859.0], [54.6, 5861.0], [54.7, 5863.0], [54.8, 5865.0], [54.9, 5868.0], [55.0, 5871.0], [55.1, 5873.0], [55.2, 5876.0], [55.3, 5878.0], [55.4, 5880.0], [55.5, 5882.0], [55.6, 5884.0], [55.7, 5887.0], [55.8, 5889.0], [55.9, 5891.0], [56.0, 5893.0], [56.1, 5896.0], [56.2, 5898.0], [56.3, 5901.0], [56.4, 5904.0], [56.5, 5906.0], [56.6, 5908.0], [56.7, 5911.0], [56.8, 5914.0], [56.9, 5916.0], [57.0, 5918.0], [57.1, 5920.0], [57.2, 5922.0], [57.3, 5924.0], [57.4, 5926.0], [57.5, 5928.0], [57.6, 5930.0], [57.7, 5932.0], [57.8, 5934.0], [57.9, 5937.0], [58.0, 5939.0], [58.1, 5940.0], [58.2, 5942.0], [58.3, 5944.0], [58.4, 5946.0], [58.5, 5948.0], [58.6, 5950.0], [58.7, 5952.0], [58.8, 5954.0], [58.9, 5955.0], [59.0, 5958.0], [59.1, 5959.0], [59.2, 5961.0], [59.3, 5963.0], [59.4, 5965.0], [59.5, 5968.0], [59.6, 5970.0], [59.7, 5972.0], [59.8, 5975.0], [59.9, 5978.0], [60.0, 5981.0], [60.1, 5983.0], [60.2, 5985.0], [60.3, 5988.0], [60.4, 5991.0], [60.5, 5993.0], [60.6, 5995.0], [60.7, 5997.0], [60.8, 5999.0], [60.9, 6001.0], [61.0, 6003.0], [61.1, 6005.0], [61.2, 6007.0], [61.3, 6009.0], [61.4, 6012.0], [61.5, 6014.0], [61.6, 6016.0], [61.7, 6019.0], [61.8, 6021.0], [61.9, 6023.0], [62.0, 6026.0], [62.1, 6028.0], [62.2, 6031.0], [62.3, 6033.0], [62.4, 6035.0], [62.5, 6038.0], [62.6, 6040.0], [62.7, 6043.0], [62.8, 6045.0], [62.9, 6049.0], [63.0, 6052.0], [63.1, 6054.0], [63.2, 6058.0], [63.3, 6060.0], [63.4, 6063.0], [63.5, 6066.0], [63.6, 6069.0], [63.7, 6073.0], [63.8, 6075.0], [63.9, 6077.0], [64.0, 6080.0], [64.1, 6083.0], [64.2, 6086.0], [64.3, 6090.0], [64.4, 6093.0], [64.5, 6096.0], [64.6, 6099.0], [64.7, 6101.0], [64.8, 6104.0], [64.9, 6106.0], [65.0, 6109.0], [65.1, 6112.0], [65.2, 6115.0], [65.3, 6118.0], [65.4, 6121.0], [65.5, 6123.0], [65.6, 6125.0], [65.7, 6128.0], [65.8, 6131.0], [65.9, 6134.0], [66.0, 6136.0], [66.1, 6139.0], [66.2, 6142.0], [66.3, 6144.0], [66.4, 6147.0], [66.5, 6149.0], [66.6, 6152.0], [66.7, 6156.0], [66.8, 6159.0], [66.9, 6162.0], [67.0, 6165.0], [67.1, 6168.0], [67.2, 6171.0], [67.3, 6175.0], [67.4, 6178.0], [67.5, 6181.0], [67.6, 6183.0], [67.7, 6185.0], [67.8, 6188.0], [67.9, 6191.0], [68.0, 6194.0], [68.1, 6197.0], [68.2, 6199.0], [68.3, 6201.0], [68.4, 6204.0], [68.5, 6207.0], [68.6, 6210.0], [68.7, 6213.0], [68.8, 6216.0], [68.9, 6220.0], [69.0, 6223.0], [69.1, 6227.0], [69.2, 6230.0], [69.3, 6233.0], [69.4, 6236.0], [69.5, 6239.0], [69.6, 6243.0], [69.7, 6247.0], [69.8, 6251.0], [69.9, 6255.0], [70.0, 6258.0], [70.1, 6262.0], [70.2, 6267.0], [70.3, 6271.0], [70.4, 6275.0], [70.5, 6279.0], [70.6, 6283.0], [70.7, 6287.0], [70.8, 6291.0], [70.9, 6295.0], [71.0, 6298.0], [71.1, 6301.0], [71.2, 6305.0], [71.3, 6309.0], [71.4, 6313.0], [71.5, 6316.0], [71.6, 6320.0], [71.7, 6325.0], [71.8, 6330.0], [71.9, 6335.0], [72.0, 6340.0], [72.1, 6345.0], [72.2, 6350.0], [72.3, 6355.0], [72.4, 6360.0], [72.5, 6365.0], [72.6, 6371.0], [72.7, 6377.0], [72.8, 6383.0], [72.9, 6389.0], [73.0, 6396.0], [73.1, 6401.0], [73.2, 6405.0], [73.3, 6410.0], [73.4, 6414.0], [73.5, 6417.0], [73.6, 6422.0], [73.7, 6427.0], [73.8, 6432.0], [73.9, 6437.0], [74.0, 6443.0], [74.1, 6449.0], [74.2, 6453.0], [74.3, 6457.0], [74.4, 6462.0], [74.5, 6467.0], [74.6, 6472.0], [74.7, 6476.0], [74.8, 6480.0], [74.9, 6484.0], [75.0, 6488.0], [75.1, 6493.0], [75.2, 6498.0], [75.3, 6503.0], [75.4, 6507.0], [75.5, 6511.0], [75.6, 6516.0], [75.7, 6520.0], [75.8, 6524.0], [75.9, 6527.0], [76.0, 6532.0], [76.1, 6536.0], [76.2, 6540.0], [76.3, 6544.0], [76.4, 6549.0], [76.5, 6553.0], [76.6, 6557.0], [76.7, 6561.0], [76.8, 6565.0], [76.9, 6569.0], [77.0, 6572.0], [77.1, 6575.0], [77.2, 6579.0], [77.3, 6584.0], [77.4, 6588.0], [77.5, 6591.0], [77.6, 6595.0], [77.7, 6600.0], [77.8, 6605.0], [77.9, 6610.0], [78.0, 6613.0], [78.1, 6619.0], [78.2, 6624.0], [78.3, 6628.0], [78.4, 6635.0], [78.5, 6642.0], [78.6, 6648.0], [78.7, 6655.0], [78.8, 6661.0], [78.9, 6667.0], [79.0, 6673.0], [79.1, 6679.0], [79.2, 6686.0], [79.3, 6692.0], [79.4, 6698.0], [79.5, 6703.0], [79.6, 6709.0], [79.7, 6714.0], [79.8, 6719.0], [79.9, 6724.0], [80.0, 6729.0], [80.1, 6734.0], [80.2, 6739.0], [80.3, 6744.0], [80.4, 6751.0], [80.5, 6758.0], [80.6, 6765.0], [80.7, 6773.0], [80.8, 6782.0], [80.9, 6791.0], [81.0, 6802.0], [81.1, 6813.0], [81.2, 6823.0], [81.3, 6833.0], [81.4, 6842.0], [81.5, 6853.0], [81.6, 6863.0], [81.7, 6877.0], [81.8, 6895.0], [81.9, 6909.0], [82.0, 6926.0], [82.1, 6941.0], [82.2, 6960.0], [82.3, 6982.0], [82.4, 7005.0], [82.5, 7022.0], [82.6, 7051.0], [82.7, 7079.0], [82.8, 7112.0], [82.9, 7139.0], [83.0, 7177.0], [83.1, 7208.0], [83.2, 7252.0], [83.3, 7353.0], [83.4, 7443.0], [83.5, 7525.0], [83.6, 7574.0], [83.7, 7642.0], [83.8, 7730.0], [83.9, 7815.0], [84.0, 7871.0], [84.1, 7964.0], [84.2, 8071.0], [84.3, 8172.0], [84.4, 8283.0], [84.5, 8376.0], [84.6, 8485.0], [84.7, 8523.0], [84.8, 8615.0], [84.9, 8717.0], [85.0, 8820.0], [85.1, 8852.0], [85.2, 8888.0], [85.3, 8970.0], [85.4, 9084.0], [85.5, 9211.0], [85.6, 9287.0], [85.7, 9371.0], [85.8, 9428.0], [85.9, 9462.0], [86.0, 9524.0], [86.1, 9642.0], [86.2, 9754.0], [86.3, 9853.0], [86.4, 9978.0], [86.5, 10067.0], [86.6, 10140.0], [86.7, 10217.0], [86.8, 10349.0], [86.9, 10420.0], [87.0, 10522.0], [87.1, 10611.0], [87.2, 10746.0], [87.3, 10837.0], [87.4, 10922.0], [87.5, 10981.0], [87.6, 11060.0], [87.7, 11176.0], [87.8, 11283.0], [87.9, 11332.0], [88.0, 11445.0], [88.1, 11671.0], [88.2, 11794.0], [88.3, 11893.0], [88.4, 12052.0], [88.5, 12100.0], [88.6, 12137.0], [88.7, 12202.0], [88.8, 12272.0], [88.9, 12528.0], [89.0, 12698.0], [89.1, 13051.0], [89.2, 13515.0], [89.3, 13744.0], [89.4, 13879.0], [89.5, 14018.0], [89.6, 14157.0], [89.7, 14259.0], [89.8, 14323.0], [89.9, 14360.0], [90.0, 14391.0], [90.1, 14468.0], [90.2, 14536.0], [90.3, 14566.0], [90.4, 14607.0], [90.5, 14638.0], [90.6, 14729.0], [90.7, 14806.0], [90.8, 14894.0], [90.9, 15010.0], [91.0, 15375.0], [91.1, 15552.0], [91.2, 15778.0], [91.3, 15888.0], [91.4, 15996.0], [91.5, 16037.0], [91.6, 16093.0], [91.7, 16267.0], [91.8, 16673.0], [91.9, 16818.0], [92.0, 17008.0], [92.1, 17205.0], [92.2, 17304.0], [92.3, 17422.0], [92.4, 17473.0], [92.5, 17559.0], [92.6, 17633.0], [92.7, 17666.0], [92.8, 17696.0], [92.9, 17744.0], [93.0, 17796.0], [93.1, 17897.0], [93.2, 18009.0], [93.3, 18129.0], [93.4, 18212.0], [93.5, 18378.0], [93.6, 18482.0], [93.7, 18608.0], [93.8, 18773.0], [93.9, 18867.0], [94.0, 19006.0], [94.1, 19070.0], [94.2, 19125.0], [94.3, 19160.0], [94.4, 19185.0], [94.5, 19213.0], [94.6, 19260.0], [94.7, 19526.0], [94.8, 19750.0], [94.9, 19940.0], [95.0, 20162.0], [95.1, 20344.0], [95.2, 20729.0], [95.3, 21012.0], [95.4, 21201.0], [95.5, 21260.0], [95.6, 21360.0], [95.7, 21438.0], [95.8, 22018.0], [95.9, 22540.0], [96.0, 22749.0], [96.1, 22802.0], [96.2, 22828.0], [96.3, 22901.0], [96.4, 22998.0], [96.5, 23810.0], [96.6, 24504.0], [96.7, 24805.0], [96.8, 24921.0], [96.9, 25416.0], [97.0, 28002.0], [97.1, 29116.0], [97.2, 29603.0], [97.3, 30217.0], [97.4, 30723.0], [97.5, 31552.0], [97.6, 31922.0], [97.7, 32090.0], [97.8, 32143.0], [97.9, 32227.0], [98.0, 32620.0], [98.1, 33136.0], [98.2, 33413.0], [98.3, 33816.0], [98.4, 34638.0], [98.5, 35925.0], [98.6, 36050.0], [98.7, 36307.0], [98.8, 36534.0], [98.9, 36863.0], [99.0, 37607.0], [99.1, 38451.0], [99.2, 38782.0], [99.3, 39771.0], [99.4, 39900.0], [99.5, 40050.0], [99.6, 41956.0], [99.7, 42343.0], [99.8, 44158.0], [99.9, 48040.0], [100.0, 48885.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 900.0, "maxY": 6909.0, "series": [{"data": [[32900.0, 20.0], [33700.0, 4.0], [34500.0, 3.0], [36100.0, 46.0], [35300.0, 3.0], [36900.0, 20.0], [37700.0, 2.0], [38500.0, 13.0], [40900.0, 1.0], [40100.0, 1.0], [42500.0, 2.0], [41700.0, 3.0], [44900.0, 6.0], [44100.0, 2.0], [43300.0, 17.0], [45700.0, 5.0], [48100.0, 3.0], [47300.0, 4.0], [900.0, 3.0], [1000.0, 1.0], [1100.0, 5.0], [1200.0, 3.0], [1300.0, 3.0], [1400.0, 5.0], [1500.0, 6.0], [1600.0, 7.0], [1700.0, 8.0], [1800.0, 11.0], [1900.0, 1.0], [2000.0, 4.0], [2100.0, 4.0], [2200.0, 4.0], [2300.0, 6.0], [2400.0, 4.0], [2500.0, 7.0], [2600.0, 6.0], [2700.0, 5.0], [2800.0, 6.0], [2900.0, 7.0], [3000.0, 5.0], [3100.0, 8.0], [3200.0, 4.0], [3300.0, 9.0], [3400.0, 5.0], [3500.0, 3.0], [3600.0, 11.0], [3700.0, 10.0], [3800.0, 9.0], [3900.0, 15.0], [4000.0, 26.0], [4100.0, 81.0], [4300.0, 168.0], [4200.0, 178.0], [4400.0, 265.0], [4600.0, 2871.0], [4500.0, 1579.0], [4800.0, 6909.0], [4700.0, 4986.0], [5000.0, 5144.0], [4900.0, 5000.0], [5100.0, 3793.0], [5200.0, 3257.0], [5300.0, 4584.0], [5400.0, 5179.0], [5600.0, 2344.0], [5500.0, 3804.0], [5700.0, 2377.0], [5800.0, 3511.0], [6100.0, 3578.0], [5900.0, 4592.0], [6000.0, 3805.0], [6200.0, 2834.0], [6300.0, 2025.0], [6400.0, 2163.0], [6500.0, 2454.0], [6600.0, 1745.0], [6700.0, 1544.0], [6900.0, 532.0], [6800.0, 852.0], [7000.0, 399.0], [7100.0, 317.0], [7300.0, 99.0], [7400.0, 134.0], [7200.0, 161.0], [7500.0, 177.0], [7600.0, 127.0], [7800.0, 163.0], [7900.0, 106.0], [7700.0, 93.0], [8000.0, 84.0], [8100.0, 90.0], [8200.0, 119.0], [8400.0, 123.0], [8600.0, 101.0], [8800.0, 247.0], [9000.0, 88.0], [9200.0, 130.0], [9400.0, 207.0], [9600.0, 103.0], [9800.0, 101.0], [10000.0, 102.0], [10200.0, 61.0], [10400.0, 96.0], [10600.0, 64.0], [10800.0, 127.0], [11000.0, 125.0], [11200.0, 118.0], [11600.0, 47.0], [11400.0, 50.0], [12200.0, 124.0], [12000.0, 127.0], [11800.0, 99.0], [12600.0, 54.0], [12400.0, 27.0], [13200.0, 26.0], [13000.0, 20.0], [12800.0, 22.0], [13600.0, 55.0], [13400.0, 33.0], [13800.0, 91.0], [14200.0, 136.0], [14000.0, 88.0], [14800.0, 114.0], [14600.0, 181.0], [14400.0, 105.0], [15200.0, 23.0], [15000.0, 47.0], [15800.0, 96.0], [15600.0, 39.0], [15400.0, 66.0], [16200.0, 13.0], [16000.0, 207.0], [17200.0, 102.0], [16800.0, 43.0], [16400.0, 19.0], [18000.0, 86.0], [18400.0, 106.0], [17600.0, 267.0], [18800.0, 105.0], [19200.0, 162.0], [20000.0, 40.0], [19600.0, 30.0], [20400.0, 22.0], [20800.0, 43.0], [21200.0, 145.0], [22400.0, 23.0], [22000.0, 15.0], [21600.0, 14.0], [22800.0, 205.0], [23200.0, 13.0], [23600.0, 5.0], [24400.0, 19.0], [24000.0, 20.0], [25200.0, 5.0], [24800.0, 64.0], [25600.0, 5.0], [26400.0, 3.0], [26000.0, 2.0], [26800.0, 3.0], [27200.0, 3.0], [27600.0, 7.0], [28400.0, 10.0], [28000.0, 3.0], [28800.0, 13.0], [29200.0, 21.0], [29600.0, 15.0], [30000.0, 27.0], [30400.0, 18.0], [30800.0, 16.0], [31200.0, 11.0], [31600.0, 12.0], [32400.0, 30.0], [32000.0, 71.0], [32800.0, 23.0], [33600.0, 8.0], [34400.0, 11.0], [35200.0, 3.0], [36000.0, 71.0], [36800.0, 14.0], [37600.0, 5.0], [38400.0, 25.0], [40800.0, 3.0], [40000.0, 31.0], [39200.0, 13.0], [42400.0, 4.0], [41600.0, 5.0], [44800.0, 3.0], [44000.0, 5.0], [43200.0, 3.0], [46400.0, 8.0], [45600.0, 4.0], [48000.0, 5.0], [47200.0, 4.0], [48800.0, 1.0], [33900.0, 13.0], [34700.0, 14.0], [33100.0, 25.0], [35500.0, 4.0], [36300.0, 44.0], [37100.0, 42.0], [38700.0, 65.0], [37900.0, 10.0], [39500.0, 6.0], [42700.0, 4.0], [41900.0, 14.0], [41100.0, 8.0], [44300.0, 4.0], [43500.0, 2.0], [45900.0, 3.0], [45100.0, 3.0], [48300.0, 5.0], [47500.0, 1.0], [17300.0, 84.0], [16900.0, 60.0], [16500.0, 29.0], [18100.0, 101.0], [17700.0, 197.0], [19300.0, 38.0], [18900.0, 57.0], [18500.0, 73.0], [20100.0, 53.0], [19700.0, 69.0], [20500.0, 15.0], [21300.0, 124.0], [20900.0, 27.0], [21700.0, 10.0], [22100.0, 16.0], [22500.0, 23.0], [22900.0, 107.0], [23300.0, 5.0], [23700.0, 4.0], [24500.0, 23.0], [24100.0, 18.0], [25300.0, 4.0], [24900.0, 96.0], [26100.0, 9.0], [26500.0, 3.0], [26900.0, 5.0], [27300.0, 2.0], [27700.0, 3.0], [28500.0, 4.0], [28100.0, 6.0], [28900.0, 10.0], [29300.0, 28.0], [29700.0, 8.0], [30100.0, 16.0], [30500.0, 18.0], [30900.0, 17.0], [31300.0, 7.0], [31700.0, 17.0], [32100.0, 169.0], [32500.0, 22.0], [33000.0, 23.0], [33800.0, 37.0], [34600.0, 13.0], [35400.0, 4.0], [36200.0, 26.0], [37000.0, 14.0], [38600.0, 20.0], [37800.0, 9.0], [39400.0, 1.0], [42600.0, 3.0], [41800.0, 11.0], [41000.0, 4.0], [45000.0, 10.0], [44200.0, 3.0], [43400.0, 9.0], [46600.0, 1.0], [48200.0, 11.0], [47400.0, 3.0], [33300.0, 49.0], [34100.0, 19.0], [35700.0, 4.0], [36500.0, 56.0], [34900.0, 5.0], [37300.0, 5.0], [38100.0, 15.0], [38900.0, 23.0], [40500.0, 11.0], [39700.0, 10.0], [42900.0, 1.0], [42100.0, 33.0], [41300.0, 7.0], [44500.0, 2.0], [46900.0, 2.0], [46100.0, 3.0], [48500.0, 17.0], [47700.0, 1.0], [8300.0, 83.0], [8500.0, 138.0], [8700.0, 87.0], [8900.0, 100.0], [9100.0, 87.0], [9300.0, 134.0], [9500.0, 97.0], [9700.0, 73.0], [9900.0, 86.0], [10100.0, 167.0], [10500.0, 118.0], [10700.0, 101.0], [10300.0, 130.0], [11100.0, 60.0], [10900.0, 145.0], [11300.0, 137.0], [11500.0, 46.0], [11700.0, 96.0], [12100.0, 197.0], [11900.0, 64.0], [12700.0, 43.0], [12500.0, 64.0], [12300.0, 35.0], [13100.0, 10.0], [13300.0, 21.0], [12900.0, 21.0], [13700.0, 63.0], [13500.0, 18.0], [14300.0, 264.0], [14100.0, 54.0], [13900.0, 60.0], [14700.0, 127.0], [14500.0, 252.0], [15300.0, 32.0], [15100.0, 18.0], [14900.0, 87.0], [15700.0, 46.0], [15500.0, 48.0], [15900.0, 104.0], [16300.0, 15.0], [16100.0, 72.0], [17400.0, 159.0], [17000.0, 58.0], [16600.0, 54.0], [18200.0, 79.0], [17800.0, 96.0], [19400.0, 25.0], [19000.0, 156.0], [18600.0, 74.0], [19800.0, 64.0], [20200.0, 55.0], [20600.0, 15.0], [21000.0, 34.0], [21400.0, 53.0], [21800.0, 23.0], [22200.0, 11.0], [23000.0, 34.0], [22600.0, 34.0], [23400.0, 10.0], [23800.0, 7.0], [24200.0, 15.0], [24600.0, 22.0], [25400.0, 4.0], [25000.0, 31.0], [25800.0, 2.0], [26200.0, 5.0], [26600.0, 7.0], [27000.0, 4.0], [27400.0, 6.0], [28200.0, 8.0], [28600.0, 11.0], [27800.0, 5.0], [29000.0, 18.0], [29400.0, 18.0], [29800.0, 24.0], [30200.0, 18.0], [30600.0, 22.0], [31400.0, 13.0], [31000.0, 9.0], [31800.0, 40.0], [32200.0, 32.0], [32600.0, 27.0], [33200.0, 26.0], [34000.0, 11.0], [34800.0, 6.0], [36400.0, 36.0], [35600.0, 2.0], [37200.0, 10.0], [38000.0, 15.0], [38800.0, 22.0], [40400.0, 6.0], [39600.0, 6.0], [42800.0, 5.0], [42000.0, 14.0], [41200.0, 5.0], [44400.0, 7.0], [43600.0, 3.0], [46800.0, 1.0], [46000.0, 1.0], [45200.0, 1.0], [48400.0, 40.0], [47600.0, 1.0], [33500.0, 33.0], [34300.0, 10.0], [35100.0, 3.0], [35900.0, 62.0], [36700.0, 29.0], [37500.0, 3.0], [38300.0, 21.0], [39100.0, 4.0], [39900.0, 71.0], [40700.0, 2.0], [42300.0, 29.0], [43900.0, 7.0], [43100.0, 3.0], [46300.0, 4.0], [47900.0, 2.0], [16700.0, 72.0], [17100.0, 44.0], [18300.0, 50.0], [17900.0, 90.0], [17500.0, 101.0], [19100.0, 313.0], [18700.0, 72.0], [19900.0, 42.0], [19500.0, 35.0], [20300.0, 59.0], [21100.0, 70.0], [21500.0, 18.0], [20700.0, 35.0], [21900.0, 13.0], [22300.0, 27.0], [22700.0, 143.0], [23100.0, 16.0], [23500.0, 11.0], [23900.0, 4.0], [24300.0, 17.0], [24700.0, 52.0], [25100.0, 3.0], [25500.0, 4.0], [25900.0, 3.0], [26300.0, 5.0], [27100.0, 6.0], [26700.0, 3.0], [28300.0, 6.0], [27900.0, 1.0], [29100.0, 13.0], [28700.0, 10.0], [29500.0, 21.0], [29900.0, 9.0], [30300.0, 22.0], [30700.0, 16.0], [31500.0, 14.0], [31100.0, 10.0], [31900.0, 66.0], [32300.0, 21.0], [32700.0, 13.0], [33400.0, 45.0], [34200.0, 8.0], [35000.0, 7.0], [35800.0, 26.0], [36600.0, 28.0], [38200.0, 12.0], [39000.0, 14.0], [40600.0, 12.0], [39800.0, 90.0], [43000.0, 4.0], [42200.0, 35.0], [41400.0, 14.0], [44600.0, 6.0], [43800.0, 8.0], [47000.0, 2.0], [46200.0, 1.0], [45400.0, 1.0], [48600.0, 20.0], [47800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 48800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 20.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 99980.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 20.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 99980.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 413.8001233806287, "minX": 1.66172394E12, "maxY": 500.0, "series": [{"data": [[1.66172496E12, 500.0], [1.66172466E12, 500.0], [1.66172406E12, 500.0], [1.66172538E12, 500.0], [1.66172436E12, 500.0], [1.66172508E12, 500.0], [1.66172478E12, 500.0], [1.66172544E12, 500.0], [1.66172514E12, 500.0], [1.66172484E12, 500.0], [1.66172394E12, 495.7069306930695], [1.66172454E12, 500.0], [1.66172424E12, 500.0], [1.66172526E12, 500.0], [1.66172412E12, 500.0], [1.66172532E12, 500.0], [1.66172442E12, 500.0], [1.66172502E12, 500.0], [1.66172472E12, 500.0], [1.661724E12, 500.0], [1.6617243E12, 500.0], [1.6617255E12, 413.8001233806287], [1.6617252E12, 500.0], [1.6617249E12, 500.0], [1.6617246E12, 500.0], [1.66172418E12, 500.0], [1.66172448E12, 500.0]], "isOverall": false, "label": "Thread Group Create Type", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6617255E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1676.0, "minX": 1.0, "maxY": 7894.0, "series": [{"data": [[2.0, 1701.0], [3.0, 2777.0], [4.0, 2825.0], [5.0, 3312.0], [6.0, 3312.0], [7.0, 3418.0], [8.0, 3610.0], [9.0, 3617.0], [10.0, 3681.0], [11.0, 3813.0], [12.0, 3832.0], [13.0, 3861.0], [14.0, 3918.0], [15.0, 3953.0], [16.0, 3959.0], [17.0, 3964.0], [18.0, 4134.0], [19.0, 4221.0], [20.0, 4287.0], [21.0, 4347.0], [22.0, 4402.0], [23.0, 4412.0], [24.0, 4434.0], [25.0, 4435.0], [26.0, 4452.0], [27.0, 4536.0], [28.0, 6014.0], [29.0, 4535.0], [30.0, 4608.0], [31.0, 4685.0], [33.0, 4707.0], [32.0, 4700.0], [35.0, 4698.0], [34.0, 4733.0], [37.0, 4788.0], [36.0, 4778.0], [39.0, 4799.0], [38.0, 4792.0], [41.0, 4856.0], [40.0, 4846.0], [43.0, 5015.0], [42.0, 4918.0], [45.0, 5021.0], [44.0, 5015.0], [47.0, 5140.0], [46.0, 5089.0], [49.0, 5160.0], [48.0, 5144.0], [51.0, 5250.0], [50.0, 5248.0], [53.0, 5297.0], [52.0, 5271.0], [55.0, 5276.0], [54.0, 5304.0], [57.0, 5333.0], [56.0, 5324.0], [59.0, 5425.0], [58.0, 5430.0], [61.0, 5438.0], [60.0, 5435.0], [63.0, 5415.0], [62.0, 5422.0], [67.0, 5505.0], [66.0, 5417.0], [65.0, 5447.0], [64.0, 5416.0], [71.0, 5584.0], [70.0, 5576.0], [69.0, 6821.0], [68.0, 5541.0], [75.0, 5669.0], [74.0, 5604.0], [73.0, 5601.0], [72.0, 5601.0], [79.0, 5739.0], [78.0, 5712.0], [77.0, 5712.0], [76.0, 5702.0], [83.0, 5860.0], [82.0, 5855.0], [81.0, 5733.0], [80.0, 5728.0], [87.0, 5917.0], [86.0, 5933.0], [85.0, 5900.0], [84.0, 5903.0], [91.0, 5964.0], [90.0, 5958.0], [89.0, 5942.0], [88.0, 5920.0], [95.0, 5982.0], [94.0, 6014.0], [93.0, 6008.0], [92.0, 6014.0], [99.0, 6007.0], [98.0, 7002.0], [97.0, 6006.0], [96.0, 5983.0], [103.0, 6022.0], [102.0, 6003.0], [101.0, 5997.0], [100.0, 5999.0], [107.0, 6070.0], [106.0, 6058.0], [105.0, 6058.0], [104.0, 6051.0], [111.0, 6145.0], [110.0, 6138.0], [109.0, 6071.0], [108.0, 6080.0], [115.0, 6194.0], [114.0, 6169.0], [113.0, 6156.0], [112.0, 6147.0], [119.0, 6145.0], [118.0, 6147.0], [117.0, 6159.0], [116.0, 6198.0], [123.0, 6225.0], [122.0, 6217.0], [121.0, 6214.0], [120.0, 6163.0], [127.0, 4991.0], [126.0, 6253.0], [125.0, 6227.0], [124.0, 6227.0], [135.0, 6331.0], [134.0, 6329.0], [133.0, 6313.0], [132.0, 6260.0], [131.0, 6272.0], [130.0, 6294.0], [129.0, 6256.0], [128.0, 6243.0], [143.0, 6345.0], [142.0, 6341.0], [141.0, 6342.0], [140.0, 6337.0], [139.0, 6319.0], [138.0, 6308.0], [137.0, 6304.0], [136.0, 6312.0], [151.0, 6329.0], [150.0, 6423.0], [149.0, 6427.0], [148.0, 6405.0], [147.0, 6404.0], [146.0, 6403.0], [145.0, 6343.0], [144.0, 6349.0], [159.0, 6479.0], [158.0, 6490.0], [157.0, 6488.0], [156.0, 6477.0], [155.0, 6394.0], [154.0, 6371.0], [153.0, 6365.0], [152.0, 6366.666666666667], [167.0, 6525.0], [166.0, 6480.0], [165.0, 6480.0], [164.0, 6479.0], [163.0, 6482.0], [162.0, 6491.0], [161.0, 6482.0], [160.0, 6467.0], [175.0, 6611.0], [174.0, 6611.0], [173.0, 6606.0], [172.0, 6568.0], [171.0, 6568.0], [170.0, 6507.0], [169.0, 6486.0], [168.0, 6488.0], [183.0, 6660.0], [182.0, 6666.0], [181.0, 6656.0], [180.0, 6647.0], [179.0, 6619.0], [178.0, 6631.0], [177.0, 6631.0], [176.0, 6618.0], [191.0, 6634.0], [190.0, 6642.0], [189.0, 6636.0], [188.0, 6624.0], [187.0, 6632.0], [186.0, 6663.0], [185.0, 6655.0], [184.0, 6678.0], [199.0, 6645.0], [198.0, 6655.0], [197.0, 6653.0], [196.0, 6666.0], [195.0, 5671.0], [194.0, 6639.0], [193.0, 7436.0], [192.0, 6644.0], [207.0, 6679.0], [206.0, 6684.0], [205.0, 6685.0], [204.0, 6676.0], [203.0, 6667.0], [202.0, 6643.0], [201.0, 6639.0], [200.0, 6637.0], [215.0, 6722.0], [214.0, 6678.0], [213.0, 6673.0], [212.0, 6674.0], [211.0, 6674.0], [210.0, 6674.0], [209.0, 6678.0], [208.0, 6683.0], [223.0, 6737.0], [222.0, 5789.0], [221.0, 6743.0], [220.0, 6739.0], [219.0, 6740.0], [218.0, 6738.0], [217.0, 6730.0], [216.0, 6722.0], [231.0, 6676.0], [230.0, 6671.0], [229.0, 6667.0], [228.0, 6716.0], [227.0, 6710.0], [226.0, 6727.0], [225.0, 6721.0], [224.0, 6730.0], [239.0, 6710.0], [238.0, 6699.0], [237.0, 6715.0], [236.0, 6715.0], [235.0, 6712.0], [234.0, 6703.0], [233.0, 6712.0], [232.0, 6675.0], [247.0, 6807.0], [246.0, 6804.0], [245.0, 6801.0], [244.0, 6802.0], [243.0, 6783.0], [242.0, 6754.0], [241.0, 6717.0], [240.0, 6718.0], [255.0, 6732.0], [254.0, 6737.0], [253.0, 6734.0], [252.0, 6738.0], [251.0, 6734.0], [250.0, 6767.0], [249.0, 6766.0], [248.0, 6764.0], [270.0, 6717.0], [271.0, 6726.0], [269.0, 6717.0], [268.0, 6713.0], [267.0, 6708.0], [266.0, 6714.0], [265.0, 6717.0], [264.0, 6677.0], [263.0, 6664.0], [257.0, 6737.0], [256.0, 6732.0], [259.0, 6714.0], [258.0, 6719.0], [262.0, 6681.0], [261.0, 6741.0], [260.0, 6741.0], [286.0, 6769.0], [287.0, 6769.0], [285.0, 6772.0], [284.0, 6776.0], [283.0, 6777.0], [282.0, 6727.0], [281.0, 6738.0], [280.0, 6729.5], [279.0, 6719.0], [273.0, 6758.666666666667], [272.0, 6744.0], [275.0, 6727.0], [274.0, 6766.0], [278.0, 6719.0], [277.0, 6721.0], [276.0, 6730.0], [302.0, 6807.0], [303.0, 6821.5], [301.0, 6817.0], [300.0, 6822.0], [299.0, 6853.0], [298.0, 6857.0], [297.0, 6849.0], [296.0, 6813.0], [295.0, 6780.0], [289.0, 6786.0], [288.0, 6787.0], [291.0, 6777.0], [290.0, 6782.0], [294.0, 6773.0], [293.0, 6768.0], [292.0, 6767.0], [318.0, 6941.0], [319.0, 6898.5], [317.0, 6937.0], [316.0, 6943.0], [315.0, 6942.0], [314.0, 6941.0], [313.0, 6911.0], [312.0, 6908.0], [311.0, 6908.0], [305.0, 6839.0], [304.0, 6835.0], [307.0, 6844.0], [306.0, 6850.0], [310.0, 6906.0], [309.0, 6907.0], [308.0, 6896.0], [334.0, 7321.0], [335.0, 6947.0], [333.0, 6987.0], [332.0, 6980.0], [331.0, 6979.0], [330.0, 6976.0], [329.0, 6973.0], [328.0, 6970.0], [327.0, 6969.0], [321.0, 6952.0], [320.0, 6918.5], [323.0, 6957.0], [322.0, 6953.0], [326.0, 6967.0], [325.0, 6963.0], [324.0, 6960.0], [350.0, 3994.0], [349.0, 2958.0], [351.0, 7006.5], [348.0, 6939.0], [347.0, 6937.0], [346.0, 7342.0], [345.0, 6955.0], [344.0, 6956.0], [343.0, 6949.0], [337.0, 6998.0], [336.0, 6952.0], [339.0, 7007.0], [338.0, 7007.0], [342.0, 6985.5], [341.0, 7010.5], [340.0, 7008.0], [366.0, 7097.0], [367.0, 6326.0], [365.0, 7102.0], [364.0, 7137.0], [363.0, 7121.0], [362.0, 7136.0], [361.0, 7135.0], [360.0, 7137.0], [359.0, 7137.0], [353.0, 7059.5], [352.0, 7023.0], [355.0, 7074.333333333333], [354.0, 7073.0], [358.0, 7125.0], [357.0, 7116.0], [356.0, 7103.5], [382.0, 6741.5], [375.0, 3555.8], [371.0, 4077.0], [370.0, 6339.0], [369.0, 7092.0], [368.0, 7087.0], [372.0, 4116.75], [374.0, 7155.5], [373.0, 7148.0], [383.0, 7142.0], [377.0, 7150.0], [376.0, 7140.333333333333], [381.0, 7147.75], [380.0, 7157.0], [379.0, 7894.0], [378.0, 7153.0], [398.0, 4234.0], [388.0, 4194.0], [389.0, 7186.5], [391.0, 7190.0], [385.0, 7154.0], [384.0, 7142.0], [387.0, 7208.0], [386.0, 7175.666666666667], [390.0, 7192.0], [399.0, 7210.0], [397.0, 7211.0], [396.0, 7211.0], [395.0, 7154.0], [394.0, 7153.0], [393.0, 7151.0], [392.0, 7188.0], [414.0, 7205.0], [403.0, 4223.0], [402.0, 7166.0], [401.0, 7169.0], [400.0, 7209.0], [407.0, 7168.0], [406.0, 7165.0], [405.0, 7165.0], [404.0, 7163.0], [415.0, 4252.0], [413.0, 7199.5], [412.0, 7216.0], [411.0, 7227.5], [410.0, 7232.5], [409.0, 7235.0], [408.0, 7236.666666666667], [431.0, 7172.0], [418.0, 4258.5], [423.0, 7199.0], [417.0, 7159.0], [416.0, 7158.0], [422.0, 7203.0], [421.0, 7200.5], [420.0, 7197.0], [425.0, 4276.5], [430.0, 7141.0], [429.0, 7140.0], [428.0, 7145.0], [419.0, 7266.875], [427.0, 7169.5], [426.0, 7194.0], [424.0, 7198.0], [446.0, 7114.5], [447.0, 7084.857142857143], [445.0, 7116.0], [444.0, 7093.4], [443.0, 7107.0], [442.0, 7133.0], [441.0, 7140.0], [440.0, 7129.0], [439.0, 7173.0], [433.0, 7182.75], [432.0, 7182.0], [435.0, 7139.0], [434.0, 7178.0], [438.0, 7151.333333333333], [437.0, 6982.0], [436.0, 7134.0], [462.0, 5090.166666666666], [457.0, 5941.8], [458.0, 5196.333333333333], [461.0, 5215.666666666667], [463.0, 7062.75], [460.0, 7073.5], [459.0, 7058.0], [456.0, 7071.0], [455.0, 7077.0], [449.0, 7070.4], [448.0, 7073.0], [451.0, 7065.0], [450.0, 7070.0], [454.0, 7071.0], [453.0, 7117.0], [452.0, 7112.6], [478.0, 6910.0], [464.0, 4838.8], [465.0, 5210.333333333333], [467.0, 7035.0], [466.0, 7006.25], [468.0, 4267.5], [469.0, 7025.666666666667], [471.0, 7027.666666666667], [470.0, 7009.875], [479.0, 6869.4], [473.0, 7004.0], [472.0, 7011.25], [477.0, 6914.0], [476.0, 6930.11111111111], [475.0, 6986.25], [474.0, 6999.0], [494.0, 6737.649999999999], [488.0, 6363.909090909091], [489.0, 4198.0], [495.0, 7023.599999999999], [493.0, 6960.0], [492.0, 6865.148148148146], [491.0, 6907.636363636364], [490.0, 6815.75], [487.0, 6823.0], [481.0, 6881.0], [480.0, 6881.0], [483.0, 6841.8], [482.0, 6848.333333333333], [486.0, 6825.5], [485.0, 6828.2], [484.0, 6839.75], [497.0, 6603.642857142857], [500.0, 7714.469503145054], [499.0, 6942.479166666667], [498.0, 7001.0], [496.0, 6884.363636363637], [1.0, 1676.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[498.5810199999995, 7703.083619999932]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 21081.95, "minX": 1.66172394E12, "maxY": 577109.6666666666, "series": [{"data": [[1.66172496E12, 200685.35], [1.66172466E12, 82856.35], [1.66172406E12, 257862.68333333332], [1.66172538E12, 112313.6], [1.66172436E12, 223415.48333333334], [1.66172508E12, 167969.0], [1.66172478E12, 39192.76666666667], [1.66172544E12, 67396.51666666666], [1.66172514E12, 161409.01666666666], [1.66172484E12, 150963.18333333332], [1.66172394E12, 21081.95], [1.66172454E12, 43454.666666666664], [1.66172424E12, 236577.23333333334], [1.66172526E12, 176492.8], [1.66172412E12, 251326.75], [1.66172532E12, 138135.7], [1.66172442E12, 212259.33333333334], [1.66172502E12, 173944.01666666666], [1.66172472E12, 57953.48333333333], [1.661724E12, 231546.16666666666], [1.6617243E12, 230811.13333333333], [1.6617255E12, 67730.8], [1.6617252E12, 170852.05], [1.6617249E12, 208707.75], [1.6617246E12, 49471.46666666667], [1.66172418E12, 238708.18333333332], [1.66172448E12, 205030.81666666668]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66172496E12, 449080.5], [1.66172466E12, 185410.5], [1.66172406E12, 577109.6666666666], [1.66172538E12, 251328.0], [1.66172436E12, 499944.5], [1.66172508E12, 375870.0], [1.66172478E12, 87703.0], [1.66172544E12, 150815.5], [1.66172514E12, 361190.5], [1.66172484E12, 337815.5], [1.66172394E12, 47198.86666666667], [1.66172454E12, 97240.0], [1.66172424E12, 529397.0], [1.66172526E12, 394944.0], [1.66172412E12, 562402.5], [1.66172532E12, 309111.0], [1.66172442E12, 474980.0], [1.66172502E12, 389240.5], [1.66172472E12, 129684.5], [1.661724E12, 518263.36666666664], [1.6617243E12, 516494.0], [1.6617255E12, 151563.51666666666], [1.6617252E12, 382321.5], [1.6617249E12, 467032.5], [1.6617246E12, 110704.0], [1.66172418E12, 534165.5], [1.66172448E12, 458804.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6617255E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4379.318811881185, "minX": 1.66172394E12, "maxY": 32341.94136460553, "series": [{"data": [[1.66172496E12, 6742.092650426826], [1.66172466E12, 12490.446797781133], [1.66172406E12, 4854.4168151628155], [1.66172538E12, 10276.028273809517], [1.66172436E12, 5613.291378342999], [1.66172508E12, 7486.705472636807], [1.66172478E12, 32341.94136460553], [1.66172544E12, 15195.549287042762], [1.66172514E12, 7750.718094745004], [1.66172484E12, 9009.077774702468], [1.66172394E12, 4379.318811881185], [1.66172454E12, 25771.82499999997], [1.66172424E12, 5296.79088661252], [1.66172526E12, 8148.731770833336], [1.66172412E12, 4994.850041562762], [1.66172532E12, 9073.811857229271], [1.66172442E12, 5876.533661417333], [1.66172502E12, 7179.194331011268], [1.66172472E12, 24341.406633020888], [1.661724E12, 5478.342712842711], [1.6617243E12, 5419.174149167267], [1.6617255E12, 16059.73473164715], [1.6617252E12, 6236.661286378092], [1.6617249E12, 5503.8406406406375], [1.6617246E12, 28861.881756756764], [1.66172418E12, 5243.301242779644], [1.66172448E12, 5643.1724067658515]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6617255E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4379.255445544553, "minX": 1.66172394E12, "maxY": 32341.924307036243, "series": [{"data": [[1.66172496E12, 6742.088902769106], [1.66172466E12, 12490.435199193149], [1.66172406E12, 4854.409201360756], [1.66172538E12, 10276.025669642879], [1.66172436E12, 5613.288011969337], [1.66172508E12, 7486.700248756236], [1.66172478E12, 32341.924307036243], [1.66172544E12, 15195.543707377592], [1.66172514E12, 7750.713435154041], [1.66172484E12, 9009.07389980626], [1.66172394E12, 4379.255445544553], [1.66172454E12, 25771.807692307706], [1.66172424E12, 5296.785764747435], [1.66172526E12, 8148.726799242437], [1.66172412E12, 4994.844555278469], [1.66172532E12, 9073.80550514217], [1.66172442E12, 5876.528740157492], [1.66172502E12, 7179.190247417714], [1.66172472E12, 24341.39653929346], [1.661724E12, 5478.327922077943], [1.6617243E12, 5419.169623461271], [1.6617255E12, 16059.729179518838], [1.6617252E12, 6236.65835167522], [1.6617249E12, 5503.836036036061], [1.6617246E12, 28861.869087837855], [1.66172418E12, 5243.297041834408], [1.66172448E12, 5643.16873853678]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6617255E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.006324404761904768, "minX": 1.66172394E12, "maxY": 8.007920792079199, "series": [{"data": [[1.66172496E12, 0.028315636060795325], [1.66172466E12, 0.14473020675743825], [1.66172406E12, 0.01927749878503144], [1.66172538E12, 0.006324404761904768], [1.66172436E12, 0.028240134654946722], [1.66172508E12, 0.029850746268656757], [1.66172478E12, 0.11940298507462686], [1.66172544E12, 0.11221326720396763], [1.66172514E12, 0.02899301061351283], [1.66172484E12, 0.0769443675615832], [1.66172394E12, 8.007920792079199], [1.66172454E12, 0.3365384615384617], [1.66172424E12, 0.028258565877781694], [1.66172526E12, 0.027462121212121226], [1.66172412E12, 0.026433915211969968], [1.66172532E12, 0.03115547489413193], [1.66172442E12, 0.030118110236220602], [1.66172502E12, 0.029546000480422784], [1.66172472E12, 0.18745493871665445], [1.661724E12, 0.021103896103896118], [1.6617243E12, 0.02697320782041993], [1.6617255E12, 0.09808760024676097], [1.6617252E12, 0.024455857177794034], [1.6617249E12, 0.014214214214214309], [1.6617246E12, 0.12077702702702701], [1.66172418E12, 0.02450551374059163], [1.66172448E12, 0.02893825147748114]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6617255E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 955.0, "minX": 1.66172394E12, "maxY": 48885.0, "series": [{"data": [[1.66172496E12, 15689.0], [1.66172466E12, 30730.0], [1.66172406E12, 7010.0], [1.66172538E12, 31552.0], [1.66172436E12, 11126.0], [1.66172508E12, 18422.0], [1.66172478E12, 48885.0], [1.66172544E12, 24084.0], [1.66172514E12, 19784.0], [1.66172484E12, 15838.0], [1.66172394E12, 7391.0], [1.66172454E12, 39903.0], [1.66172424E12, 9423.0], [1.66172526E12, 22072.0], [1.66172412E12, 8575.0], [1.66172532E12, 23716.0], [1.66172442E12, 11676.0], [1.66172502E12, 16749.0], [1.66172472E12, 38418.0], [1.661724E12, 8348.0], [1.6617243E12, 10468.0], [1.6617255E12, 41489.0], [1.6617252E12, 8190.0], [1.6617249E12, 6815.0], [1.6617246E12, 33670.0], [1.66172418E12, 8993.0], [1.66172448E12, 10425.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66172496E12, 13763.0], [1.66172466E12, 18478.6], [1.66172406E12, 5477.0], [1.66172538E12, 24908.1], [1.66172436E12, 6034.0], [1.66172508E12, 17419.9], [1.66172478E12, 48207.5], [1.66172544E12, 21583.2], [1.66172514E12, 18888.0], [1.66172484E12, 14620.8], [1.66172394E12, 6300.000000000001], [1.66172454E12, 38721.0], [1.66172424E12, 5683.4], [1.66172526E12, 20830.0], [1.66172412E12, 5666.0], [1.66172532E12, 22784.3], [1.66172442E12, 6194.000000000016], [1.66172502E12, 15759.6], [1.66172472E12, 36602.6], [1.661724E12, 6776.0], [1.6617243E12, 5946.0], [1.6617255E12, 39869.6], [1.6617252E12, 6516.0], [1.6617249E12, 5635.0], [1.6617246E12, 33208.5], [1.66172418E12, 5797.200000000001], [1.66172448E12, 5908.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66172496E12, 14623.0], [1.66172466E12, 19238.16], [1.66172406E12, 6526.0], [1.66172538E12, 30626.850000000006], [1.66172436E12, 10140.52], [1.66172508E12, 17765.0], [1.66172478E12, 48625.61], [1.66172544E12, 23033.86], [1.66172514E12, 19222.0], [1.66172484E12, 15002.86], [1.66172394E12, 7154.18], [1.66172454E12, 39001.72], [1.66172424E12, 8868.369999999999], [1.66172526E12, 21407.0], [1.66172412E12, 7827.68], [1.66172532E12, 23007.93], [1.66172442E12, 11050.189999999999], [1.66172502E12, 16114.72], [1.66172472E12, 37239.84], [1.661724E12, 7205.150000000002], [1.6617243E12, 9472.0], [1.6617255E12, 41138.8], [1.6617252E12, 6789.4], [1.6617249E12, 6045.16], [1.6617246E12, 33539.6], [1.66172418E12, 8492.0], [1.66172448E12, 9305.2]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66172496E12, 14531.0], [1.66172466E12, 19019.8], [1.66172406E12, 5981.0], [1.66172538E12, 28217.299999999992], [1.66172436E12, 9651.0], [1.66172508E12, 17665.0], [1.66172478E12, 48467.05], [1.66172544E12, 22490.1], [1.66172514E12, 19165.0], [1.66172484E12, 14827.3], [1.66172394E12, 6656.5], [1.66172454E12, 38815.45], [1.66172424E12, 8511.699999999999], [1.66172526E12, 21250.0], [1.66172412E12, 7048.4], [1.66172532E12, 22872.0], [1.66172442E12, 10771.95], [1.66172502E12, 16025.0], [1.66172472E12, 36965.0], [1.661724E12, 6920.0], [1.6617243E12, 9008.75], [1.6617255E12, 39969.0], [1.6617252E12, 6571.0], [1.6617249E12, 5692.2], [1.6617246E12, 33410.75], [1.66172418E12, 7849.0], [1.66172448E12, 6146.599999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66172496E12, 5049.0], [1.66172466E12, 5881.0], [1.66172406E12, 4020.0], [1.66172538E12, 5653.0], [1.66172436E12, 4441.0], [1.66172508E12, 5196.0], [1.66172478E12, 13737.0], [1.66172544E12, 6724.0], [1.66172514E12, 5278.0], [1.66172484E12, 4862.0], [1.66172394E12, 955.0], [1.66172454E12, 11302.0], [1.66172424E12, 4321.0], [1.66172526E12, 5433.0], [1.66172412E12, 4057.0], [1.66172532E12, 5738.0], [1.66172442E12, 4617.0], [1.66172502E12, 5150.0], [1.66172472E12, 13839.0], [1.661724E12, 4209.0], [1.6617243E12, 4009.0], [1.6617255E12, 1676.0], [1.6617252E12, 5385.0], [1.6617249E12, 4808.0], [1.6617246E12, 10380.0], [1.66172418E12, 4258.0], [1.66172448E12, 4674.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66172496E12, 5878.0], [1.66172466E12, 11355.0], [1.66172406E12, 4730.0], [1.66172538E12, 6551.0], [1.66172436E12, 5163.0], [1.66172508E12, 6025.0], [1.66172478E12, 39378.5], [1.66172544E12, 14447.0], [1.66172514E12, 6088.0], [1.66172484E12, 7017.0], [1.66172394E12, 4619.0], [1.66172454E12, 20608.0], [1.66172424E12, 4981.0], [1.66172526E12, 6389.0], [1.66172412E12, 4761.0], [1.66172532E12, 6657.0], [1.66172442E12, 5362.0], [1.66172502E12, 5992.0], [1.66172472E12, 19094.0], [1.661724E12, 5166.0], [1.6617243E12, 5041.0], [1.6617255E12, 7008.0], [1.6617252E12, 6202.0], [1.6617249E12, 5502.0], [1.6617246E12, 31747.5], [1.66172418E12, 4911.0], [1.66172448E12, 5481.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6617255E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4606.0, "minX": 1.0, "maxY": 36490.5, "series": [{"data": [[2.0, 11550.0], [3.0, 15196.0], [4.0, 31392.5], [5.0, 22200.0], [6.0, 16386.0], [7.0, 19440.0], [8.0, 27859.0], [9.0, 21286.0], [10.0, 23648.5], [11.0, 23272.0], [12.0, 22745.5], [13.0, 15871.5], [14.0, 19233.0], [15.0, 18087.0], [16.0, 17863.5], [17.0, 20732.5], [18.0, 19973.5], [19.0, 19233.0], [20.0, 15348.5], [21.0, 14251.0], [22.0, 18383.5], [23.0, 15845.0], [24.0, 18602.0], [25.0, 34942.0], [26.0, 14848.5], [27.0, 24093.0], [28.0, 12815.0], [29.0, 17821.0], [30.0, 15440.0], [31.0, 9634.0], [32.0, 17771.0], [33.0, 16107.0], [35.0, 17123.0], [34.0, 18053.5], [36.0, 17329.0], [37.0, 18295.0], [38.0, 15314.0], [39.0, 21569.0], [41.0, 19908.0], [40.0, 23009.0], [43.0, 14780.0], [42.0, 17910.5], [45.0, 19803.0], [44.0, 31987.0], [47.0, 13805.0], [46.0, 18480.5], [49.0, 8897.5], [48.0, 36490.5], [50.0, 6095.0], [51.0, 16542.0], [52.0, 6454.5], [55.0, 15431.0], [54.0, 13736.5], [58.0, 24720.5], [59.0, 15423.0], [61.0, 20010.0], [60.0, 12109.5], [63.0, 14353.0], [64.0, 7269.5], [66.0, 11397.5], [65.0, 7973.0], [67.0, 11747.0], [68.0, 6548.0], [71.0, 6714.0], [70.0, 12229.0], [69.0, 6749.0], [74.0, 6433.5], [72.0, 6548.0], [73.0, 6816.0], [75.0, 6567.0], [77.0, 6244.0], [76.0, 6329.0], [78.0, 6190.5], [79.0, 6565.0], [82.0, 6188.0], [81.0, 6107.0], [83.0, 6108.0], [80.0, 6254.0], [84.0, 6226.0], [86.0, 5954.5], [87.0, 5926.0], [85.0, 5842.0], [90.0, 5587.5], [88.0, 5875.0], [91.0, 5536.0], [89.0, 5640.0], [94.0, 5427.0], [93.0, 5456.0], [92.0, 5382.0], [95.0, 5399.0], [97.0, 5276.0], [96.0, 5073.0], [98.0, 5262.5], [99.0, 5066.0], [101.0, 5048.5], [103.0, 4858.5], [102.0, 4947.0], [100.0, 5004.0], [106.0, 4904.5], [104.0, 4967.0], [105.0, 4999.5], [107.0, 4823.0], [108.0, 4808.5], [111.0, 4714.0], [110.0, 4773.0], [109.0, 4869.0], [115.0, 4860.0], [112.0, 4740.0], [113.0, 4609.0], [114.0, 4713.5], [116.0, 4779.5], [117.0, 4606.0], [118.0, 4630.5], [119.0, 4615.0], [121.0, 4986.0], [1.0, 17445.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 121.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 4606.0, "minX": 1.0, "maxY": 36490.5, "series": [{"data": [[2.0, 11549.5], [3.0, 15196.0], [4.0, 31392.5], [5.0, 22200.0], [6.0, 16386.0], [7.0, 19440.0], [8.0, 27859.0], [9.0, 21286.0], [10.0, 23648.5], [11.0, 23272.0], [12.0, 22745.5], [13.0, 15871.5], [14.0, 19233.0], [15.0, 18087.0], [16.0, 17863.5], [17.0, 20732.5], [18.0, 19973.5], [19.0, 19233.0], [20.0, 15348.5], [21.0, 14251.0], [22.0, 18383.5], [23.0, 15845.0], [24.0, 18602.0], [25.0, 34942.0], [26.0, 14848.0], [27.0, 24093.0], [28.0, 12815.0], [29.0, 17821.0], [30.0, 15440.0], [31.0, 9634.0], [32.0, 17771.0], [33.0, 16107.0], [35.0, 17123.0], [34.0, 18053.0], [36.0, 17329.0], [37.0, 18295.0], [38.0, 15314.0], [39.0, 21569.0], [41.0, 19908.0], [40.0, 23009.0], [43.0, 14780.0], [42.0, 17910.5], [45.0, 19803.0], [44.0, 31987.0], [47.0, 13805.0], [46.0, 18480.5], [49.0, 8897.5], [48.0, 36490.5], [50.0, 6095.0], [51.0, 16542.0], [52.0, 6454.5], [55.0, 15431.0], [54.0, 13736.5], [58.0, 24720.5], [59.0, 15423.0], [61.0, 20010.0], [60.0, 12109.5], [63.0, 14353.0], [64.0, 7269.5], [66.0, 11397.5], [65.0, 7973.0], [67.0, 11747.0], [68.0, 6548.0], [71.0, 6714.0], [70.0, 12229.0], [69.0, 6749.0], [74.0, 6433.5], [72.0, 6548.0], [73.0, 6816.0], [75.0, 6567.0], [77.0, 6244.0], [76.0, 6329.0], [78.0, 6190.5], [79.0, 6565.0], [82.0, 6188.0], [81.0, 6107.0], [83.0, 6108.0], [80.0, 6254.0], [84.0, 6226.0], [86.0, 5954.5], [87.0, 5926.0], [85.0, 5842.0], [90.0, 5587.5], [88.0, 5875.0], [91.0, 5536.0], [89.0, 5640.0], [94.0, 5427.0], [93.0, 5456.0], [92.0, 5382.0], [95.0, 5399.0], [97.0, 5276.0], [96.0, 5073.0], [98.0, 5262.5], [99.0, 5066.0], [101.0, 5048.5], [103.0, 4858.5], [102.0, 4947.0], [100.0, 5004.0], [106.0, 4904.5], [104.0, 4967.0], [105.0, 4999.5], [107.0, 4823.0], [108.0, 4808.5], [111.0, 4714.0], [110.0, 4773.0], [109.0, 4869.0], [115.0, 4860.0], [112.0, 4740.0], [113.0, 4609.0], [114.0, 4713.5], [116.0, 4779.5], [117.0, 4606.0], [118.0, 4630.5], [119.0, 4615.0], [121.0, 4986.0], [1.0, 17445.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 121.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 15.633333333333333, "minX": 1.66172394E12, "maxY": 102.88333333333334, "series": [{"data": [[1.66172496E12, 80.05], [1.66172466E12, 33.05], [1.66172406E12, 102.88333333333334], [1.66172538E12, 44.8], [1.66172436E12, 89.11666666666666], [1.66172508E12, 67.0], [1.66172478E12, 15.633333333333333], [1.66172544E12, 26.883333333333333], [1.66172514E12, 64.38333333333334], [1.66172484E12, 60.21666666666667], [1.66172394E12, 16.75], [1.66172454E12, 17.333333333333332], [1.66172424E12, 94.36666666666666], [1.66172526E12, 70.4], [1.66172412E12, 100.25], [1.66172532E12, 55.1], [1.66172442E12, 84.66666666666667], [1.66172502E12, 69.38333333333334], [1.66172472E12, 23.116666666666667], [1.661724E12, 92.4], [1.6617243E12, 92.06666666666666], [1.6617255E12, 18.683333333333334], [1.6617252E12, 68.15], [1.6617249E12, 83.25], [1.6617246E12, 19.733333333333334], [1.66172418E12, 95.21666666666667], [1.66172448E12, 81.78333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6617255E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 8.416666666666666, "minX": 1.66172394E12, "maxY": 102.88333333333334, "series": [{"data": [[1.66172496E12, 80.05], [1.66172466E12, 33.05], [1.66172406E12, 102.88333333333334], [1.66172538E12, 44.8], [1.66172436E12, 89.11666666666666], [1.66172508E12, 67.0], [1.66172478E12, 15.633333333333333], [1.66172544E12, 26.883333333333333], [1.66172514E12, 64.38333333333334], [1.66172484E12, 60.21666666666667], [1.66172394E12, 8.416666666666666], [1.66172454E12, 17.333333333333332], [1.66172424E12, 94.36666666666666], [1.66172526E12, 70.4], [1.66172412E12, 100.25], [1.66172532E12, 55.1], [1.66172442E12, 84.66666666666667], [1.66172502E12, 69.38333333333334], [1.66172472E12, 23.116666666666667], [1.661724E12, 92.4], [1.6617243E12, 92.06666666666666], [1.6617255E12, 27.016666666666666], [1.6617252E12, 68.15], [1.6617249E12, 83.25], [1.6617246E12, 19.733333333333334], [1.66172418E12, 95.21666666666667], [1.66172448E12, 81.78333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6617255E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 8.416666666666666, "minX": 1.66172394E12, "maxY": 102.88333333333334, "series": [{"data": [[1.66172496E12, 80.05], [1.66172466E12, 33.05], [1.66172406E12, 102.88333333333334], [1.66172538E12, 44.8], [1.66172436E12, 89.11666666666666], [1.66172508E12, 67.0], [1.66172478E12, 15.633333333333333], [1.66172544E12, 26.883333333333333], [1.66172514E12, 64.38333333333334], [1.66172484E12, 60.21666666666667], [1.66172394E12, 8.416666666666666], [1.66172454E12, 17.333333333333332], [1.66172424E12, 94.36666666666666], [1.66172526E12, 70.4], [1.66172412E12, 100.25], [1.66172532E12, 55.1], [1.66172442E12, 84.66666666666667], [1.66172502E12, 69.38333333333334], [1.66172472E12, 23.116666666666667], [1.661724E12, 92.4], [1.6617243E12, 92.06666666666666], [1.6617255E12, 27.016666666666666], [1.6617252E12, 68.15], [1.6617249E12, 83.25], [1.6617246E12, 19.733333333333334], [1.66172418E12, 95.21666666666667], [1.66172448E12, 81.78333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6617255E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 8.416666666666666, "minX": 1.66172394E12, "maxY": 102.88333333333334, "series": [{"data": [[1.66172496E12, 80.05], [1.66172466E12, 33.05], [1.66172406E12, 102.88333333333334], [1.66172538E12, 44.8], [1.66172436E12, 89.11666666666666], [1.66172508E12, 67.0], [1.66172478E12, 15.633333333333333], [1.66172544E12, 26.883333333333333], [1.66172514E12, 64.38333333333334], [1.66172484E12, 60.21666666666667], [1.66172394E12, 8.416666666666666], [1.66172454E12, 17.333333333333332], [1.66172424E12, 94.36666666666666], [1.66172526E12, 70.4], [1.66172412E12, 100.25], [1.66172532E12, 55.1], [1.66172442E12, 84.66666666666667], [1.66172502E12, 69.38333333333334], [1.66172472E12, 23.116666666666667], [1.661724E12, 92.4], [1.6617243E12, 92.06666666666666], [1.6617255E12, 27.016666666666666], [1.6617252E12, 68.15], [1.6617249E12, 83.25], [1.6617246E12, 19.733333333333334], [1.66172418E12, 95.21666666666667], [1.66172448E12, 81.78333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6617255E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

