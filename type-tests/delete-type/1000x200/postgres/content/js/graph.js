/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 623.0, "minX": 0.0, "maxY": 9563.0, "series": [{"data": [[0.0, 623.0], [0.1, 982.0], [0.2, 995.0], [0.3, 998.0], [0.4, 1004.0], [0.5, 1012.0], [0.6, 1015.0], [0.7, 1017.0], [0.8, 1020.0], [0.9, 1024.0], [1.0, 1027.0], [1.1, 1030.0], [1.2, 1032.0], [1.3, 1034.0], [1.4, 1035.0], [1.5, 1037.0], [1.6, 1038.0], [1.7, 1039.0], [1.8, 1040.0], [1.9, 1041.0], [2.0, 1042.0], [2.1, 1043.0], [2.2, 1043.0], [2.3, 1044.0], [2.4, 1044.0], [2.5, 1045.0], [2.6, 1046.0], [2.7, 1046.0], [2.8, 1047.0], [2.9, 1047.0], [3.0, 1048.0], [3.1, 1048.0], [3.2, 1049.0], [3.3, 1049.0], [3.4, 1050.0], [3.5, 1050.0], [3.6, 1050.0], [3.7, 1051.0], [3.8, 1051.0], [3.9, 1052.0], [4.0, 1052.0], [4.1, 1053.0], [4.2, 1053.0], [4.3, 1053.0], [4.4, 1054.0], [4.5, 1054.0], [4.6, 1054.0], [4.7, 1055.0], [4.8, 1055.0], [4.9, 1056.0], [5.0, 1056.0], [5.1, 1056.0], [5.2, 1057.0], [5.3, 1057.0], [5.4, 1058.0], [5.5, 1058.0], [5.6, 1058.0], [5.7, 1059.0], [5.8, 1059.0], [5.9, 1059.0], [6.0, 1060.0], [6.1, 1060.0], [6.2, 1060.0], [6.3, 1061.0], [6.4, 1061.0], [6.5, 1061.0], [6.6, 1062.0], [6.7, 1062.0], [6.8, 1062.0], [6.9, 1063.0], [7.0, 1063.0], [7.1, 1063.0], [7.2, 1064.0], [7.3, 1064.0], [7.4, 1064.0], [7.5, 1064.0], [7.6, 1065.0], [7.7, 1065.0], [7.8, 1065.0], [7.9, 1066.0], [8.0, 1066.0], [8.1, 1066.0], [8.2, 1066.0], [8.3, 1067.0], [8.4, 1067.0], [8.5, 1067.0], [8.6, 1067.0], [8.7, 1068.0], [8.8, 1068.0], [8.9, 1068.0], [9.0, 1068.0], [9.1, 1069.0], [9.2, 1069.0], [9.3, 1069.0], [9.4, 1069.0], [9.5, 1070.0], [9.6, 1070.0], [9.7, 1070.0], [9.8, 1070.0], [9.9, 1070.0], [10.0, 1071.0], [10.1, 1071.0], [10.2, 1071.0], [10.3, 1071.0], [10.4, 1071.0], [10.5, 1072.0], [10.6, 1072.0], [10.7, 1072.0], [10.8, 1072.0], [10.9, 1073.0], [11.0, 1073.0], [11.1, 1073.0], [11.2, 1073.0], [11.3, 1073.0], [11.4, 1074.0], [11.5, 1074.0], [11.6, 1074.0], [11.7, 1074.0], [11.8, 1074.0], [11.9, 1075.0], [12.0, 1075.0], [12.1, 1075.0], [12.2, 1075.0], [12.3, 1075.0], [12.4, 1075.0], [12.5, 1076.0], [12.6, 1076.0], [12.7, 1076.0], [12.8, 1076.0], [12.9, 1076.0], [13.0, 1077.0], [13.1, 1077.0], [13.2, 1077.0], [13.3, 1077.0], [13.4, 1077.0], [13.5, 1078.0], [13.6, 1078.0], [13.7, 1078.0], [13.8, 1078.0], [13.9, 1078.0], [14.0, 1079.0], [14.1, 1079.0], [14.2, 1079.0], [14.3, 1079.0], [14.4, 1079.0], [14.5, 1080.0], [14.6, 1080.0], [14.7, 1080.0], [14.8, 1080.0], [14.9, 1080.0], [15.0, 1081.0], [15.1, 1081.0], [15.2, 1081.0], [15.3, 1081.0], [15.4, 1081.0], [15.5, 1082.0], [15.6, 1082.0], [15.7, 1082.0], [15.8, 1082.0], [15.9, 1082.0], [16.0, 1082.0], [16.1, 1083.0], [16.2, 1083.0], [16.3, 1083.0], [16.4, 1083.0], [16.5, 1083.0], [16.6, 1083.0], [16.7, 1084.0], [16.8, 1084.0], [16.9, 1084.0], [17.0, 1084.0], [17.1, 1084.0], [17.2, 1085.0], [17.3, 1085.0], [17.4, 1085.0], [17.5, 1085.0], [17.6, 1085.0], [17.7, 1085.0], [17.8, 1086.0], [17.9, 1086.0], [18.0, 1086.0], [18.1, 1086.0], [18.2, 1086.0], [18.3, 1086.0], [18.4, 1087.0], [18.5, 1087.0], [18.6, 1087.0], [18.7, 1087.0], [18.8, 1087.0], [18.9, 1087.0], [19.0, 1087.0], [19.1, 1088.0], [19.2, 1088.0], [19.3, 1088.0], [19.4, 1088.0], [19.5, 1088.0], [19.6, 1088.0], [19.7, 1088.0], [19.8, 1088.0], [19.9, 1089.0], [20.0, 1089.0], [20.1, 1089.0], [20.2, 1089.0], [20.3, 1089.0], [20.4, 1089.0], [20.5, 1089.0], [20.6, 1090.0], [20.7, 1090.0], [20.8, 1090.0], [20.9, 1090.0], [21.0, 1090.0], [21.1, 1090.0], [21.2, 1090.0], [21.3, 1090.0], [21.4, 1091.0], [21.5, 1091.0], [21.6, 1091.0], [21.7, 1091.0], [21.8, 1091.0], [21.9, 1091.0], [22.0, 1091.0], [22.1, 1091.0], [22.2, 1092.0], [22.3, 1092.0], [22.4, 1092.0], [22.5, 1092.0], [22.6, 1092.0], [22.7, 1092.0], [22.8, 1092.0], [22.9, 1093.0], [23.0, 1093.0], [23.1, 1093.0], [23.2, 1093.0], [23.3, 1093.0], [23.4, 1093.0], [23.5, 1093.0], [23.6, 1094.0], [23.7, 1094.0], [23.8, 1094.0], [23.9, 1094.0], [24.0, 1094.0], [24.1, 1094.0], [24.2, 1095.0], [24.3, 1095.0], [24.4, 1095.0], [24.5, 1095.0], [24.6, 1095.0], [24.7, 1095.0], [24.8, 1096.0], [24.9, 1096.0], [25.0, 1096.0], [25.1, 1096.0], [25.2, 1096.0], [25.3, 1097.0], [25.4, 1097.0], [25.5, 1097.0], [25.6, 1097.0], [25.7, 1097.0], [25.8, 1097.0], [25.9, 1097.0], [26.0, 1098.0], [26.1, 1098.0], [26.2, 1098.0], [26.3, 1098.0], [26.4, 1098.0], [26.5, 1098.0], [26.6, 1098.0], [26.7, 1099.0], [26.8, 1099.0], [26.9, 1099.0], [27.0, 1099.0], [27.1, 1099.0], [27.2, 1099.0], [27.3, 1099.0], [27.4, 1099.0], [27.5, 1100.0], [27.6, 1100.0], [27.7, 1100.0], [27.8, 1100.0], [27.9, 1100.0], [28.0, 1100.0], [28.1, 1100.0], [28.2, 1101.0], [28.3, 1101.0], [28.4, 1101.0], [28.5, 1101.0], [28.6, 1101.0], [28.7, 1101.0], [28.8, 1101.0], [28.9, 1101.0], [29.0, 1102.0], [29.1, 1102.0], [29.2, 1102.0], [29.3, 1102.0], [29.4, 1102.0], [29.5, 1102.0], [29.6, 1102.0], [29.7, 1102.0], [29.8, 1103.0], [29.9, 1103.0], [30.0, 1103.0], [30.1, 1103.0], [30.2, 1103.0], [30.3, 1103.0], [30.4, 1103.0], [30.5, 1104.0], [30.6, 1104.0], [30.7, 1104.0], [30.8, 1104.0], [30.9, 1104.0], [31.0, 1104.0], [31.1, 1104.0], [31.2, 1105.0], [31.3, 1105.0], [31.4, 1105.0], [31.5, 1105.0], [31.6, 1105.0], [31.7, 1105.0], [31.8, 1105.0], [31.9, 1106.0], [32.0, 1106.0], [32.1, 1106.0], [32.2, 1106.0], [32.3, 1106.0], [32.4, 1106.0], [32.5, 1106.0], [32.6, 1106.0], [32.7, 1107.0], [32.8, 1107.0], [32.9, 1107.0], [33.0, 1107.0], [33.1, 1107.0], [33.2, 1107.0], [33.3, 1107.0], [33.4, 1107.0], [33.5, 1108.0], [33.6, 1108.0], [33.7, 1108.0], [33.8, 1108.0], [33.9, 1108.0], [34.0, 1108.0], [34.1, 1108.0], [34.2, 1109.0], [34.3, 1109.0], [34.4, 1109.0], [34.5, 1109.0], [34.6, 1109.0], [34.7, 1109.0], [34.8, 1109.0], [34.9, 1109.0], [35.0, 1110.0], [35.1, 1110.0], [35.2, 1110.0], [35.3, 1110.0], [35.4, 1110.0], [35.5, 1110.0], [35.6, 1110.0], [35.7, 1110.0], [35.8, 1110.0], [35.9, 1111.0], [36.0, 1111.0], [36.1, 1111.0], [36.2, 1111.0], [36.3, 1111.0], [36.4, 1111.0], [36.5, 1111.0], [36.6, 1111.0], [36.7, 1111.0], [36.8, 1112.0], [36.9, 1112.0], [37.0, 1112.0], [37.1, 1112.0], [37.2, 1112.0], [37.3, 1112.0], [37.4, 1112.0], [37.5, 1112.0], [37.6, 1112.0], [37.7, 1113.0], [37.8, 1113.0], [37.9, 1113.0], [38.0, 1113.0], [38.1, 1113.0], [38.2, 1113.0], [38.3, 1113.0], [38.4, 1113.0], [38.5, 1113.0], [38.6, 1114.0], [38.7, 1114.0], [38.8, 1114.0], [38.9, 1114.0], [39.0, 1114.0], [39.1, 1114.0], [39.2, 1114.0], [39.3, 1114.0], [39.4, 1114.0], [39.5, 1114.0], [39.6, 1115.0], [39.7, 1115.0], [39.8, 1115.0], [39.9, 1115.0], [40.0, 1115.0], [40.1, 1115.0], [40.2, 1115.0], [40.3, 1115.0], [40.4, 1115.0], [40.5, 1116.0], [40.6, 1116.0], [40.7, 1116.0], [40.8, 1116.0], [40.9, 1116.0], [41.0, 1116.0], [41.1, 1116.0], [41.2, 1116.0], [41.3, 1117.0], [41.4, 1117.0], [41.5, 1117.0], [41.6, 1117.0], [41.7, 1117.0], [41.8, 1117.0], [41.9, 1117.0], [42.0, 1117.0], [42.1, 1117.0], [42.2, 1118.0], [42.3, 1118.0], [42.4, 1118.0], [42.5, 1118.0], [42.6, 1118.0], [42.7, 1118.0], [42.8, 1118.0], [42.9, 1118.0], [43.0, 1119.0], [43.1, 1119.0], [43.2, 1119.0], [43.3, 1119.0], [43.4, 1119.0], [43.5, 1119.0], [43.6, 1119.0], [43.7, 1119.0], [43.8, 1120.0], [43.9, 1120.0], [44.0, 1120.0], [44.1, 1120.0], [44.2, 1120.0], [44.3, 1120.0], [44.4, 1120.0], [44.5, 1120.0], [44.6, 1121.0], [44.7, 1121.0], [44.8, 1121.0], [44.9, 1121.0], [45.0, 1121.0], [45.1, 1121.0], [45.2, 1121.0], [45.3, 1122.0], [45.4, 1122.0], [45.5, 1122.0], [45.6, 1122.0], [45.7, 1122.0], [45.8, 1122.0], [45.9, 1122.0], [46.0, 1123.0], [46.1, 1123.0], [46.2, 1123.0], [46.3, 1123.0], [46.4, 1123.0], [46.5, 1123.0], [46.6, 1123.0], [46.7, 1124.0], [46.8, 1124.0], [46.9, 1124.0], [47.0, 1124.0], [47.1, 1124.0], [47.2, 1124.0], [47.3, 1125.0], [47.4, 1125.0], [47.5, 1125.0], [47.6, 1125.0], [47.7, 1125.0], [47.8, 1125.0], [47.9, 1126.0], [48.0, 1126.0], [48.1, 1126.0], [48.2, 1126.0], [48.3, 1126.0], [48.4, 1126.0], [48.5, 1127.0], [48.6, 1127.0], [48.7, 1127.0], [48.8, 1127.0], [48.9, 1127.0], [49.0, 1127.0], [49.1, 1128.0], [49.2, 1128.0], [49.3, 1128.0], [49.4, 1128.0], [49.5, 1128.0], [49.6, 1128.0], [49.7, 1129.0], [49.8, 1129.0], [49.9, 1129.0], [50.0, 1129.0], [50.1, 1129.0], [50.2, 1129.0], [50.3, 1130.0], [50.4, 1130.0], [50.5, 1130.0], [50.6, 1130.0], [50.7, 1130.0], [50.8, 1130.0], [50.9, 1131.0], [51.0, 1131.0], [51.1, 1131.0], [51.2, 1131.0], [51.3, 1131.0], [51.4, 1131.0], [51.5, 1131.0], [51.6, 1132.0], [51.7, 1132.0], [51.8, 1132.0], [51.9, 1132.0], [52.0, 1132.0], [52.1, 1133.0], [52.2, 1133.0], [52.3, 1133.0], [52.4, 1133.0], [52.5, 1133.0], [52.6, 1133.0], [52.7, 1134.0], [52.8, 1134.0], [52.9, 1134.0], [53.0, 1134.0], [53.1, 1134.0], [53.2, 1135.0], [53.3, 1135.0], [53.4, 1135.0], [53.5, 1135.0], [53.6, 1135.0], [53.7, 1136.0], [53.8, 1136.0], [53.9, 1136.0], [54.0, 1136.0], [54.1, 1136.0], [54.2, 1137.0], [54.3, 1137.0], [54.4, 1137.0], [54.5, 1137.0], [54.6, 1137.0], [54.7, 1138.0], [54.8, 1138.0], [54.9, 1138.0], [55.0, 1138.0], [55.1, 1139.0], [55.2, 1139.0], [55.3, 1139.0], [55.4, 1139.0], [55.5, 1139.0], [55.6, 1140.0], [55.7, 1140.0], [55.8, 1140.0], [55.9, 1140.0], [56.0, 1141.0], [56.1, 1141.0], [56.2, 1141.0], [56.3, 1141.0], [56.4, 1141.0], [56.5, 1142.0], [56.6, 1142.0], [56.7, 1142.0], [56.8, 1142.0], [56.9, 1143.0], [57.0, 1143.0], [57.1, 1143.0], [57.2, 1143.0], [57.3, 1144.0], [57.4, 1144.0], [57.5, 1144.0], [57.6, 1144.0], [57.7, 1145.0], [57.8, 1145.0], [57.9, 1145.0], [58.0, 1145.0], [58.1, 1145.0], [58.2, 1146.0], [58.3, 1146.0], [58.4, 1146.0], [58.5, 1146.0], [58.6, 1147.0], [58.7, 1147.0], [58.8, 1147.0], [58.9, 1147.0], [59.0, 1147.0], [59.1, 1148.0], [59.2, 1148.0], [59.3, 1148.0], [59.4, 1148.0], [59.5, 1149.0], [59.6, 1149.0], [59.7, 1149.0], [59.8, 1149.0], [59.9, 1150.0], [60.0, 1150.0], [60.1, 1150.0], [60.2, 1150.0], [60.3, 1151.0], [60.4, 1151.0], [60.5, 1151.0], [60.6, 1151.0], [60.7, 1152.0], [60.8, 1152.0], [60.9, 1152.0], [61.0, 1153.0], [61.1, 1153.0], [61.2, 1153.0], [61.3, 1154.0], [61.4, 1154.0], [61.5, 1154.0], [61.6, 1154.0], [61.7, 1155.0], [61.8, 1155.0], [61.9, 1155.0], [62.0, 1156.0], [62.1, 1156.0], [62.2, 1156.0], [62.3, 1157.0], [62.4, 1157.0], [62.5, 1157.0], [62.6, 1157.0], [62.7, 1158.0], [62.8, 1158.0], [62.9, 1158.0], [63.0, 1159.0], [63.1, 1159.0], [63.2, 1159.0], [63.3, 1159.0], [63.4, 1160.0], [63.5, 1160.0], [63.6, 1160.0], [63.7, 1160.0], [63.8, 1161.0], [63.9, 1161.0], [64.0, 1161.0], [64.1, 1162.0], [64.2, 1162.0], [64.3, 1162.0], [64.4, 1162.0], [64.5, 1163.0], [64.6, 1163.0], [64.7, 1163.0], [64.8, 1163.0], [64.9, 1164.0], [65.0, 1164.0], [65.1, 1164.0], [65.2, 1165.0], [65.3, 1165.0], [65.4, 1165.0], [65.5, 1165.0], [65.6, 1166.0], [65.7, 1166.0], [65.8, 1166.0], [65.9, 1167.0], [66.0, 1167.0], [66.1, 1168.0], [66.2, 1168.0], [66.3, 1168.0], [66.4, 1169.0], [66.5, 1169.0], [66.6, 1170.0], [66.7, 1170.0], [66.8, 1170.0], [66.9, 1171.0], [67.0, 1171.0], [67.1, 1172.0], [67.2, 1172.0], [67.3, 1173.0], [67.4, 1173.0], [67.5, 1174.0], [67.6, 1174.0], [67.7, 1175.0], [67.8, 1175.0], [67.9, 1176.0], [68.0, 1176.0], [68.1, 1177.0], [68.2, 1178.0], [68.3, 1178.0], [68.4, 1179.0], [68.5, 1180.0], [68.6, 1180.0], [68.7, 1181.0], [68.8, 1182.0], [68.9, 1184.0], [69.0, 1185.0], [69.1, 1186.0], [69.2, 1187.0], [69.3, 1188.0], [69.4, 1189.0], [69.5, 1190.0], [69.6, 1192.0], [69.7, 1193.0], [69.8, 1194.0], [69.9, 1195.0], [70.0, 1197.0], [70.1, 1198.0], [70.2, 1200.0], [70.3, 1202.0], [70.4, 1204.0], [70.5, 1206.0], [70.6, 1208.0], [70.7, 1210.0], [70.8, 1213.0], [70.9, 1215.0], [71.0, 1216.0], [71.1, 1218.0], [71.2, 1220.0], [71.3, 1222.0], [71.4, 1224.0], [71.5, 1227.0], [71.6, 1229.0], [71.7, 1231.0], [71.8, 1233.0], [71.9, 1236.0], [72.0, 1238.0], [72.1, 1240.0], [72.2, 1242.0], [72.3, 1244.0], [72.4, 1247.0], [72.5, 1251.0], [72.6, 1254.0], [72.7, 1257.0], [72.8, 1259.0], [72.9, 1261.0], [73.0, 1263.0], [73.1, 1266.0], [73.2, 1268.0], [73.3, 1271.0], [73.4, 1274.0], [73.5, 1276.0], [73.6, 1277.0], [73.7, 1279.0], [73.8, 1282.0], [73.9, 1285.0], [74.0, 1288.0], [74.1, 1293.0], [74.2, 1296.0], [74.3, 1298.0], [74.4, 1300.0], [74.5, 1302.0], [74.6, 1303.0], [74.7, 1304.0], [74.8, 1306.0], [74.9, 1307.0], [75.0, 1308.0], [75.1, 1309.0], [75.2, 1310.0], [75.3, 1311.0], [75.4, 1312.0], [75.5, 1314.0], [75.6, 1315.0], [75.7, 1316.0], [75.8, 1318.0], [75.9, 1320.0], [76.0, 1322.0], [76.1, 1323.0], [76.2, 1325.0], [76.3, 1326.0], [76.4, 1328.0], [76.5, 1329.0], [76.6, 1331.0], [76.7, 1333.0], [76.8, 1336.0], [76.9, 1340.0], [77.0, 1343.0], [77.1, 1345.0], [77.2, 1348.0], [77.3, 1350.0], [77.4, 1352.0], [77.5, 1355.0], [77.6, 1359.0], [77.7, 1363.0], [77.8, 1370.0], [77.9, 1376.0], [78.0, 1380.0], [78.1, 1388.0], [78.2, 1395.0], [78.3, 1402.0], [78.4, 1406.0], [78.5, 1411.0], [78.6, 1416.0], [78.7, 1420.0], [78.8, 1423.0], [78.9, 1426.0], [79.0, 1435.0], [79.1, 1440.0], [79.2, 1443.0], [79.3, 1445.0], [79.4, 1447.0], [79.5, 1449.0], [79.6, 1451.0], [79.7, 1454.0], [79.8, 1458.0], [79.9, 1461.0], [80.0, 1463.0], [80.1, 1465.0], [80.2, 1470.0], [80.3, 1476.0], [80.4, 1483.0], [80.5, 1489.0], [80.6, 1501.0], [80.7, 1506.0], [80.8, 1509.0], [80.9, 1512.0], [81.0, 1515.0], [81.1, 1520.0], [81.2, 1523.0], [81.3, 1526.0], [81.4, 1529.0], [81.5, 1533.0], [81.6, 1536.0], [81.7, 1539.0], [81.8, 1541.0], [81.9, 1543.0], [82.0, 1545.0], [82.1, 1547.0], [82.2, 1549.0], [82.3, 1551.0], [82.4, 1553.0], [82.5, 1555.0], [82.6, 1557.0], [82.7, 1559.0], [82.8, 1561.0], [82.9, 1563.0], [83.0, 1566.0], [83.1, 1568.0], [83.2, 1570.0], [83.3, 1572.0], [83.4, 1574.0], [83.5, 1576.0], [83.6, 1577.0], [83.7, 1579.0], [83.8, 1580.0], [83.9, 1582.0], [84.0, 1583.0], [84.1, 1585.0], [84.2, 1586.0], [84.3, 1589.0], [84.4, 1594.0], [84.5, 1601.0], [84.6, 1613.0], [84.7, 1622.0], [84.8, 1634.0], [84.9, 1642.0], [85.0, 1649.0], [85.1, 1654.0], [85.2, 1656.0], [85.3, 1659.0], [85.4, 1662.0], [85.5, 1673.0], [85.6, 1696.0], [85.7, 1709.0], [85.8, 1733.0], [85.9, 1747.0], [86.0, 1769.0], [86.1, 1795.0], [86.2, 1802.0], [86.3, 1807.0], [86.4, 1824.0], [86.5, 1832.0], [86.6, 1835.0], [86.7, 1840.0], [86.8, 1845.0], [86.9, 1851.0], [87.0, 1860.0], [87.1, 1871.0], [87.2, 1887.0], [87.3, 1899.0], [87.4, 1902.0], [87.5, 1905.0], [87.6, 1907.0], [87.7, 1910.0], [87.8, 1913.0], [87.9, 1916.0], [88.0, 1919.0], [88.1, 1921.0], [88.2, 1923.0], [88.3, 1928.0], [88.4, 1932.0], [88.5, 1945.0], [88.6, 1957.0], [88.7, 1970.0], [88.8, 1992.0], [88.9, 2007.0], [89.0, 2012.0], [89.1, 2015.0], [89.2, 2022.0], [89.3, 2027.0], [89.4, 2036.0], [89.5, 2074.0], [89.6, 2132.0], [89.7, 2187.0], [89.8, 2225.0], [89.9, 2267.0], [90.0, 2361.0], [90.1, 2402.0], [90.2, 2471.0], [90.3, 2621.0], [90.4, 2724.0], [90.5, 2763.0], [90.6, 2773.0], [90.7, 2785.0], [90.8, 2789.0], [90.9, 2793.0], [91.0, 2871.0], [91.1, 3056.0], [91.2, 3068.0], [91.3, 3083.0], [91.4, 3094.0], [91.5, 3151.0], [91.6, 3192.0], [91.7, 3337.0], [91.8, 3425.0], [91.9, 3440.0], [92.0, 3479.0], [92.1, 3581.0], [92.2, 3595.0], [92.3, 3601.0], [92.4, 3611.0], [92.5, 3618.0], [92.6, 3723.0], [92.7, 3750.0], [92.8, 3784.0], [92.9, 3814.0], [93.0, 3929.0], [93.1, 4020.0], [93.2, 4074.0], [93.3, 4297.0], [93.4, 4456.0], [93.5, 4479.0], [93.6, 4487.0], [93.7, 4514.0], [93.8, 4789.0], [93.9, 4935.0], [94.0, 5055.0], [94.1, 5080.0], [94.2, 5107.0], [94.3, 5129.0], [94.4, 5151.0], [94.5, 5199.0], [94.6, 5268.0], [94.7, 5294.0], [94.8, 5325.0], [94.9, 5388.0], [95.0, 5429.0], [95.1, 5461.0], [95.2, 5512.0], [95.3, 5539.0], [95.4, 5561.0], [95.5, 5626.0], [95.6, 5674.0], [95.7, 5699.0], [95.8, 5775.0], [95.9, 5881.0], [96.0, 5977.0], [96.1, 6034.0], [96.2, 6076.0], [96.3, 6107.0], [96.4, 6123.0], [96.5, 6132.0], [96.6, 6142.0], [96.7, 6156.0], [96.8, 6176.0], [96.9, 6208.0], [97.0, 6228.0], [97.1, 6258.0], [97.2, 6281.0], [97.3, 6314.0], [97.4, 6357.0], [97.5, 6398.0], [97.6, 6453.0], [97.7, 6526.0], [97.8, 6589.0], [97.9, 6607.0], [98.0, 6640.0], [98.1, 6726.0], [98.2, 6789.0], [98.3, 6897.0], [98.4, 7012.0], [98.5, 7217.0], [98.6, 7440.0], [98.7, 7481.0], [98.8, 7513.0], [98.9, 7563.0], [99.0, 7616.0], [99.1, 7683.0], [99.2, 8042.0], [99.3, 8312.0], [99.4, 8427.0], [99.5, 8574.0], [99.6, 8667.0], [99.7, 8809.0], [99.8, 9005.0], [99.9, 9260.0], [100.0, 9563.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 85520.0, "series": [{"data": [[600.0, 1.0], [800.0, 38.0], [900.0, 625.0], [1000.0, 54145.0], [1100.0, 85520.0], [1200.0, 8450.0], [1300.0, 7759.0], [1400.0, 4630.0], [1500.0, 7788.0], [1600.0, 2288.0], [1700.0, 1044.0], [1800.0, 2358.0], [1900.0, 3018.0], [2000.0, 1437.0], [2100.0, 397.0], [2300.0, 329.0], [2200.0, 367.0], [2400.0, 260.0], [2500.0, 129.0], [2600.0, 175.0], [2700.0, 1093.0], [2800.0, 174.0], [2900.0, 124.0], [3000.0, 733.0], [3100.0, 340.0], [3200.0, 130.0], [3300.0, 159.0], [3400.0, 523.0], [3500.0, 503.0], [3700.0, 647.0], [3600.0, 534.0], [3800.0, 261.0], [3900.0, 150.0], [4000.0, 320.0], [4100.0, 74.0], [4200.0, 79.0], [4300.0, 117.0], [4400.0, 657.0], [4500.0, 69.0], [4600.0, 74.0], [4700.0, 93.0], [4800.0, 148.0], [4900.0, 97.0], [5000.0, 487.0], [5100.0, 657.0], [5200.0, 453.0], [5300.0, 376.0], [5400.0, 516.0], [5500.0, 593.0], [5600.0, 463.0], [5700.0, 234.0], [5800.0, 198.0], [5900.0, 268.0], [6000.0, 453.0], [6100.0, 1177.0], [6200.0, 778.0], [6300.0, 495.0], [6400.0, 322.0], [6500.0, 390.0], [6600.0, 368.0], [6700.0, 346.0], [6800.0, 171.0], [6900.0, 134.0], [7000.0, 141.0], [7100.0, 94.0], [7200.0, 120.0], [7300.0, 51.0], [7400.0, 381.0], [7500.0, 390.0], [7600.0, 294.0], [7700.0, 25.0], [7800.0, 79.0], [7900.0, 66.0], [8000.0, 67.0], [8100.0, 61.0], [8200.0, 80.0], [8300.0, 134.0], [8400.0, 177.0], [8500.0, 138.0], [8600.0, 203.0], [8700.0, 154.0], [8800.0, 104.0], [8900.0, 98.0], [9000.0, 80.0], [9100.0, 72.0], [9200.0, 91.0], [9300.0, 89.0], [9400.0, 38.0], [9500.0, 37.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 38811.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 161189.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 161189.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 38811.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 837.3260869565216, "minX": 1.66040742E12, "maxY": 1000.0, "series": [{"data": [[1.6604076E12, 1000.0], [1.66040742E12, 837.3260869565216], [1.66040778E12, 966.8389464594134], [1.66040766E12, 1000.0], [1.66040754E12, 1000.0], [1.66040748E12, 1000.0], [1.66040772E12, 1000.0]], "isOverall": false, "label": "Thread Group Create Type", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66040778E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 623.0, "minX": 1.0, "maxY": 5359.0, "series": [{"data": [[2.0, 623.0], [3.0, 850.0], [5.0, 863.0], [6.0, 869.0], [7.0, 865.0], [8.0, 860.0], [9.0, 870.0], [10.0, 876.0], [11.0, 874.0], [12.0, 879.0], [13.0, 868.0], [14.0, 878.0], [15.0, 909.0], [16.0, 880.0], [17.0, 878.0], [18.0, 890.0], [19.0, 870.0], [20.0, 877.0], [21.0, 897.0], [22.0, 880.0], [23.0, 880.0], [24.0, 882.0], [25.0, 881.0], [27.0, 882.0], [28.0, 883.0], [29.0, 885.0], [30.0, 885.0], [31.0, 885.0], [33.0, 884.0], [32.0, 888.0], [35.0, 898.0], [34.0, 889.0], [37.0, 898.0], [36.0, 889.0], [39.0, 897.0], [38.0, 895.0], [41.0, 904.0], [40.0, 896.0], [42.0, 903.0], [45.0, 905.0], [44.0, 907.5], [47.0, 910.0], [46.0, 906.0], [49.0, 907.0], [48.0, 919.0], [51.0, 919.0], [50.0, 906.0], [53.0, 921.0], [52.0, 923.0], [55.0, 925.0], [54.0, 923.0], [56.0, 931.0], [59.0, 934.0], [58.0, 928.5], [61.0, 935.0], [60.0, 929.0], [63.0, 938.0], [62.0, 934.0], [66.0, 941.0], [65.0, 939.0], [64.0, 937.0], [71.0, 943.0], [70.0, 943.0], [69.0, 941.0], [68.0, 941.5], [75.0, 943.0], [74.0, 944.0], [72.0, 945.0], [79.0, 942.0], [78.0, 943.0], [77.0, 944.0], [76.0, 943.0], [82.0, 945.0], [81.0, 943.0], [80.0, 943.0], [87.0, 945.0], [86.0, 946.0], [85.0, 944.0], [84.0, 942.5], [91.0, 947.0], [90.0, 945.3333333333334], [95.0, 950.0], [94.0, 949.0], [93.0, 949.0], [92.0, 948.0], [98.0, 951.0], [96.0, 951.0], [103.0, 953.0], [102.0, 957.0], [101.0, 955.0], [100.0, 955.5], [107.0, 957.0], [104.0, 957.0], [111.0, 959.0], [110.0, 958.0], [109.0, 958.0], [108.0, 956.0], [115.0, 960.0], [114.0, 959.0], [113.0, 959.0], [112.0, 960.0], [119.0, 960.0], [118.0, 959.0], [117.0, 961.0], [116.0, 957.0], [123.0, 963.0], [122.0, 962.0], [121.0, 962.0], [120.0, 963.0], [127.0, 965.0], [126.0, 965.0], [125.0, 976.0], [124.0, 967.0], [135.0, 969.0], [134.0, 978.0], [133.0, 966.0], [132.0, 967.0], [131.0, 959.0], [130.0, 964.5], [128.0, 965.0], [143.0, 972.0], [142.0, 971.0], [141.0, 969.0], [139.0, 979.0], [138.0, 970.0], [137.0, 989.0], [136.0, 969.0], [151.0, 991.0], [150.0, 982.0], [149.0, 975.0], [148.0, 971.0], [147.0, 973.0], [146.0, 985.0], [145.0, 970.0], [144.0, 972.0], [158.0, 992.0], [157.0, 1032.0], [156.0, 1001.0], [155.0, 1016.0], [154.0, 997.5], [152.0, 979.0], [167.0, 1078.0], [166.0, 1081.0], [165.0, 1077.5], [163.0, 1059.0], [162.0, 1068.0], [161.0, 1043.0], [160.0, 1077.0], [175.0, 1083.0], [174.0, 1081.0], [173.0, 1082.0], [172.0, 1083.0], [171.0, 1082.0], [170.0, 1080.5], [168.0, 1079.0], [183.0, 1082.0], [181.0, 1084.0], [180.0, 1082.0], [179.0, 1085.0], [178.0, 1083.0], [177.0, 1083.5], [191.0, 1085.0], [190.0, 1080.0], [189.0, 1086.0], [188.0, 1083.0], [187.0, 1084.0], [186.0, 1085.0], [185.0, 1086.0], [184.0, 1084.5], [199.0, 1084.0], [198.0, 1079.0], [197.0, 1085.0], [196.0, 1086.0], [194.0, 1080.0], [193.0, 1083.0], [192.0, 1085.0], [207.0, 1082.0], [206.0, 1082.0], [205.0, 1081.0], [204.0, 1083.0], [203.0, 1085.0], [201.0, 1085.0], [200.0, 1084.0], [215.0, 1083.0], [214.0, 1083.0], [213.0, 1082.0], [212.0, 1082.0], [211.0, 1085.0], [210.0, 1083.0], [209.0, 1082.0], [208.0, 1083.0], [223.0, 1086.0], [222.0, 1085.0], [221.0, 1084.0], [220.0, 1084.0], [219.0, 1082.0], [218.0, 1082.0], [217.0, 1085.0], [216.0, 1082.0], [231.0, 1086.0], [230.0, 1087.0], [229.0, 1087.0], [228.0, 1086.0], [227.0, 1087.0], [226.0, 1085.0], [225.0, 1087.0], [224.0, 1086.0], [239.0, 1090.0], [238.0, 1089.0], [237.0, 1091.0], [236.0, 1090.0], [235.0, 1090.0], [234.0, 1089.0], [233.0, 1091.0], [232.0, 1087.0], [247.0, 1094.0], [246.0, 1096.5], [244.0, 1091.0], [243.0, 1094.0], [242.0, 1091.0], [241.0, 1092.0], [240.0, 1091.0], [255.0, 1104.0], [254.0, 1102.0], [253.0, 1102.5], [251.0, 1103.0], [250.0, 1103.0], [249.0, 1095.0], [248.0, 1094.0], [259.0, 1103.0], [271.0, 1106.0], [269.0, 1106.5], [258.0, 1103.0], [257.0, 1105.5], [267.0, 1104.0], [266.0, 1106.0], [265.0, 1105.0], [263.0, 1105.0], [262.0, 1105.0], [261.0, 1104.0], [260.0, 1104.0], [286.0, 1101.0], [287.0, 1100.0], [285.0, 1102.0], [284.0, 1107.0], [283.0, 1100.0], [282.0, 1099.0], [281.0, 1102.0], [280.0, 1099.0], [279.0, 1100.0], [272.0, 1105.0], [275.0, 1103.0], [273.0, 1105.0], [278.0, 1101.0], [277.0, 1101.0], [276.0, 1103.0], [302.0, 1096.0], [303.0, 1096.0], [301.0, 1095.0], [300.0, 1095.0], [299.0, 1096.0], [298.0, 1097.0], [297.0, 1098.0], [296.0, 1098.0], [295.0, 1098.0], [289.0, 1102.0], [288.0, 1101.0], [291.0, 1105.0], [290.0, 1100.0], [294.0, 1098.0], [293.0, 1098.0], [292.0, 1100.0], [318.0, 1101.0], [319.0, 1100.0], [317.0, 1100.0], [307.0, 1096.0], [306.0, 1096.0], [305.0, 1095.0], [304.0, 1095.0], [315.0, 1099.0], [314.0, 1100.0], [313.0, 1097.5], [311.0, 1099.0], [310.0, 1099.0], [309.0, 1097.0], [308.0, 1097.0], [334.0, 1103.0], [335.0, 1104.0], [333.0, 1106.0], [332.0, 1107.0], [331.0, 1106.0], [330.0, 1106.0], [329.0, 1106.0], [328.0, 1108.0], [327.0, 1099.0], [321.0, 1101.0], [320.0, 1100.0], [323.0, 1102.0], [322.0, 1101.0], [326.0, 1107.0], [325.0, 1100.0], [324.0, 1101.0], [350.0, 1103.0], [351.0, 1104.0], [349.0, 1104.0], [348.0, 1104.0], [347.0, 1104.0], [346.0, 1102.0], [345.0, 1103.0], [344.0, 1100.0], [343.0, 1102.0], [337.0, 1098.0], [336.0, 1103.0], [339.0, 1098.0], [338.0, 1097.0], [341.0, 1098.0], [340.0, 1097.0], [367.0, 1106.0], [362.0, 1876.0], [366.0, 1104.0], [365.0, 1104.0], [364.0, 1104.0], [355.0, 1110.0], [354.0, 1105.0], [353.0, 1105.0], [352.0, 1105.0], [363.0, 1105.0], [361.0, 1103.0], [360.0, 1104.0], [359.0, 1111.0], [358.0, 1111.0], [357.0, 1104.0], [356.0, 1105.0], [382.0, 1942.5], [373.0, 1915.0], [372.0, 1108.0], [383.0, 1111.0], [381.0, 1110.0], [380.0, 1112.0], [379.0, 1110.0], [378.0, 1110.0], [377.0, 1109.5], [375.0, 1107.0], [369.0, 1106.5], [371.0, 1107.0], [370.0, 1109.0], [374.0, 1109.0], [398.0, 1996.5], [399.0, 1112.0], [397.0, 1113.0], [396.0, 1111.0], [395.0, 1114.0], [394.0, 1113.0], [393.0, 1112.0], [392.0, 1110.0], [391.0, 1113.0], [386.0, 1110.5], [384.0, 1111.0], [390.0, 1111.0], [389.0, 1111.0], [388.0, 1111.5], [414.0, 2034.0], [400.0, 2013.0], [401.0, 1112.0], [403.0, 1114.0], [402.0, 1113.0], [407.0, 1111.0], [406.0, 1114.0], [405.0, 1114.0], [404.0, 1110.0], [410.0, 2011.0], [415.0, 1106.0], [413.0, 1100.0], [412.0, 1105.0], [411.0, 1101.0], [409.0, 1112.0], [408.0, 1113.0], [428.0, 1103.5], [430.0, 1100.0], [431.0, 1098.0], [429.0, 1101.0], [426.0, 1100.0], [425.0, 1102.0], [423.0, 1096.0], [416.0, 1100.0], [419.0, 1108.0], [417.0, 1099.0], [422.0, 1096.0], [421.0, 1098.0], [420.0, 1109.5], [447.0, 1092.0], [433.0, 2090.0], [438.0, 1093.0], [432.0, 1098.0], [437.0, 1091.0], [436.0, 1091.0], [445.0, 2140.5], [446.0, 1098.0], [444.0, 1092.0], [435.0, 1091.0], [434.0, 1093.0], [443.0, 1092.0], [442.0, 1091.0], [441.0, 1091.0], [440.0, 1091.5], [463.0, 1098.0], [456.0, 2171.0], [462.0, 2199.0], [461.0, 1096.0], [460.0, 1094.0], [451.0, 1092.5], [449.0, 1091.0], [448.0, 1100.0], [459.0, 1096.0], [458.0, 1094.0], [457.0, 1095.0], [455.0, 1095.0], [454.0, 1092.0], [453.0, 1093.0], [452.0, 1092.0], [479.0, 1099.0], [466.0, 2215.0], [464.0, 2208.5], [465.0, 1095.0], [471.0, 1096.0], [470.0, 1105.0], [469.0, 1098.0], [468.0, 1100.0], [475.0, 2625.6666666666665], [478.0, 1101.0], [477.0, 1097.0], [476.0, 1099.0], [467.0, 1097.0], [474.0, 1097.0], [473.0, 1098.0], [472.0, 1097.0], [495.0, 1099.0], [488.0, 3364.0], [494.0, 1098.0], [493.0, 1103.0], [492.0, 1100.0], [483.0, 1101.0], [482.0, 1103.0], [481.0, 1100.0], [480.0, 1100.0], [491.0, 1102.0], [490.0, 1103.0], [489.0, 1102.0], [487.0, 1102.0], [486.0, 1102.0], [485.0, 1100.0], [484.0, 1101.0], [510.0, 2280.0], [497.0, 2258.0], [500.0, 2252.5], [501.0, 1098.0], [503.0, 1097.0], [496.0, 1099.0], [502.0, 1097.0], [499.0, 2250.0], [498.0, 1097.0], [511.0, 1099.0], [505.0, 1097.0], [504.0, 1097.0], [509.0, 1098.0], [508.0, 1099.0], [507.0, 1099.0], [506.0, 1099.0], [537.0, 2300.0], [512.0, 2274.0], [515.0, 2271.5], [514.0, 1100.0], [517.0, 1100.0], [516.0, 1100.0], [536.0, 1101.0], [518.0, 1099.0], [521.0, 2335.0], [520.0, 1099.0], [523.0, 1101.0], [522.0, 1099.0], [524.0, 2332.0], [526.0, 1102.0], [525.0, 1100.0], [535.0, 2310.0], [534.0, 1103.0], [533.0, 1101.0], [532.0, 1102.0], [531.0, 1101.0], [530.0, 1100.0], [528.0, 1101.0], [542.0, 2419.0], [543.0, 1101.0], [541.0, 1102.0], [540.0, 1102.0], [539.0, 1103.0], [538.0, 1099.0], [573.0, 1100.0], [568.0, 2357.0], [549.0, 2384.5], [550.0, 2461.5], [551.0, 1102.0], [555.0, 2329.0], [554.0, 1102.0], [553.0, 1102.0], [552.0, 1102.0], [556.0, 2471.5], [559.0, 1100.0], [548.0, 1101.0], [547.0, 1103.0], [546.0, 1101.0], [545.0, 1102.0], [544.0, 1102.0], [558.0, 1101.5], [564.0, 2457.0], [563.0, 1101.0], [562.0, 1100.0], [561.0, 1101.0], [560.0, 1101.0], [565.0, 1100.0], [567.0, 1100.0], [566.0, 1101.0], [575.0, 1102.0], [574.0, 1100.0], [572.0, 1100.0], [571.0, 1104.0], [570.0, 1100.0], [569.0, 1101.0], [601.0, 1097.0], [578.0, 2932.3333333333335], [581.0, 3853.0], [580.0, 1100.0], [579.0, 1100.0], [582.0, 1101.0], [600.0, 1107.0], [583.0, 1100.0], [588.0, 1999.0], [586.0, 1101.0], [585.0, 1101.0], [584.0, 1101.0], [591.0, 1102.0], [577.0, 1100.0], [576.0, 1101.0], [590.0, 1101.0], [603.0, 2526.0], [607.0, 1105.0], [592.0, 1104.0], [594.0, 1103.0], [593.0, 1103.0], [597.0, 1100.0], [596.0, 1105.0], [599.0, 1102.0], [598.0, 1097.0], [605.0, 1105.0], [604.0, 1105.0], [602.0, 1104.0], [632.0, 1104.0], [636.0, 2609.0], [608.0, 3878.0], [610.0, 2492.5], [609.0, 1102.0], [611.0, 1106.0], [613.0, 1108.0], [612.0, 1104.0], [615.0, 1105.0], [614.0, 1106.0], [633.0, 1106.0], [635.0, 1100.0], [634.0, 1105.0], [616.0, 4116.0], [619.0, 1108.0], [617.0, 1109.0], [620.0, 2973.0], [622.0, 2617.5], [621.0, 1108.0], [623.0, 1114.0], [629.0, 2039.6666666666667], [627.0, 1100.0], [626.0, 1103.0], [625.0, 1113.0], [624.0, 1105.0], [631.0, 1102.0], [630.0, 1101.0], [639.0, 1102.0], [638.0, 1103.0], [637.0, 1101.0], [669.0, 2693.5], [640.0, 2592.5], [653.0, 2592.5], [652.0, 1100.0], [651.0, 1098.0], [650.0, 1101.0], [649.0, 1103.0], [648.0, 1104.0], [655.0, 1101.0], [654.0, 1104.0], [658.0, 2586.5], [657.0, 1100.0], [656.0, 1100.0], [659.0, 1104.0], [661.0, 1103.0], [660.0, 1105.0], [663.0, 1099.0], [662.0, 1102.0], [671.0, 1103.0], [670.0, 1100.0], [668.0, 1096.0], [667.0, 1101.0], [666.0, 1099.0], [665.0, 1100.0], [664.0, 1100.0], [647.0, 1102.0], [646.0, 1104.0], [645.0, 1103.0], [644.0, 1102.5], [642.0, 1103.0], [641.0, 1104.0], [700.0, 1104.0], [672.0, 4352.0], [676.0, 3220.0], [675.0, 1101.0], [673.0, 1099.5], [679.0, 1100.0], [678.0, 1101.5], [697.0, 1098.0], [696.0, 1097.0], [680.0, 2734.5], [683.0, 1100.0], [682.0, 1100.0], [684.0, 3240.666666666667], [687.0, 1102.0], [686.0, 1102.0], [689.0, 3241.666666666667], [688.0, 1097.0], [691.0, 1099.0], [690.0, 1100.0], [693.0, 1099.0], [692.0, 1097.0], [695.0, 1097.0], [694.0, 1098.0], [703.0, 1094.0], [701.0, 1094.0], [699.0, 1095.0], [698.0, 1103.0], [729.0, 1089.0], [734.0, 1090.5], [704.0, 2172.3333333333335], [708.0, 2742.5], [707.0, 1095.0], [706.0, 1093.0], [705.0, 1096.0], [710.0, 1094.0], [709.0, 1093.0], [728.0, 1093.0], [711.0, 1100.0], [730.0, 1093.0], [718.0, 2717.5], [717.0, 1187.0], [716.0, 1094.0], [715.0, 1091.0], [714.0, 1094.0], [713.0, 1093.0], [712.0, 1095.0], [719.0, 1089.0], [724.0, 2722.0], [725.0, 1090.0], [727.0, 1165.0], [726.0, 1091.0], [723.0, 2699.0], [735.0, 2756.5], [720.0, 1090.0], [722.0, 1089.0], [721.0, 1092.0], [732.0, 1090.0], [731.0, 1092.0], [762.0, 2804.5], [766.0, 1089.0], [740.0, 2764.0], [747.0, 3340.0], [746.0, 1091.0], [745.0, 1089.0], [744.0, 1092.0], [749.0, 1139.0], [748.0, 1091.0], [751.0, 1093.0], [737.0, 1093.0], [736.0, 1093.0], [739.0, 1093.0], [738.0, 1092.0], [750.0, 1092.0], [754.0, 2232.0], [757.0, 3404.333333333333], [756.0, 1092.0], [755.0, 1144.0], [759.0, 1092.0], [758.0, 1093.0], [761.0, 1092.0], [760.0, 1090.0], [743.0, 1090.0], [742.0, 1091.0], [741.0, 1089.0], [763.0, 1090.0], [767.0, 1090.0], [752.0, 1091.0], [765.0, 1092.0], [764.0, 1091.0], [794.0, 2875.5], [772.0, 2829.5], [769.0, 2875.5], [771.0, 1088.0], [770.0, 1091.0], [783.0, 1082.0], [768.0, 1090.0], [775.0, 2850.0], [774.0, 1087.0], [773.0, 1088.0], [793.0, 1075.5], [798.0, 2881.5], [797.0, 1071.0], [796.0, 1072.0], [795.0, 1077.0], [779.0, 2855.5], [778.0, 1084.0], [777.0, 1087.0], [776.0, 1086.0], [780.0, 1083.0], [782.0, 2264.3333333333335], [784.0, 2857.0], [785.0, 2863.5], [786.0, 2866.0], [788.0, 2868.5], [787.0, 1081.0], [789.0, 1078.0], [791.0, 1077.0], [790.0, 1078.0], [825.0, 2941.5], [801.0, 2897.5], [800.0, 2278.3333333333335], [807.0, 2910.0], [806.0, 1071.0], [805.0, 1072.0], [804.0, 1072.0], [803.0, 1072.0], [802.0, 1072.0], [824.0, 1072.0], [808.0, 2903.0], [811.0, 1072.0], [810.0, 1072.5], [813.0, 1072.0], [812.0, 1076.0], [814.0, 1073.0], [816.0, 2305.0], [820.0, 2929.0], [819.0, 1072.5], [817.0, 1073.0], [821.0, 1074.0], [822.0, 2934.0], [823.0, 1072.0], [828.0, 2945.5], [827.0, 1072.0], [826.0, 1072.0], [829.0, 1071.0], [831.0, 1070.0], [830.0, 1071.0], [837.0, 2962.5], [840.0, 2336.3333333333335], [841.0, 1074.0], [843.0, 1092.0], [842.0, 1075.0], [844.0, 2983.0], [846.0, 3927.75], [845.0, 1103.5], [847.0, 1104.0], [832.0, 1071.0], [834.0, 1069.0], [833.0, 1073.0], [836.0, 1073.0], [835.0, 1073.0], [851.0, 3002.5], [855.0, 2367.3333333333335], [854.0, 1102.0], [853.0, 1101.0], [852.0, 1102.6666666666667], [856.0, 2997.5], [838.0, 1074.0], [857.0, 1101.0], [859.0, 1097.0], [858.0, 1097.6666666666667], [860.0, 3008.5], [863.0, 1096.5], [850.0, 1098.0], [849.0, 1105.0], [848.0, 1104.0], [862.0, 1099.1666666666667], [869.0, 3014.5], [893.0, 1102.5], [872.0, 3024.0], [873.0, 1094.0], [875.0, 1091.5], [874.0, 1093.888888888889], [877.0, 1090.6666666666667], [876.0, 1092.3333333333333], [879.0, 1091.0], [864.0, 1096.3333333333333], [866.0, 1096.5714285714287], [865.0, 1096.5], [868.0, 1093.3333333333333], [867.0, 1093.0], [878.0, 1091.0], [883.0, 2388.6666666666665], [886.0, 1415.3333333333335], [885.0, 1089.3999999999999], [884.0, 1088.0], [887.0, 1089.0], [890.0, 1583.0], [889.0, 1091.8], [888.0, 1090.0], [871.0, 1093.5714285714287], [870.0, 1092.5], [894.0, 1102.3333333333333], [880.0, 1092.0], [882.0, 1089.6666666666667], [881.0, 1085.0], [892.0, 1103.4705882352941], [891.0, 1094.5], [903.0, 1767.5], [904.0, 1535.0], [905.0, 1093.0], [906.0, 1342.6875], [909.0, 2437.3333333333335], [908.0, 1104.3333333333333], [907.0, 1099.5], [911.0, 1105.0], [896.0, 1109.3076923076922], [898.0, 1111.0], [897.0, 1107.3333333333333], [900.0, 1108.0], [899.0, 1125.5], [902.0, 1109.3333333333333], [901.0, 1109.0], [910.0, 1104.5], [915.0, 2446.6666666666665], [917.0, 4114.25], [916.0, 1104.4], [919.0, 1107.0], [918.0, 1107.8], [927.0, 3147.5], [912.0, 1104.0], [914.0, 1104.0], [913.0, 1103.75], [926.0, 1113.5], [925.0, 1113.0], [924.0, 1114.4545454545455], [923.0, 1115.3333333333333], [922.0, 1116.5], [921.0, 1115.5], [920.0, 1110.5], [953.0, 1074.0], [957.0, 1777.1666666666667], [930.0, 2461.3333333333335], [929.0, 1112.0], [928.0, 1113.0], [932.0, 1110.3333333333333], [931.0, 1109.0], [933.0, 1376.1333333333334], [934.0, 2109.75], [952.0, 1074.3333333333333], [935.0, 1098.5], [954.0, 1073.4], [956.0, 1073.0], [955.0, 1073.0], [942.0, 1553.4444444444443], [941.0, 1094.4444444444443], [940.0, 1095.0], [939.0, 1095.5], [938.0, 1095.0], [936.0, 1097.0000000000002], [943.0, 1093.5], [946.0, 2482.5], [948.0, 1355.8000000000002], [947.0, 1087.8125000000002], [949.0, 1075.6666666666667], [951.0, 1075.3333333333333], [950.0, 1075.3333333333333], [958.0, 2483.0], [959.0, 1071.5714285714284], [945.0, 1093.3333333333333], [944.0, 1093.5], [984.0, 1909.8], [963.0, 1915.3999999999999], [965.0, 2477.0], [964.0, 1068.0], [967.0, 1064.5], [966.0, 1067.8235294117646], [968.0, 2129.75], [969.0, 1062.0], [971.0, 1057.333333333333], [970.0, 1061.3750000000002], [973.0, 1053.0], [972.0, 1053.0], [975.0, 1051.8], [960.0, 1069.2500000000002], [962.0, 1070.0], [961.0, 1067.3000000000002], [974.0, 1052.3333333333333], [979.0, 1527.2222222222224], [980.0, 5359.0], [981.0, 1047.7], [983.0, 3213.5], [982.0, 1048.2857142857142], [985.0, 1276.2631578947367], [987.0, 1048.2727272727273], [986.0, 1047.9166666666665], [988.0, 2121.0], [991.0, 2796.0], [976.0, 1051.2], [978.0, 1049.0], [977.0, 1050.375], [990.0, 1048.1666666666667], [989.0, 1048.6315789473686], [996.0, 1048.0], [993.0, 1486.2], [1000.0, 1613.831904031639], [999.0, 1048.5], [998.0, 1049.0], [997.0, 1049.8823529411766], [995.0, 1047.6153846153845], [994.0, 1049.1666666666665], [992.0, 1048.5], [1.0, 845.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[997.1248850000128, 1611.3331550000055]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 145.66666666666666, "minX": 1.66040742E12, "maxY": 207757.3, "series": [{"data": [[1.6604076E12, 29706.5], [1.66040742E12, 145.66666666666666], [1.66040778E12, 10267.6], [1.66040766E12, 26101.566666666666], [1.66040754E12, 31705.933333333334], [1.66040748E12, 5677.2], [1.66040772E12, 23062.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6604076E12, 194655.75], [1.66040742E12, 954.5], [1.66040778E12, 67279.8], [1.66040766E12, 171033.95], [1.66040754E12, 207757.3], [1.66040748E12, 37200.6], [1.66040772E12, 151118.1]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66040778E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1108.4686651862842, "minX": 1.66040742E12, "maxY": 6822.803547523425, "series": [{"data": [[1.6604076E12, 1280.5443129730306], [1.66040742E12, 5005.743478260869], [1.66040778E12, 1108.4686651862842], [1.66040766E12, 1422.2434911314463], [1.66040754E12, 1237.438596140781], [1.66040748E12, 6822.803547523425], [1.66040772E12, 1685.0030757400868]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66040778E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1108.4682950900626, "minX": 1.66040742E12, "maxY": 6822.80120481927, "series": [{"data": [[1.6604076E12, 1280.543971858009], [1.66040742E12, 5005.730434782611], [1.66040778E12, 1108.4682950900626], [1.66040766E12, 1422.24324848956], [1.66040754E12, 1237.4382365866363], [1.66040748E12, 6822.80120481927], [1.66040772E12, 1685.002251881129]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66040778E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0016257006284424857, "minX": 1.66040742E12, "maxY": 1.81304347826087, "series": [{"data": [[1.6604076E12, 0.003411150197207127], [1.66040742E12, 1.81304347826087], [1.66040778E12, 0.0077720207253885775], [1.66040766E12, 0.0016257006284424857], [1.66040754E12, 0.015440853341856058], [1.66040748E12, 0.10854529228023184], [1.66040772E12, 0.005190311418685106]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66040778E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 623.0, "minX": 1.66040742E12, "maxY": 9563.0, "series": [{"data": [[1.6604076E12, 3833.0], [1.66040742E12, 6543.0], [1.66040778E12, 1385.0], [1.66040766E12, 5161.0], [1.66040754E12, 6164.0], [1.66040748E12, 9563.0], [1.66040772E12, 6245.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6604076E12, 2219.800000000003], [1.66040742E12, 6239.9], [1.66040778E12, 1180.0], [1.66040766E12, 1376.0], [1.66040754E12, 1295.0], [1.66040748E12, 8641.5], [1.66040772E12, 1868.800000000003]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6604076E12, 3788.0], [1.66040742E12, 6523.42], [1.66040778E12, 1361.0], [1.66040766E12, 3612.0], [1.66040754E12, 1659.0], [1.66040748E12, 9365.7], [1.66040772E12, 3095.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6604076E12, 2792.0], [1.66040742E12, 6384.4], [1.66040778E12, 1207.0], [1.66040766E12, 3464.0], [1.66040754E12, 1374.8500000000022], [1.66040748E12, 8958.75], [1.66040772E12, 2228.9000000000015]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6604076E12, 1010.0], [1.66040742E12, 2649.0], [1.66040778E12, 623.0], [1.66040766E12, 1059.0], [1.66040754E12, 969.0], [1.66040748E12, 5021.0], [1.66040772E12, 1044.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6604076E12, 1143.0], [1.66040742E12, 5139.5], [1.66040778E12, 1099.0], [1.66040766E12, 1147.0], [1.66040754E12, 1102.0], [1.66040748E12, 6580.0], [1.66040772E12, 1116.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66040778E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1004.0, "minX": 9.0, "maxY": 9369.0, "series": [{"data": [[9.0, 2649.0], [17.0, 2658.0], [32.0, 3561.0], [41.0, 4367.0], [42.0, 6870.5], [45.0, 4415.5], [47.0, 4994.0], [48.0, 1220.0], [53.0, 9104.0], [55.0, 5679.0], [56.0, 7502.5], [59.0, 8141.0], [58.0, 5842.0], [63.0, 1479.0], [66.0, 6512.5], [67.0, 7184.0], [68.0, 6807.5], [70.0, 7236.5], [72.0, 8813.5], [73.0, 7505.0], [74.0, 5384.0], [78.0, 6163.5], [80.0, 6565.5], [84.0, 6725.5], [88.0, 5563.5], [89.0, 1698.0], [94.0, 1400.0], [92.0, 5540.5], [102.0, 5276.5], [110.0, 6369.5], [115.0, 7615.0], [112.0, 5439.0], [116.0, 5986.0], [118.0, 5680.0], [121.0, 7649.0], [124.0, 9369.0], [126.0, 2348.5], [134.0, 8639.0], [131.0, 6060.0], [137.0, 6588.0], [140.0, 5206.5], [143.0, 3069.0], [138.0, 5535.5], [150.0, 2546.0], [153.0, 6999.0], [155.0, 5126.0], [159.0, 6141.0], [157.0, 3918.0], [167.0, 8925.0], [162.0, 9162.0], [165.0, 6605.0], [164.0, 6204.0], [176.0, 6500.0], [187.0, 8729.0], [185.0, 3172.0], [190.0, 1148.0], [184.0, 5666.0], [205.0, 8342.0], [215.0, 8470.0], [211.0, 4702.5], [223.0, 7495.0], [221.0, 6332.0], [216.0, 3465.0], [230.0, 8033.5], [226.0, 5457.5], [233.0, 7604.0], [237.0, 6487.0], [239.0, 3120.5], [243.0, 6005.0], [255.0, 6132.0], [256.0, 6744.0], [266.0, 6633.0], [264.0, 5116.5], [269.0, 5325.0], [270.0, 5705.5], [274.0, 6139.0], [288.0, 6272.0], [298.0, 6277.0], [302.0, 6076.0], [301.0, 2395.0], [316.0, 5074.0], [314.0, 1319.0], [326.0, 1132.0], [321.0, 3723.0], [338.0, 2767.0], [363.0, 4477.0], [366.0, 4489.0], [365.0, 6127.0], [375.0, 1803.0], [378.0, 3599.0], [387.0, 1071.0], [400.0, 3427.5], [406.0, 1472.5], [403.0, 1571.0], [438.0, 5305.0], [456.0, 1891.0], [477.0, 1921.0], [524.0, 1127.0], [516.0, 1136.0], [572.0, 1541.0], [556.0, 1124.0], [569.0, 2944.0], [609.0, 1107.0], [623.0, 1285.0], [635.0, 1130.0], [632.0, 1320.0], [620.0, 1343.0], [616.0, 1635.5], [666.0, 1069.0], [657.0, 1137.0], [671.0, 1966.0], [641.0, 1515.0], [691.0, 1541.0], [672.0, 1446.0], [702.0, 1410.0], [734.0, 1150.0], [730.0, 1480.5], [728.0, 1909.0], [710.0, 1304.0], [708.0, 3073.0], [721.0, 1922.0], [727.0, 1252.0], [749.0, 1551.0], [753.0, 1250.0], [767.0, 3755.0], [737.0, 1272.0], [766.0, 1225.0], [760.0, 1102.0], [779.0, 1599.0], [777.0, 1652.0], [778.0, 1536.0], [784.0, 1081.0], [787.0, 1080.0], [792.0, 1317.0], [796.0, 1188.0], [807.0, 4445.0], [809.0, 1108.0], [826.0, 1116.0], [813.0, 1160.0], [830.0, 1449.0], [822.0, 2785.0], [819.0, 1132.0], [816.0, 1073.0], [812.0, 1191.0], [805.0, 1164.0], [858.0, 1538.5], [845.0, 1121.0], [848.0, 1122.0], [843.0, 1137.0], [842.0, 1113.0], [844.0, 1211.0], [853.0, 1141.0], [855.0, 1136.0], [856.0, 1122.0], [847.0, 1101.0], [846.0, 1140.0], [833.0, 1345.0], [863.0, 1126.0], [859.0, 1118.0], [852.0, 1112.0], [849.0, 1107.0], [890.0, 1061.0], [893.0, 1180.5], [882.0, 1196.0], [873.0, 1098.0], [874.0, 1156.0], [891.0, 1119.5], [892.0, 1844.0], [881.0, 1117.0], [880.0, 1088.0], [894.0, 1148.0], [887.0, 1106.0], [885.0, 1180.0], [884.0, 1099.0], [886.0, 1125.5], [871.0, 1114.0], [889.0, 1119.0], [879.0, 1089.0], [876.0, 1191.0], [878.0, 1244.5], [865.0, 1148.0], [864.0, 1113.0], [866.0, 1086.0], [868.0, 1132.0], [875.0, 1104.0], [927.0, 1144.0], [896.0, 1082.0], [906.0, 1072.0], [910.0, 1554.0], [907.0, 1091.0], [908.0, 1163.0], [916.0, 1114.0], [912.0, 1307.0], [904.0, 1103.0], [905.0, 1064.0], [926.0, 1115.0], [917.0, 1144.0], [925.0, 1110.0], [923.0, 1111.0], [922.0, 1102.0], [924.0, 1087.0], [900.0, 1129.0], [901.0, 1153.0], [921.0, 1167.0], [918.0, 1122.0], [919.0, 1121.0], [931.0, 1119.0], [929.0, 1117.0], [949.0, 1065.5], [948.0, 1080.0], [947.0, 1074.0], [957.0, 1084.0], [955.0, 1114.0], [953.0, 1089.0], [933.0, 1165.0], [943.0, 1101.0], [942.0, 1112.0], [941.0, 1136.0], [930.0, 1072.0], [944.0, 1114.0], [946.0, 1081.0], [945.0, 1066.0], [937.0, 1125.0], [939.0, 1116.0], [965.0, 1155.0], [975.0, 1059.0], [991.0, 1004.0], [973.0, 1090.0], [962.0, 1063.0], [964.0, 3575.0], [978.0, 1082.0], [976.0, 1071.0], [966.0, 1121.0], [989.0, 1098.0], [972.0, 1106.0], [1015.0, 1093.0], [996.0, 1151.0], [997.0, 1083.0], [1000.0, 1082.0], [998.0, 1132.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1015.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1004.0, "minX": 9.0, "maxY": 9369.0, "series": [{"data": [[9.0, 2648.5], [17.0, 2658.0], [32.0, 3561.0], [41.0, 4367.0], [42.0, 6870.5], [45.0, 4415.5], [47.0, 4994.0], [48.0, 1220.0], [53.0, 9104.0], [55.0, 5679.0], [56.0, 7502.5], [59.0, 8141.0], [58.0, 5842.0], [63.0, 1479.0], [66.0, 6512.5], [67.0, 7184.0], [68.0, 6807.5], [70.0, 7236.5], [72.0, 8813.5], [73.0, 7505.0], [74.0, 5384.0], [78.0, 6163.5], [80.0, 6565.5], [84.0, 6725.5], [88.0, 5563.5], [89.0, 1698.0], [94.0, 1400.0], [92.0, 5540.5], [102.0, 5276.5], [110.0, 6369.5], [115.0, 7615.0], [112.0, 5439.0], [116.0, 5986.0], [118.0, 5680.0], [121.0, 7649.0], [124.0, 9369.0], [126.0, 2348.5], [134.0, 8639.0], [131.0, 6060.0], [137.0, 6588.0], [140.0, 5206.5], [143.0, 3069.0], [138.0, 5535.5], [150.0, 2546.0], [153.0, 6999.0], [155.0, 5126.0], [159.0, 6141.0], [157.0, 3918.0], [167.0, 8925.0], [162.0, 9162.0], [165.0, 6605.0], [164.0, 6204.0], [176.0, 6500.0], [187.0, 8729.0], [185.0, 3172.0], [190.0, 1148.0], [184.0, 5666.0], [205.0, 8342.0], [215.0, 8470.0], [211.0, 4702.5], [223.0, 7495.0], [221.0, 6332.0], [216.0, 3465.0], [230.0, 8033.5], [226.0, 5457.5], [233.0, 7604.0], [237.0, 6487.0], [239.0, 3120.5], [243.0, 6005.0], [255.0, 6132.0], [256.0, 6744.0], [266.0, 6633.0], [264.0, 5116.5], [269.0, 5325.0], [270.0, 5705.5], [274.0, 6139.0], [288.0, 6272.0], [298.0, 6277.0], [302.0, 6076.0], [301.0, 2395.0], [316.0, 5074.0], [314.0, 1319.0], [326.0, 1132.0], [321.0, 3723.0], [338.0, 2767.0], [363.0, 4477.0], [366.0, 4489.0], [365.0, 6127.0], [375.0, 1803.0], [378.0, 3599.0], [387.0, 1071.0], [400.0, 3427.5], [406.0, 1472.5], [403.0, 1571.0], [438.0, 5305.0], [456.0, 1891.0], [477.0, 1921.0], [524.0, 1127.0], [516.0, 1136.0], [572.0, 1541.0], [556.0, 1124.0], [569.0, 2944.0], [609.0, 1107.0], [623.0, 1285.0], [635.0, 1130.0], [632.0, 1320.0], [620.0, 1343.0], [616.0, 1635.5], [666.0, 1069.0], [657.0, 1137.0], [671.0, 1966.0], [641.0, 1515.0], [691.0, 1541.0], [672.0, 1446.0], [702.0, 1410.0], [734.0, 1150.0], [730.0, 1480.5], [728.0, 1909.0], [710.0, 1304.0], [708.0, 3073.0], [721.0, 1922.0], [727.0, 1252.0], [749.0, 1551.0], [753.0, 1250.0], [767.0, 3755.0], [737.0, 1272.0], [766.0, 1225.0], [760.0, 1102.0], [779.0, 1599.0], [777.0, 1652.0], [778.0, 1536.0], [784.0, 1081.0], [787.0, 1080.0], [792.0, 1317.0], [796.0, 1188.0], [807.0, 4445.0], [809.0, 1108.0], [826.0, 1116.0], [813.0, 1160.0], [830.0, 1449.0], [822.0, 2785.0], [819.0, 1132.0], [816.0, 1073.0], [812.0, 1191.0], [805.0, 1164.0], [858.0, 1538.5], [845.0, 1121.0], [848.0, 1122.0], [843.0, 1137.0], [842.0, 1113.0], [844.0, 1211.0], [853.0, 1141.0], [855.0, 1136.0], [856.0, 1122.0], [847.0, 1101.0], [846.0, 1140.0], [833.0, 1345.0], [863.0, 1126.0], [859.0, 1118.0], [852.0, 1112.0], [849.0, 1107.0], [890.0, 1061.0], [893.0, 1180.5], [882.0, 1196.0], [873.0, 1098.0], [874.0, 1156.0], [891.0, 1119.5], [892.0, 1844.0], [881.0, 1117.0], [880.0, 1088.0], [894.0, 1148.0], [887.0, 1106.0], [885.0, 1180.0], [884.0, 1099.0], [886.0, 1125.5], [871.0, 1114.0], [889.0, 1119.0], [879.0, 1089.0], [876.0, 1191.0], [878.0, 1244.5], [865.0, 1148.0], [864.0, 1113.0], [866.0, 1086.0], [868.0, 1132.0], [875.0, 1104.0], [927.0, 1144.0], [896.0, 1082.0], [906.0, 1072.0], [910.0, 1554.0], [907.0, 1091.0], [908.0, 1163.0], [916.0, 1114.0], [912.0, 1307.0], [904.0, 1103.0], [905.0, 1064.0], [926.0, 1115.0], [917.0, 1144.0], [925.0, 1110.0], [923.0, 1111.0], [922.0, 1102.0], [924.0, 1087.0], [900.0, 1129.0], [901.0, 1153.0], [921.0, 1167.0], [918.0, 1122.0], [919.0, 1121.0], [931.0, 1119.0], [929.0, 1117.0], [949.0, 1065.5], [948.0, 1080.0], [947.0, 1074.0], [957.0, 1084.0], [955.0, 1114.0], [953.0, 1089.0], [933.0, 1165.0], [943.0, 1101.0], [942.0, 1112.0], [941.0, 1136.0], [930.0, 1072.0], [944.0, 1114.0], [946.0, 1081.0], [945.0, 1066.0], [937.0, 1125.0], [939.0, 1116.0], [965.0, 1155.0], [975.0, 1059.0], [991.0, 1004.0], [973.0, 1090.0], [962.0, 1063.0], [964.0, 3575.0], [978.0, 1082.0], [976.0, 1071.0], [966.0, 1121.0], [989.0, 1098.0], [972.0, 1106.0], [1015.0, 1093.0], [996.0, 1151.0], [997.0, 1083.0], [1000.0, 1082.0], [998.0, 1132.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1015.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 20.5, "minX": 1.66040742E12, "maxY": 834.3666666666667, "series": [{"data": [[1.6604076E12, 781.75], [1.66040742E12, 20.5], [1.66040778E12, 253.53333333333333], [1.66040766E12, 686.8833333333333], [1.66040754E12, 834.3666666666667], [1.66040748E12, 149.4], [1.66040772E12, 606.9]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66040778E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.8333333333333335, "minX": 1.66040742E12, "maxY": 834.3666666666667, "series": [{"data": [[1.6604076E12, 781.75], [1.66040742E12, 3.8333333333333335], [1.66040778E12, 270.2], [1.66040766E12, 686.8833333333333], [1.66040754E12, 834.3666666666667], [1.66040748E12, 149.4], [1.66040772E12, 606.9]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66040778E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.8333333333333335, "minX": 1.66040742E12, "maxY": 834.3666666666667, "series": [{"data": [[1.6604076E12, 781.75], [1.66040742E12, 3.8333333333333335], [1.66040778E12, 270.2], [1.66040766E12, 686.8833333333333], [1.66040754E12, 834.3666666666667], [1.66040748E12, 149.4], [1.66040772E12, 606.9]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66040778E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.8333333333333335, "minX": 1.66040742E12, "maxY": 834.3666666666667, "series": [{"data": [[1.6604076E12, 781.75], [1.66040742E12, 3.8333333333333335], [1.66040778E12, 270.2], [1.66040766E12, 686.8833333333333], [1.66040754E12, 834.3666666666667], [1.66040748E12, 149.4], [1.66040772E12, 606.9]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66040778E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

