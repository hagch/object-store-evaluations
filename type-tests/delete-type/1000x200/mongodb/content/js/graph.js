/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 180.0, "minX": 0.0, "maxY": 7809.0, "series": [{"data": [[0.0, 180.0], [0.1, 474.0], [0.2, 714.0], [0.3, 785.0], [0.4, 819.0], [0.5, 862.0], [0.6, 897.0], [0.7, 941.0], [0.8, 1020.0], [0.9, 1033.0], [1.0, 1040.0], [1.1, 1046.0], [1.2, 1051.0], [1.3, 1054.0], [1.4, 1058.0], [1.5, 1062.0], [1.6, 1067.0], [1.7, 1070.0], [1.8, 1074.0], [1.9, 1077.0], [2.0, 1081.0], [2.1, 1084.0], [2.2, 1087.0], [2.3, 1090.0], [2.4, 1093.0], [2.5, 1096.0], [2.6, 1100.0], [2.7, 1103.0], [2.8, 1106.0], [2.9, 1109.0], [3.0, 1112.0], [3.1, 1115.0], [3.2, 1118.0], [3.3, 1122.0], [3.4, 1126.0], [3.5, 1131.0], [3.6, 1136.0], [3.7, 1141.0], [3.8, 1146.0], [3.9, 1153.0], [4.0, 1158.0], [4.1, 1163.0], [4.2, 1166.0], [4.3, 1169.0], [4.4, 1172.0], [4.5, 1175.0], [4.6, 1178.0], [4.7, 1180.0], [4.8, 1183.0], [4.9, 1186.0], [5.0, 1188.0], [5.1, 1191.0], [5.2, 1194.0], [5.3, 1197.0], [5.4, 1199.0], [5.5, 1201.0], [5.6, 1203.0], [5.7, 1206.0], [5.8, 1208.0], [5.9, 1210.0], [6.0, 1212.0], [6.1, 1213.0], [6.2, 1215.0], [6.3, 1217.0], [6.4, 1219.0], [6.5, 1221.0], [6.6, 1223.0], [6.7, 1224.0], [6.8, 1226.0], [6.9, 1228.0], [7.0, 1230.0], [7.1, 1231.0], [7.2, 1233.0], [7.3, 1235.0], [7.4, 1236.0], [7.5, 1238.0], [7.6, 1240.0], [7.7, 1242.0], [7.8, 1243.0], [7.9, 1245.0], [8.0, 1247.0], [8.1, 1249.0], [8.2, 1251.0], [8.3, 1252.0], [8.4, 1254.0], [8.5, 1256.0], [8.6, 1257.0], [8.7, 1259.0], [8.8, 1261.0], [8.9, 1262.0], [9.0, 1264.0], [9.1, 1265.0], [9.2, 1267.0], [9.3, 1268.0], [9.4, 1270.0], [9.5, 1271.0], [9.6, 1273.0], [9.7, 1274.0], [9.8, 1276.0], [9.9, 1277.0], [10.0, 1279.0], [10.1, 1281.0], [10.2, 1282.0], [10.3, 1284.0], [10.4, 1286.0], [10.5, 1288.0], [10.6, 1290.0], [10.7, 1291.0], [10.8, 1293.0], [10.9, 1295.0], [11.0, 1297.0], [11.1, 1299.0], [11.2, 1300.0], [11.3, 1302.0], [11.4, 1304.0], [11.5, 1305.0], [11.6, 1307.0], [11.7, 1309.0], [11.8, 1310.0], [11.9, 1312.0], [12.0, 1313.0], [12.1, 1315.0], [12.2, 1316.0], [12.3, 1317.0], [12.4, 1319.0], [12.5, 1320.0], [12.6, 1322.0], [12.7, 1323.0], [12.8, 1325.0], [12.9, 1327.0], [13.0, 1328.0], [13.1, 1330.0], [13.2, 1332.0], [13.3, 1334.0], [13.4, 1335.0], [13.5, 1337.0], [13.6, 1339.0], [13.7, 1341.0], [13.8, 1343.0], [13.9, 1344.0], [14.0, 1346.0], [14.1, 1348.0], [14.2, 1350.0], [14.3, 1352.0], [14.4, 1354.0], [14.5, 1356.0], [14.6, 1359.0], [14.7, 1361.0], [14.8, 1363.0], [14.9, 1365.0], [15.0, 1367.0], [15.1, 1368.0], [15.2, 1370.0], [15.3, 1372.0], [15.4, 1374.0], [15.5, 1375.0], [15.6, 1377.0], [15.7, 1379.0], [15.8, 1381.0], [15.9, 1383.0], [16.0, 1384.0], [16.1, 1386.0], [16.2, 1388.0], [16.3, 1390.0], [16.4, 1391.0], [16.5, 1393.0], [16.6, 1395.0], [16.7, 1396.0], [16.8, 1398.0], [16.9, 1400.0], [17.0, 1402.0], [17.1, 1404.0], [17.2, 1405.0], [17.3, 1407.0], [17.4, 1409.0], [17.5, 1410.0], [17.6, 1412.0], [17.7, 1414.0], [17.8, 1416.0], [17.9, 1418.0], [18.0, 1421.0], [18.1, 1424.0], [18.2, 1427.0], [18.3, 1429.0], [18.4, 1432.0], [18.5, 1434.0], [18.6, 1436.0], [18.7, 1438.0], [18.8, 1440.0], [18.9, 1443.0], [19.0, 1445.0], [19.1, 1447.0], [19.2, 1449.0], [19.3, 1451.0], [19.4, 1454.0], [19.5, 1455.0], [19.6, 1457.0], [19.7, 1459.0], [19.8, 1461.0], [19.9, 1464.0], [20.0, 1466.0], [20.1, 1468.0], [20.2, 1471.0], [20.3, 1473.0], [20.4, 1476.0], [20.5, 1478.0], [20.6, 1480.0], [20.7, 1483.0], [20.8, 1487.0], [20.9, 1490.0], [21.0, 1493.0], [21.1, 1495.0], [21.2, 1498.0], [21.3, 1501.0], [21.4, 1504.0], [21.5, 1507.0], [21.6, 1510.0], [21.7, 1512.0], [21.8, 1515.0], [21.9, 1517.0], [22.0, 1519.0], [22.1, 1521.0], [22.2, 1523.0], [22.3, 1525.0], [22.4, 1527.0], [22.5, 1529.0], [22.6, 1531.0], [22.7, 1533.0], [22.8, 1534.0], [22.9, 1536.0], [23.0, 1537.0], [23.1, 1538.0], [23.2, 1540.0], [23.3, 1541.0], [23.4, 1542.0], [23.5, 1543.0], [23.6, 1545.0], [23.7, 1546.0], [23.8, 1547.0], [23.9, 1548.0], [24.0, 1550.0], [24.1, 1551.0], [24.2, 1552.0], [24.3, 1553.0], [24.4, 1555.0], [24.5, 1556.0], [24.6, 1557.0], [24.7, 1558.0], [24.8, 1559.0], [24.9, 1560.0], [25.0, 1561.0], [25.1, 1562.0], [25.2, 1563.0], [25.3, 1565.0], [25.4, 1566.0], [25.5, 1567.0], [25.6, 1568.0], [25.7, 1569.0], [25.8, 1571.0], [25.9, 1572.0], [26.0, 1573.0], [26.1, 1574.0], [26.2, 1575.0], [26.3, 1576.0], [26.4, 1578.0], [26.5, 1579.0], [26.6, 1580.0], [26.7, 1581.0], [26.8, 1582.0], [26.9, 1584.0], [27.0, 1585.0], [27.1, 1586.0], [27.2, 1587.0], [27.3, 1589.0], [27.4, 1590.0], [27.5, 1591.0], [27.6, 1592.0], [27.7, 1594.0], [27.8, 1595.0], [27.9, 1596.0], [28.0, 1597.0], [28.1, 1598.0], [28.2, 1599.0], [28.3, 1600.0], [28.4, 1601.0], [28.5, 1602.0], [28.6, 1603.0], [28.7, 1604.0], [28.8, 1605.0], [28.9, 1606.0], [29.0, 1607.0], [29.1, 1609.0], [29.2, 1610.0], [29.3, 1611.0], [29.4, 1612.0], [29.5, 1613.0], [29.6, 1615.0], [29.7, 1616.0], [29.8, 1617.0], [29.9, 1618.0], [30.0, 1620.0], [30.1, 1621.0], [30.2, 1622.0], [30.3, 1623.0], [30.4, 1625.0], [30.5, 1626.0], [30.6, 1627.0], [30.7, 1628.0], [30.8, 1629.0], [30.9, 1631.0], [31.0, 1632.0], [31.1, 1633.0], [31.2, 1635.0], [31.3, 1636.0], [31.4, 1638.0], [31.5, 1639.0], [31.6, 1640.0], [31.7, 1642.0], [31.8, 1643.0], [31.9, 1644.0], [32.0, 1646.0], [32.1, 1647.0], [32.2, 1648.0], [32.3, 1650.0], [32.4, 1651.0], [32.5, 1653.0], [32.6, 1654.0], [32.7, 1655.0], [32.8, 1657.0], [32.9, 1658.0], [33.0, 1659.0], [33.1, 1660.0], [33.2, 1662.0], [33.3, 1663.0], [33.4, 1664.0], [33.5, 1665.0], [33.6, 1666.0], [33.7, 1667.0], [33.8, 1668.0], [33.9, 1669.0], [34.0, 1670.0], [34.1, 1671.0], [34.2, 1672.0], [34.3, 1673.0], [34.4, 1674.0], [34.5, 1675.0], [34.6, 1676.0], [34.7, 1677.0], [34.8, 1678.0], [34.9, 1679.0], [35.0, 1680.0], [35.1, 1681.0], [35.2, 1682.0], [35.3, 1683.0], [35.4, 1684.0], [35.5, 1685.0], [35.6, 1686.0], [35.7, 1687.0], [35.8, 1687.0], [35.9, 1688.0], [36.0, 1689.0], [36.1, 1690.0], [36.2, 1691.0], [36.3, 1692.0], [36.4, 1692.0], [36.5, 1693.0], [36.6, 1694.0], [36.7, 1695.0], [36.8, 1695.0], [36.9, 1696.0], [37.0, 1697.0], [37.1, 1698.0], [37.2, 1699.0], [37.3, 1699.0], [37.4, 1700.0], [37.5, 1701.0], [37.6, 1702.0], [37.7, 1703.0], [37.8, 1703.0], [37.9, 1704.0], [38.0, 1705.0], [38.1, 1706.0], [38.2, 1707.0], [38.3, 1707.0], [38.4, 1708.0], [38.5, 1709.0], [38.6, 1710.0], [38.7, 1711.0], [38.8, 1712.0], [38.9, 1712.0], [39.0, 1713.0], [39.1, 1714.0], [39.2, 1715.0], [39.3, 1716.0], [39.4, 1716.0], [39.5, 1717.0], [39.6, 1718.0], [39.7, 1719.0], [39.8, 1720.0], [39.9, 1721.0], [40.0, 1722.0], [40.1, 1722.0], [40.2, 1723.0], [40.3, 1724.0], [40.4, 1725.0], [40.5, 1726.0], [40.6, 1727.0], [40.7, 1727.0], [40.8, 1728.0], [40.9, 1729.0], [41.0, 1730.0], [41.1, 1730.0], [41.2, 1731.0], [41.3, 1732.0], [41.4, 1733.0], [41.5, 1734.0], [41.6, 1735.0], [41.7, 1736.0], [41.8, 1737.0], [41.9, 1738.0], [42.0, 1739.0], [42.1, 1740.0], [42.2, 1741.0], [42.3, 1742.0], [42.4, 1743.0], [42.5, 1744.0], [42.6, 1745.0], [42.7, 1746.0], [42.8, 1747.0], [42.9, 1749.0], [43.0, 1750.0], [43.1, 1752.0], [43.2, 1753.0], [43.3, 1754.0], [43.4, 1756.0], [43.5, 1757.0], [43.6, 1759.0], [43.7, 1760.0], [43.8, 1762.0], [43.9, 1763.0], [44.0, 1765.0], [44.1, 1766.0], [44.2, 1768.0], [44.3, 1770.0], [44.4, 1771.0], [44.5, 1773.0], [44.6, 1775.0], [44.7, 1776.0], [44.8, 1778.0], [44.9, 1780.0], [45.0, 1782.0], [45.1, 1784.0], [45.2, 1785.0], [45.3, 1787.0], [45.4, 1789.0], [45.5, 1791.0], [45.6, 1793.0], [45.7, 1795.0], [45.8, 1797.0], [45.9, 1799.0], [46.0, 1801.0], [46.1, 1804.0], [46.2, 1806.0], [46.3, 1808.0], [46.4, 1810.0], [46.5, 1812.0], [46.6, 1814.0], [46.7, 1816.0], [46.8, 1818.0], [46.9, 1819.0], [47.0, 1821.0], [47.1, 1823.0], [47.2, 1824.0], [47.3, 1826.0], [47.4, 1827.0], [47.5, 1829.0], [47.6, 1831.0], [47.7, 1833.0], [47.8, 1834.0], [47.9, 1835.0], [48.0, 1837.0], [48.1, 1838.0], [48.2, 1840.0], [48.3, 1841.0], [48.4, 1842.0], [48.5, 1844.0], [48.6, 1845.0], [48.7, 1846.0], [48.8, 1847.0], [48.9, 1849.0], [49.0, 1850.0], [49.1, 1852.0], [49.2, 1853.0], [49.3, 1855.0], [49.4, 1856.0], [49.5, 1858.0], [49.6, 1859.0], [49.7, 1860.0], [49.8, 1862.0], [49.9, 1864.0], [50.0, 1865.0], [50.1, 1867.0], [50.2, 1869.0], [50.3, 1871.0], [50.4, 1874.0], [50.5, 1876.0], [50.6, 1878.0], [50.7, 1879.0], [50.8, 1882.0], [50.9, 1884.0], [51.0, 1886.0], [51.1, 1888.0], [51.2, 1890.0], [51.3, 1892.0], [51.4, 1894.0], [51.5, 1897.0], [51.6, 1900.0], [51.7, 1903.0], [51.8, 1907.0], [51.9, 1910.0], [52.0, 1914.0], [52.1, 1917.0], [52.2, 1920.0], [52.3, 1923.0], [52.4, 1925.0], [52.5, 1928.0], [52.6, 1930.0], [52.7, 1932.0], [52.8, 1934.0], [52.9, 1936.0], [53.0, 1938.0], [53.1, 1940.0], [53.2, 1942.0], [53.3, 1943.0], [53.4, 1945.0], [53.5, 1947.0], [53.6, 1948.0], [53.7, 1949.0], [53.8, 1951.0], [53.9, 1953.0], [54.0, 1954.0], [54.1, 1956.0], [54.2, 1957.0], [54.3, 1958.0], [54.4, 1960.0], [54.5, 1961.0], [54.6, 1962.0], [54.7, 1963.0], [54.8, 1964.0], [54.9, 1966.0], [55.0, 1967.0], [55.1, 1968.0], [55.2, 1969.0], [55.3, 1970.0], [55.4, 1971.0], [55.5, 1972.0], [55.6, 1973.0], [55.7, 1974.0], [55.8, 1975.0], [55.9, 1975.0], [56.0, 1976.0], [56.1, 1977.0], [56.2, 1978.0], [56.3, 1979.0], [56.4, 1980.0], [56.5, 1981.0], [56.6, 1981.0], [56.7, 1982.0], [56.8, 1983.0], [56.9, 1984.0], [57.0, 1985.0], [57.1, 1986.0], [57.2, 1986.0], [57.3, 1987.0], [57.4, 1988.0], [57.5, 1989.0], [57.6, 1990.0], [57.7, 1990.0], [57.8, 1991.0], [57.9, 1992.0], [58.0, 1992.0], [58.1, 1993.0], [58.2, 1994.0], [58.3, 1995.0], [58.4, 1995.0], [58.5, 1996.0], [58.6, 1997.0], [58.7, 1998.0], [58.8, 1998.0], [58.9, 1999.0], [59.0, 2000.0], [59.1, 2000.0], [59.2, 2001.0], [59.3, 2002.0], [59.4, 2003.0], [59.5, 2003.0], [59.6, 2004.0], [59.7, 2004.0], [59.8, 2005.0], [59.9, 2006.0], [60.0, 2007.0], [60.1, 2007.0], [60.2, 2008.0], [60.3, 2009.0], [60.4, 2009.0], [60.5, 2010.0], [60.6, 2011.0], [60.7, 2011.0], [60.8, 2012.0], [60.9, 2013.0], [61.0, 2013.0], [61.1, 2014.0], [61.2, 2015.0], [61.3, 2016.0], [61.4, 2016.0], [61.5, 2017.0], [61.6, 2018.0], [61.7, 2019.0], [61.8, 2019.0], [61.9, 2020.0], [62.0, 2021.0], [62.1, 2021.0], [62.2, 2022.0], [62.3, 2023.0], [62.4, 2024.0], [62.5, 2025.0], [62.6, 2026.0], [62.7, 2027.0], [62.8, 2027.0], [62.9, 2028.0], [63.0, 2029.0], [63.1, 2031.0], [63.2, 2032.0], [63.3, 2033.0], [63.4, 2034.0], [63.5, 2035.0], [63.6, 2036.0], [63.7, 2038.0], [63.8, 2039.0], [63.9, 2040.0], [64.0, 2042.0], [64.1, 2044.0], [64.2, 2046.0], [64.3, 2047.0], [64.4, 2049.0], [64.5, 2050.0], [64.6, 2052.0], [64.7, 2054.0], [64.8, 2056.0], [64.9, 2058.0], [65.0, 2061.0], [65.1, 2063.0], [65.2, 2065.0], [65.3, 2067.0], [65.4, 2069.0], [65.5, 2071.0], [65.6, 2074.0], [65.7, 2076.0], [65.8, 2079.0], [65.9, 2082.0], [66.0, 2084.0], [66.1, 2087.0], [66.2, 2089.0], [66.3, 2091.0], [66.4, 2094.0], [66.5, 2096.0], [66.6, 2099.0], [66.7, 2101.0], [66.8, 2103.0], [66.9, 2105.0], [67.0, 2107.0], [67.1, 2110.0], [67.2, 2112.0], [67.3, 2114.0], [67.4, 2117.0], [67.5, 2119.0], [67.6, 2121.0], [67.7, 2123.0], [67.8, 2126.0], [67.9, 2128.0], [68.0, 2130.0], [68.1, 2132.0], [68.2, 2134.0], [68.3, 2136.0], [68.4, 2138.0], [68.5, 2140.0], [68.6, 2142.0], [68.7, 2144.0], [68.8, 2146.0], [68.9, 2148.0], [69.0, 2150.0], [69.1, 2152.0], [69.2, 2155.0], [69.3, 2156.0], [69.4, 2158.0], [69.5, 2160.0], [69.6, 2162.0], [69.7, 2164.0], [69.8, 2166.0], [69.9, 2168.0], [70.0, 2170.0], [70.1, 2172.0], [70.2, 2174.0], [70.3, 2177.0], [70.4, 2179.0], [70.5, 2182.0], [70.6, 2184.0], [70.7, 2187.0], [70.8, 2190.0], [70.9, 2193.0], [71.0, 2196.0], [71.1, 2199.0], [71.2, 2202.0], [71.3, 2206.0], [71.4, 2210.0], [71.5, 2214.0], [71.6, 2218.0], [71.7, 2221.0], [71.8, 2225.0], [71.9, 2229.0], [72.0, 2232.0], [72.1, 2235.0], [72.2, 2237.0], [72.3, 2240.0], [72.4, 2243.0], [72.5, 2246.0], [72.6, 2249.0], [72.7, 2252.0], [72.8, 2255.0], [72.9, 2258.0], [73.0, 2261.0], [73.1, 2264.0], [73.2, 2267.0], [73.3, 2270.0], [73.4, 2273.0], [73.5, 2276.0], [73.6, 2279.0], [73.7, 2281.0], [73.8, 2284.0], [73.9, 2287.0], [74.0, 2289.0], [74.1, 2292.0], [74.2, 2295.0], [74.3, 2297.0], [74.4, 2300.0], [74.5, 2303.0], [74.6, 2305.0], [74.7, 2307.0], [74.8, 2310.0], [74.9, 2312.0], [75.0, 2314.0], [75.1, 2316.0], [75.2, 2319.0], [75.3, 2321.0], [75.4, 2323.0], [75.5, 2325.0], [75.6, 2327.0], [75.7, 2330.0], [75.8, 2332.0], [75.9, 2334.0], [76.0, 2336.0], [76.1, 2337.0], [76.2, 2339.0], [76.3, 2341.0], [76.4, 2343.0], [76.5, 2344.0], [76.6, 2346.0], [76.7, 2347.0], [76.8, 2349.0], [76.9, 2350.0], [77.0, 2352.0], [77.1, 2354.0], [77.2, 2355.0], [77.3, 2357.0], [77.4, 2358.0], [77.5, 2360.0], [77.6, 2362.0], [77.7, 2363.0], [77.8, 2365.0], [77.9, 2367.0], [78.0, 2368.0], [78.1, 2370.0], [78.2, 2371.0], [78.3, 2373.0], [78.4, 2374.0], [78.5, 2375.0], [78.6, 2377.0], [78.7, 2379.0], [78.8, 2380.0], [78.9, 2381.0], [79.0, 2382.0], [79.1, 2384.0], [79.2, 2385.0], [79.3, 2387.0], [79.4, 2388.0], [79.5, 2389.0], [79.6, 2391.0], [79.7, 2392.0], [79.8, 2394.0], [79.9, 2395.0], [80.0, 2397.0], [80.1, 2399.0], [80.2, 2401.0], [80.3, 2403.0], [80.4, 2405.0], [80.5, 2408.0], [80.6, 2410.0], [80.7, 2414.0], [80.8, 2417.0], [80.9, 2421.0], [81.0, 2426.0], [81.1, 2430.0], [81.2, 2434.0], [81.3, 2437.0], [81.4, 2440.0], [81.5, 2443.0], [81.6, 2446.0], [81.7, 2449.0], [81.8, 2452.0], [81.9, 2454.0], [82.0, 2457.0], [82.1, 2459.0], [82.2, 2462.0], [82.3, 2464.0], [82.4, 2467.0], [82.5, 2469.0], [82.6, 2471.0], [82.7, 2473.0], [82.8, 2475.0], [82.9, 2477.0], [83.0, 2480.0], [83.1, 2482.0], [83.2, 2485.0], [83.3, 2488.0], [83.4, 2490.0], [83.5, 2493.0], [83.6, 2496.0], [83.7, 2499.0], [83.8, 2503.0], [83.9, 2506.0], [84.0, 2509.0], [84.1, 2513.0], [84.2, 2516.0], [84.3, 2520.0], [84.4, 2524.0], [84.5, 2529.0], [84.6, 2532.0], [84.7, 2536.0], [84.8, 2539.0], [84.9, 2541.0], [85.0, 2544.0], [85.1, 2547.0], [85.2, 2549.0], [85.3, 2552.0], [85.4, 2554.0], [85.5, 2556.0], [85.6, 2557.0], [85.7, 2559.0], [85.8, 2560.0], [85.9, 2562.0], [86.0, 2563.0], [86.1, 2565.0], [86.2, 2566.0], [86.3, 2568.0], [86.4, 2569.0], [86.5, 2571.0], [86.6, 2572.0], [86.7, 2574.0], [86.8, 2575.0], [86.9, 2576.0], [87.0, 2578.0], [87.1, 2579.0], [87.2, 2581.0], [87.3, 2583.0], [87.4, 2584.0], [87.5, 2586.0], [87.6, 2588.0], [87.7, 2589.0], [87.8, 2591.0], [87.9, 2593.0], [88.0, 2595.0], [88.1, 2596.0], [88.2, 2598.0], [88.3, 2600.0], [88.4, 2602.0], [88.5, 2604.0], [88.6, 2607.0], [88.7, 2610.0], [88.8, 2612.0], [88.9, 2615.0], [89.0, 2617.0], [89.1, 2620.0], [89.2, 2623.0], [89.3, 2626.0], [89.4, 2630.0], [89.5, 2633.0], [89.6, 2637.0], [89.7, 2642.0], [89.8, 2647.0], [89.9, 2651.0], [90.0, 2655.0], [90.1, 2660.0], [90.2, 2664.0], [90.3, 2668.0], [90.4, 2670.0], [90.5, 2673.0], [90.6, 2676.0], [90.7, 2678.0], [90.8, 2681.0], [90.9, 2683.0], [91.0, 2685.0], [91.1, 2688.0], [91.2, 2690.0], [91.3, 2692.0], [91.4, 2694.0], [91.5, 2696.0], [91.6, 2698.0], [91.7, 2699.0], [91.8, 2701.0], [91.9, 2704.0], [92.0, 2706.0], [92.1, 2708.0], [92.2, 2710.0], [92.3, 2712.0], [92.4, 2715.0], [92.5, 2717.0], [92.6, 2720.0], [92.7, 2723.0], [92.8, 2726.0], [92.9, 2730.0], [93.0, 2734.0], [93.1, 2739.0], [93.2, 2743.0], [93.3, 2747.0], [93.4, 2751.0], [93.5, 2755.0], [93.6, 2759.0], [93.7, 2764.0], [93.8, 2768.0], [93.9, 2772.0], [94.0, 2776.0], [94.1, 2780.0], [94.2, 2783.0], [94.3, 2788.0], [94.4, 2792.0], [94.5, 2796.0], [94.6, 2800.0], [94.7, 2805.0], [94.8, 2809.0], [94.9, 2813.0], [95.0, 2818.0], [95.1, 2823.0], [95.2, 2828.0], [95.3, 2833.0], [95.4, 2838.0], [95.5, 2844.0], [95.6, 2848.0], [95.7, 2853.0], [95.8, 2859.0], [95.9, 2865.0], [96.0, 2871.0], [96.1, 2879.0], [96.2, 2887.0], [96.3, 2894.0], [96.4, 2902.0], [96.5, 2909.0], [96.6, 2915.0], [96.7, 2922.0], [96.8, 2927.0], [96.9, 2931.0], [97.0, 2936.0], [97.1, 2943.0], [97.2, 2950.0], [97.3, 2958.0], [97.4, 2967.0], [97.5, 2984.0], [97.6, 3003.0], [97.7, 3027.0], [97.8, 3103.0], [97.9, 3182.0], [98.0, 3195.0], [98.1, 3209.0], [98.2, 3241.0], [98.3, 3317.0], [98.4, 3354.0], [98.5, 4265.0], [98.6, 4659.0], [98.7, 5204.0], [98.8, 5455.0], [98.9, 5694.0], [99.0, 6081.0], [99.1, 6217.0], [99.2, 6283.0], [99.3, 6329.0], [99.4, 6375.0], [99.5, 6491.0], [99.6, 6903.0], [99.7, 7106.0], [99.8, 7289.0], [99.9, 7524.0], [100.0, 7809.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 18168.0, "series": [{"data": [[600.0, 55.0], [700.0, 277.0], [800.0, 551.0], [900.0, 329.0], [1000.0, 3633.0], [1100.0, 5681.0], [1200.0, 11431.0], [1300.0, 11458.0], [1400.0, 8741.0], [1500.0, 13980.0], [1600.0, 18168.0], [1700.0, 17195.0], [1800.0, 11315.0], [1900.0, 14803.0], [2000.0, 15333.0], [2100.0, 8979.0], [2200.0, 6501.0], [2300.0, 11495.0], [2400.0, 7150.0], [2500.0, 9123.0], [2600.0, 6885.0], [2700.0, 5754.0], [2800.0, 3571.0], [2900.0, 2426.0], [3000.0, 424.0], [3100.0, 477.0], [3200.0, 492.0], [3300.0, 299.0], [3400.0, 13.0], [3500.0, 2.0], [3900.0, 11.0], [4000.0, 49.0], [4200.0, 54.0], [4300.0, 133.0], [4100.0, 40.0], [4400.0, 7.0], [4600.0, 24.0], [4500.0, 17.0], [4800.0, 23.0], [4700.0, 67.0], [5100.0, 14.0], [5000.0, 29.0], [4900.0, 52.0], [5200.0, 78.0], [5300.0, 83.0], [5400.0, 70.0], [5500.0, 112.0], [5600.0, 72.0], [5700.0, 90.0], [5800.0, 19.0], [5900.0, 41.0], [6000.0, 57.0], [6100.0, 131.0], [6200.0, 323.0], [6300.0, 382.0], [6400.0, 169.0], [6500.0, 123.0], [6600.0, 30.0], [6800.0, 15.0], [6900.0, 117.0], [6700.0, 5.0], [7000.0, 83.0], [7100.0, 160.0], [7200.0, 53.0], [7300.0, 79.0], [7400.0, 78.0], [7500.0, 144.0], [7600.0, 77.0], [7700.0, 15.0], [7800.0, 1.0], [100.0, 1.0], [200.0, 29.0], [300.0, 31.0], [400.0, 221.0], [500.0, 50.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 284.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 157437.0, "series": [{"data": [[0.0, 284.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 42279.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 157437.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 810.5575679172063, "minX": 1.6618986E12, "maxY": 1000.0, "series": [{"data": [[1.66189878E12, 1000.0], [1.6618986E12, 965.6712656364982], [1.6618989E12, 1000.0], [1.66189872E12, 1000.0], [1.66189902E12, 810.5575679172063], [1.66189884E12, 1000.0], [1.66189866E12, 1000.0], [1.66189896E12, 1000.0]], "isOverall": false, "label": "Thread Group Create Type", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66189902E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 228.5, "minX": 2.0, "maxY": 1994.48370289779, "series": [{"data": [[2.0, 718.0], [4.0, 608.0], [8.0, 627.0], [9.0, 671.0], [10.0, 684.0], [11.0, 674.0], [14.0, 725.0], [15.0, 696.0], [16.0, 728.0], [20.0, 676.8333333333334], [21.0, 725.0], [22.0, 727.0], [23.0, 726.0], [25.0, 766.0], [26.0, 755.0], [28.0, 775.0], [30.0, 783.0], [33.0, 757.0], [35.0, 819.0], [36.0, 742.6666666666666], [39.0, 813.0], [38.0, 739.5], [43.0, 738.5], [42.0, 756.0], [47.0, 789.0], [46.0, 756.6666666666666], [49.0, 792.0], [48.0, 785.0], [50.0, 781.0], [53.0, 790.0], [52.0, 765.5], [54.0, 759.0], [57.0, 781.6666666666666], [58.0, 786.0], [61.0, 781.6666666666666], [63.0, 779.0], [62.0, 776.0], [67.0, 795.6666666666666], [64.0, 785.0], [71.0, 786.5], [69.0, 794.0], [68.0, 774.0], [74.0, 807.0], [73.0, 825.0], [72.0, 769.0], [82.0, 797.1428571428572], [87.0, 780.0], [86.0, 791.0], [91.0, 796.7142857142857], [88.0, 806.0], [95.0, 821.5], [93.0, 807.0], [99.0, 768.0], [98.0, 786.0], [97.0, 803.0], [96.0, 797.0], [103.0, 812.5], [101.0, 799.0], [100.0, 810.0], [107.0, 779.0], [106.0, 804.0], [105.0, 805.0], [111.0, 228.5], [108.0, 804.0], [112.0, 513.0], [115.0, 784.6], [116.0, 507.5], [117.0, 360.0], [119.0, 434.66666666666663], [118.0, 783.0], [121.0, 380.0], [123.0, 333.5], [122.0, 432.0], [120.0, 781.0], [124.0, 319.0], [125.0, 281.0], [126.0, 359.0], [127.0, 273.3333333333333], [129.0, 400.5], [130.0, 324.25], [131.0, 330.3333333333333], [135.0, 330.0], [134.0, 449.0], [133.0, 443.5], [143.0, 419.25], [140.0, 442.0], [139.0, 447.0], [136.0, 446.0], [144.0, 380.5], [146.0, 377.75], [147.0, 370.0], [149.0, 399.0], [151.0, 443.0], [148.0, 443.0], [153.0, 367.5], [154.0, 380.6666666666667], [156.0, 404.0], [157.0, 366.3333333333333], [159.0, 379.25], [158.0, 467.0], [152.0, 443.0], [161.0, 447.3333333333333], [162.0, 387.5], [163.0, 400.6666666666667], [167.0, 385.5], [166.0, 453.0], [165.0, 462.0], [169.0, 398.0], [171.0, 384.2857142857143], [172.0, 349.3333333333333], [173.0, 446.0], [174.0, 417.0], [175.0, 391.0], [170.0, 455.0], [168.0, 459.0], [180.0, 496.3333333333333], [181.0, 454.0], [178.0, 452.0], [177.0, 461.0], [176.0, 489.3333333333333], [191.0, 516.5], [190.0, 460.0], [189.0, 466.0], [188.0, 462.0], [187.0, 457.0], [186.0, 476.0], [184.0, 463.0], [192.0, 524.5], [197.0, 542.0], [199.0, 484.5], [198.0, 474.5], [196.0, 505.5], [194.0, 464.0], [193.0, 450.0], [201.0, 592.25], [204.0, 600.5], [205.0, 597.0], [206.0, 661.6666666666666], [207.0, 574.4], [203.0, 472.0], [209.0, 541.0], [210.0, 561.3333333333334], [213.0, 536.5], [214.0, 639.0], [215.0, 462.5], [212.0, 484.0], [211.0, 491.0], [208.0, 464.0], [216.0, 536.0], [218.0, 546.5], [220.0, 523.6666666666666], [221.0, 596.0], [222.0, 616.0], [223.0, 635.0], [219.0, 461.0], [224.0, 548.4], [225.0, 651.25], [227.0, 583.5], [228.0, 517.6666666666666], [229.0, 458.0], [232.0, 578.0], [233.0, 644.0], [239.0, 529.0], [237.0, 457.25], [244.0, 617.5], [246.0, 510.5], [243.0, 499.0], [242.0, 484.0], [241.0, 468.2], [252.0, 640.0], [253.0, 746.3333333333334], [255.0, 750.0], [251.0, 497.0], [249.0, 496.0], [248.0, 516.5], [268.0, 727.3636363636364], [256.0, 750.0], [257.0, 763.2857142857142], [259.0, 750.0], [258.0, 452.0], [262.0, 753.3333333333334], [261.0, 481.25], [264.0, 496.25], [265.0, 596.5], [266.0, 451.0], [269.0, 735.6666666666667], [270.0, 705.5], [271.0, 774.5], [284.0, 687.3333333333334], [272.0, 550.6666666666666], [275.0, 745.0000000000001], [273.0, 439.0], [285.0, 783.3333333333334], [286.0, 589.6666666666666], [287.0, 701.3333333333334], [276.0, 795.0], [277.0, 456.5], [278.0, 685.75], [279.0, 724.4], [280.0, 787.6666666666666], [281.0, 821.0], [282.0, 635.8333333333334], [283.0, 695.2], [302.0, 500.0], [289.0, 622.0], [293.0, 598.6666666666666], [295.0, 494.0], [288.0, 467.0], [294.0, 489.0], [303.0, 521.0], [301.0, 483.0], [300.0, 491.0], [291.0, 480.0], [290.0, 503.0], [299.0, 500.0], [297.0, 492.0], [296.0, 493.0], [319.0, 531.0], [318.0, 470.0], [314.0, 469.0], [313.0, 473.0], [312.0, 486.0], [310.0, 536.0], [309.0, 489.0], [308.0, 496.0], [307.0, 496.0], [304.0, 488.0], [334.0, 904.0], [323.0, 871.0], [322.0, 496.0], [321.0, 495.0], [320.0, 510.0], [327.0, 510.0], [326.0, 484.25], [330.0, 855.0], [335.0, 672.75], [333.0, 491.0], [332.0, 499.0], [331.0, 494.5], [329.0, 501.0], [328.0, 464.0], [339.0, 700.0], [336.0, 764.0], [337.0, 803.6], [338.0, 745.3333333333334], [343.0, 784.8], [342.0, 510.0], [341.0, 493.5], [345.0, 835.5], [344.0, 836.0], [347.0, 497.5], [349.0, 883.6], [351.0, 864.2857142857142], [350.0, 506.0], [352.0, 787.1], [353.0, 824.6666666666666], [355.0, 495.5], [354.0, 500.0], [356.0, 640.5], [357.0, 719.5], [358.0, 717.0], [359.0, 725.0], [361.0, 760.6666666666667], [363.0, 819.0], [362.0, 818.0], [367.0, 563.3333333333334], [364.0, 774.6666666666666], [365.0, 752.0], [366.0, 771.0], [380.0, 609.0], [369.0, 717.0], [371.0, 656.5], [375.0, 816.0], [372.0, 946.0], [374.0, 764.0000000000001], [376.0, 758.0], [377.0, 753.0], [379.0, 484.0], [378.0, 507.0], [381.0, 619.5], [382.0, 727.5454545454546], [383.0, 734.5555555555555], [398.0, 701.0], [386.0, 736.0], [385.0, 809.0], [384.0, 809.0], [387.0, 480.0], [388.0, 755.5], [390.0, 806.0], [389.0, 835.0], [391.0, 735.5], [393.0, 693.0], [395.0, 710.0], [399.0, 804.75], [394.0, 814.0], [392.0, 827.0], [414.0, 816.0], [403.0, 770.3333333333334], [407.0, 805.5], [400.0, 806.0], [401.0, 810.0], [415.0, 838.0], [413.0, 814.0], [412.0, 797.0], [411.0, 806.0], [410.0, 806.0], [409.0, 813.5], [408.0, 797.0], [429.0, 743.0], [430.0, 806.0], [428.0, 799.0], [419.0, 805.0], [418.0, 821.25], [417.0, 808.0], [416.0, 818.0], [427.0, 817.0], [426.0, 809.0], [425.0, 807.0], [424.0, 831.0], [423.0, 824.0], [422.0, 814.0], [421.0, 818.0], [420.0, 802.0], [446.0, 797.0], [432.0, 804.6666666666666], [433.0, 809.0], [439.0, 828.0], [438.0, 809.5], [437.0, 814.0], [436.0, 794.0], [434.0, 799.0], [435.0, 797.2], [447.0, 819.5], [445.0, 822.0], [443.0, 809.5], [442.0, 816.6666666666666], [440.0, 806.0], [448.0, 799.0], [452.0, 815.25], [454.0, 783.0], [455.0, 812.5], [457.0, 817.5], [459.0, 824.0], [458.0, 813.0], [460.0, 808.8333333333333], [451.0, 812.5], [450.0, 801.0], [449.0, 796.0], [461.0, 807.6666666666666], [462.0, 803.3333333333334], [463.0, 805.3333333333334], [456.0, 813.0], [467.0, 804.5], [464.0, 809.5], [471.0, 818.0], [469.0, 825.5], [468.0, 805.0], [465.0, 779.0], [466.0, 822.0], [476.0, 811.1428571428571], [477.0, 799.4], [479.0, 819.0], [478.0, 844.0], [475.0, 818.0], [474.0, 818.75], [473.0, 835.3333333333334], [483.0, 777.3333333333334], [480.0, 778.5], [487.0, 816.0], [486.0, 815.0], [485.0, 822.0], [481.0, 797.4], [482.0, 778.0], [489.0, 799.6666666666666], [490.0, 815.0], [492.0, 839.0], [493.0, 801.8], [494.0, 780.3333333333334], [495.0, 839.5], [509.0, 831.0], [498.0, 798.0], [499.0, 823.1666666666666], [502.0, 805.5], [496.0, 869.0], [501.0, 827.0], [504.0, 825.75], [507.0, 790.75], [510.0, 831.0], [508.0, 844.0], [506.0, 846.0], [505.0, 832.0], [537.0, 813.4444444444446], [521.0, 829.6666666666666], [520.0, 851.0], [523.0, 845.0], [522.0, 858.0], [524.0, 781.8333333333334], [536.0, 795.5], [526.0, 847.5], [513.0, 858.0], [512.0, 815.0], [515.0, 829.0], [514.0, 831.0], [517.0, 847.0], [516.0, 841.0], [519.0, 847.0], [538.0, 751.0], [539.0, 817.75], [543.0, 797.4], [528.0, 854.25], [531.0, 845.5], [530.0, 867.5], [533.0, 850.5], [532.0, 846.0], [535.0, 853.0], [534.0, 864.5], [542.0, 859.0], [541.0, 856.0], [540.0, 855.5], [568.0, 877.5], [545.0, 786.0], [551.0, 806.0], [550.0, 854.5], [549.0, 856.0], [548.0, 849.0], [547.0, 832.0], [546.0, 855.0], [555.0, 863.0], [554.0, 865.6666666666666], [553.0, 847.0], [552.0, 859.0], [556.0, 851.0], [557.0, 861.1428571428571], [559.0, 883.0], [544.0, 854.0], [558.0, 876.6666666666666], [565.0, 882.2], [567.0, 875.3333333333333], [566.0, 880.0], [569.0, 880.5714285714286], [571.0, 878.0], [570.0, 863.8], [572.0, 894.2222222222222], [573.0, 914.8571428571428], [574.0, 910.5], [575.0, 896.7142857142857], [561.0, 882.0], [560.0, 907.0], [563.0, 888.6666666666666], [562.0, 878.6], [582.0, 926.0], [577.0, 875.0], [576.0, 895.6666666666666], [590.0, 919.0], [591.0, 902.5714285714287], [588.0, 903.0], [587.0, 890.0], [589.0, 900.8823529411765], [578.0, 901.6], [579.0, 900.0], [581.0, 901.0], [580.0, 856.0], [583.0, 889.2222222222222], [601.0, 931.5], [603.0, 930.6666666666666], [604.0, 928.4], [607.0, 894.5], [592.0, 887.6666666666666], [606.0, 903.0], [605.0, 889.9166666666666], [593.0, 921.2857142857143], [594.0, 926.2], [595.0, 945.0], [597.0, 914.4375], [599.0, 895.7142857142857], [598.0, 897.0], [584.0, 922.4285714285714], [586.0, 890.4285714285716], [633.0, 943.4], [609.0, 951.5], [608.0, 905.5], [611.0, 886.0], [610.0, 906.0], [623.0, 902.5], [622.0, 913.0], [621.0, 929.0], [620.0, 930.0], [619.0, 894.0000000000001], [618.0, 883.75], [617.0, 889.6666666666666], [616.0, 894.3333333333333], [612.0, 907.0], [626.0, 952.2857142857143], [624.0, 919.5], [628.0, 909.6666666666666], [627.0, 916.0], [631.0, 915.1666666666667], [630.0, 925.4], [632.0, 1082.0], [615.0, 909.0], [614.0, 911.6666666666666], [613.0, 888.6666666666666], [634.0, 1070.75], [635.0, 949.7142857142858], [639.0, 1035.5], [638.0, 918.5], [637.0, 905.0], [636.0, 924.6], [668.0, 948.0], [654.0, 983.6666666666666], [643.0, 1044.0], [642.0, 918.0], [641.0, 921.3333333333334], [640.0, 914.4], [645.0, 926.4285714285714], [644.0, 924.0], [647.0, 935.0], [646.0, 919.0], [664.0, 978.6], [665.0, 1010.0], [667.0, 932.0], [666.0, 950.875], [669.0, 947.0], [671.0, 959.3333333333334], [670.0, 942.6], [648.0, 1009.4], [649.0, 974.0], [650.0, 1108.5], [651.0, 928.8571428571429], [653.0, 911.0], [652.0, 931.0], [656.0, 1060.4285714285713], [657.0, 950.1428571428572], [658.0, 930.5], [659.0, 1095.75], [660.0, 995.8571428571428], [661.0, 1070.0], [663.0, 961.2222222222222], [662.0, 955.75], [698.0, 1194.0], [686.0, 1044.0], [672.0, 1048.5555555555557], [674.0, 939.0], [673.0, 948.5], [675.0, 1014.6666666666667], [678.0, 1075.3333333333333], [677.0, 970.0], [676.0, 958.0], [679.0, 978.3333333333334], [697.0, 998.0], [696.0, 985.0], [701.0, 1142.2857142857142], [700.0, 1316.0], [699.0, 1326.0], [702.0, 1132.5], [703.0, 1029.0], [681.0, 1038.2], [680.0, 958.5], [683.0, 961.3333333333334], [684.0, 1021.0], [685.0, 995.5], [687.0, 1055.4], [688.0, 1118.2], [691.0, 1006.8461538461537], [690.0, 996.0], [689.0, 964.8], [692.0, 1001.0], [693.0, 1059.0], [694.0, 1057.5], [695.0, 1075.0], [732.0, 1074.5], [710.0, 1056.25], [704.0, 1104.2], [718.0, 1024.5], [716.0, 1026.7], [714.0, 1027.5], [712.0, 1026.6666666666667], [705.0, 1121.0], [706.0, 1054.2857142857142], [707.0, 1018.5], [709.0, 1025.0], [708.0, 1021.7499999999999], [711.0, 1038.9166666666665], [728.0, 1043.3333333333333], [730.0, 1055.0], [729.0, 1053.5], [734.0, 1106.0], [735.0, 1049.8333333333333], [721.0, 1029.25], [720.0, 1025.0], [723.0, 1043.0], [722.0, 1028.3999999999999], [725.0, 1032.6], [724.0, 1037.0], [727.0, 1041.0], [726.0, 1042.8], [733.0, 1059.0], [764.0, 1106.5], [753.0, 1113.6], [751.0, 1129.0], [737.0, 1054.333333333333], [736.0, 1047.5], [739.0, 1059.142857142857], [738.0, 1064.2], [741.0, 1054.0], [740.0, 1076.0], [743.0, 1059.7499999999998], [742.0, 1053.0], [750.0, 1059.2857142857142], [749.0, 1059.0], [747.0, 1059.1000000000001], [746.0, 1062.2857142857142], [745.0, 1058.4], [744.0, 1061.0], [756.0, 1139.8333333333335], [755.0, 1054.5833333333333], [754.0, 1049.75], [757.0, 1057.0], [758.0, 1079.3333333333335], [759.0, 1155.857142857143], [760.0, 1061.8333333333333], [761.0, 1196.25], [763.0, 1055.3333333333333], [762.0, 1070.25], [765.0, 1155.0], [766.0, 1125.3333333333333], [767.0, 1062.0], [752.0, 1051.857142857143], [771.0, 1266.0], [780.0, 1084.9629629629628], [769.0, 1095.1666666666667], [768.0, 1122.142857142857], [782.0, 1178.0], [781.0, 1067.0], [783.0, 1077.0], [770.0, 1177.6666666666667], [775.0, 1085.0000000000002], [773.0, 1061.0], [772.0, 1044.5], [792.0, 1066.9999999999998], [793.0, 1189.5], [794.0, 1089.2142857142856], [796.0, 1071.9411764705883], [797.0, 1098.4285714285716], [799.0, 1088.0833333333335], [784.0, 1077.0], [798.0, 1088.25], [785.0, 1083.3999999999999], [786.0, 1118.5], [787.0, 1071.368421052632], [788.0, 1214.1999999999998], [789.0, 1068.388888888889], [790.0, 1124.4736842105265], [791.0, 1156.0], [777.0, 1101.875], [778.0, 1217.142857142857], [779.0, 1292.0], [805.0, 1222.5], [812.0, 1224.8333333333333], [802.0, 1115.3000000000002], [800.0, 1183.0], [801.0, 1092.4545454545453], [813.0, 1194.714285714286], [814.0, 1098.04], [815.0, 1096.3333333333333], [803.0, 1214.75], [804.0, 1095.4166666666667], [806.0, 1159.75], [824.0, 1087.5], [807.0, 1091.0], [820.0, 1204.75], [819.0, 1099.0], [818.0, 1115.8], [817.0, 1098.6250000000002], [821.0, 1122.0], [823.0, 1103.375], [822.0, 1110.6923076923078], [831.0, 1095.5555555555557], [830.0, 1089.75], [829.0, 1089.142857142857], [828.0, 1087.857142857143], [827.0, 1096.6666666666667], [826.0, 1099.0], [825.0, 1154.8333333333335], [808.0, 1150.7307692307693], [809.0, 1107.1904761904761], [810.0, 1126.1250000000002], [857.0, 1358.6666666666667], [845.0, 1487.0], [844.0, 1366.625], [843.0, 1380.0], [842.0, 1380.6], [841.0, 1380.0], [840.0, 1394.3333333333333], [846.0, 1281.0], [850.0, 1111.125], [854.0, 1061.6363636363637], [853.0, 1067.75], [852.0, 1058.6666666666667], [851.0, 1059.3636363636363], [863.0, 1074.5], [849.0, 1040.4], [848.0, 1038.5], [856.0, 1153.5], [847.0, 1045.0], [833.0, 1416.0], [832.0, 1171.2142857142858], [835.0, 1302.1666666666665], [834.0, 1335.25], [838.0, 1392.5], [836.0, 1383.761904761905], [839.0, 1391.769230769231], [858.0, 1095.0869565217395], [859.0, 1111.9], [861.0, 1333.5], [860.0, 1074.75], [862.0, 1459.375], [890.0, 1190.4], [865.0, 1201.5714285714284], [864.0, 1198.0000000000002], [866.0, 1218.6666666666667], [867.0, 1067.6666666666667], [868.0, 1405.75], [869.0, 1199.5714285714284], [871.0, 1085.388888888889], [870.0, 1091.0], [889.0, 1118.25], [888.0, 1119.0], [891.0, 1165.1666666666667], [892.0, 1101.5], [893.0, 1166.5454545454547], [894.0, 1470.3333333333333], [895.0, 1098.875], [880.0, 1105.0526315789473], [881.0, 1335.9999999999998], [882.0, 1092.1818181818182], [883.0, 1338.25], [885.0, 1121.0833333333333], [884.0, 1093.6], [887.0, 1112.1000000000001], [886.0, 1091.2333333333336], [873.0, 1339.0625], [872.0, 1091.5], [874.0, 1125.1666666666667], [875.0, 1132.125], [876.0, 1071.0], [878.0, 1085.0], [877.0, 1072.1666666666667], [879.0, 1128.142857142857], [900.0, 1293.8333333333333], [908.0, 1122.6999999999998], [898.0, 1305.7142857142856], [897.0, 1335.125], [896.0, 1096.3333333333333], [909.0, 1156.1], [910.0, 1116.0], [911.0, 1119.875], [899.0, 1155.75], [901.0, 1133.2941176470588], [903.0, 1101.0], [902.0, 1102.0], [921.0, 1098.1999999999998], [920.0, 1096.1000000000001], [923.0, 1110.3888888888887], [922.0, 1112.0], [925.0, 1090.0], [924.0, 1095.25], [927.0, 1101.25], [913.0, 1104.25], [912.0, 1117.7500000000002], [915.0, 1113.875], [914.0, 1117.8124999999998], [917.0, 1115.7021276595744], [916.0, 1116.5454545454545], [919.0, 1104.5714285714287], [918.0, 1108.1666666666667], [926.0, 1086.0], [904.0, 1316.6], [905.0, 1113.3333333333333], [906.0, 1127.5714285714282], [907.0, 1158.6666666666665], [953.0, 1104.7142857142858], [958.0, 1128.0], [959.0, 1139.3333333333333], [945.0, 1406.0], [944.0, 1408.857142857143], [947.0, 1399.6666666666667], [946.0, 1403.0], [949.0, 1089.2], [948.0, 1198.0588235294117], [957.0, 1115.0714285714287], [955.0, 1108.3000000000002], [954.0, 1115.2], [952.0, 1105.1333333333332], [935.0, 1415.6666666666665], [934.0, 1416.0555555555557], [933.0, 1378.6666666666667], [932.0, 1422.5714285714287], [931.0, 1335.6000000000001], [930.0, 1320.4], [929.0, 1141.864864864865], [928.0, 1108.7647058823534], [943.0, 1421.0], [942.0, 1409.4615384615383], [941.0, 1421.5], [940.0, 1402.5], [939.0, 1423.2727272727273], [938.0, 1409.3333333333333], [937.0, 1414.0], [936.0, 1412.8], [951.0, 1106.5882352941176], [950.0, 1087.0], [988.0, 1114.3], [975.0, 1138.0526315789475], [960.0, 1136.2], [962.0, 1125.9], [961.0, 1136.2222222222222], [964.0, 1126.3333333333333], [963.0, 1124.0], [966.0, 1121.7142857142858], [965.0, 1122.25], [974.0, 1131.6499999999999], [973.0, 1127.3], [972.0, 1138.0], [971.0, 1120.4374999999998], [970.0, 1123.6666666666665], [969.0, 1126.25], [968.0, 1120.5], [991.0, 1115.9999999999998], [976.0, 1115.0], [978.0, 1115.1818181818182], [977.0, 1113.5], [980.0, 1117.2499999999998], [979.0, 1120.0], [982.0, 1114.5], [981.0, 1110.2121212121212], [990.0, 1105.2], [989.0, 1126.0], [987.0, 1123.142857142857], [986.0, 1110.2], [985.0, 1119.25], [984.0, 1105.8], [996.0, 1099.5384615384617], [1000.0, 1994.48370289779], [999.0, 1098.2127659574467], [998.0, 1098.2105263157898], [997.0, 1095.5555555555554], [995.0, 1092.5], [994.0, 1099.7241379310344], [993.0, 1107.6000000000001], [992.0, 1114.3124999999998]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[993.7407099999964, 1973.5071549999725]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2937.4, "minX": 1.6618986E12, "maxY": 159202.3, "series": [{"data": [[1.66189878E12, 19398.366666666665], [1.6618986E12, 6885.6], [1.6618989E12, 24295.933333333334], [1.66189872E12, 17017.033333333333], [1.66189902E12, 2937.4], [1.66189884E12, 21354.733333333334], [1.66189866E12, 15009.366666666667], [1.66189896E12, 19768.233333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66189878E12, 127110.35], [1.6618986E12, 45118.8], [1.6618989E12, 159202.3], [1.66189872E12, 111506.35], [1.66189902E12, 19247.7], [1.66189884E12, 139929.7], [1.66189866E12, 98350.85], [1.66189896E12, 129533.95]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66189902E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1045.6435963777485, "minX": 1.6618986E12, "maxY": 2659.4069168506194, "series": [{"data": [[1.66189878E12, 1959.5956446504858], [1.6618986E12, 2659.4069168506194], [1.6618989E12, 1579.3634325634678], [1.66189872E12, 2241.7513491384316], [1.66189902E12, 1045.6435963777485], [1.66189884E12, 1770.208553294958], [1.66189866E12, 2541.253934765186], [1.66189896E12, 1928.1704097651761]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66189902E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1045.6433807675712, "minX": 1.6618986E12, "maxY": 2659.4060890360693, "series": [{"data": [[1.66189878E12, 1959.5953508113275], [1.6618986E12, 2659.4060890360693], [1.6618989E12, 1579.363041551535], [1.66189872E12, 2241.7511258327318], [1.66189902E12, 1045.6433807675712], [1.66189884E12, 1770.2083456907258], [1.66189866E12, 2541.253681589934], [1.66189896E12, 1928.1695767789083]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66189902E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6618986E12, "maxY": 0.02005574600326775, "series": [{"data": [[1.66189878E12, 0.004864670736883345], [1.6618986E12, 0.019867549668874145], [1.6618989E12, 0.004561805953808441], [1.66189872E12, 0.005545424094681626], [1.66189902E12, 0.0], [1.66189884E12, 0.005012159677323695], [1.66189866E12, 0.007342081944385845], [1.66189896E12, 0.02005574600326775]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66189902E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 180.0, "minX": 1.6618986E12, "maxY": 7809.0, "series": [{"data": [[1.66189878E12, 2369.0], [1.6618986E12, 3575.0], [1.6618989E12, 3021.0], [1.66189872E12, 2734.0], [1.66189902E12, 1542.0], [1.66189884E12, 3370.0], [1.66189866E12, 3038.0], [1.66189896E12, 7809.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66189878E12, 2038.0], [1.6618986E12, 3044.100000000002], [1.6618989E12, 1734.0], [1.66189872E12, 2381.0], [1.66189902E12, 1145.0], [1.66189884E12, 1949.0], [1.66189866E12, 2704.9000000000015], [1.66189896E12, 6081.9000000000015]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66189878E12, 2154.0], [1.6618986E12, 3339.0], [1.6618989E12, 1839.0], [1.66189872E12, 2491.0], [1.66189902E12, 1419.0], [1.66189884E12, 2951.0], [1.66189866E12, 2866.9900000000016], [1.66189896E12, 7524.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66189878E12, 2073.0], [1.6618986E12, 3213.0], [1.6618989E12, 1762.0], [1.66189872E12, 2444.0], [1.66189902E12, 1390.0], [1.66189884E12, 2614.0], [1.66189866E12, 2757.0], [1.66189896E12, 6491.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66189878E12, 1536.0], [1.6618986E12, 180.0], [1.6618989E12, 1158.0], [1.66189872E12, 1796.0], [1.66189902E12, 427.0], [1.66189884E12, 1450.0], [1.66189866E12, 2095.0], [1.66189896E12, 726.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66189878E12, 1967.0], [1.6618986E12, 2776.0], [1.6618989E12, 1544.0], [1.66189872E12, 2178.0], [1.66189902E12, 1084.0], [1.66189884E12, 1713.0], [1.66189866E12, 2539.0], [1.66189896E12, 1459.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66189902E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 418.0, "minX": 69.0, "maxY": 7540.0, "series": [{"data": [[69.0, 7540.0], [102.0, 5204.0], [101.0, 7516.0], [104.0, 4813.0], [105.0, 6339.0], [110.0, 6947.0], [111.0, 7361.0], [114.0, 6358.0], [119.0, 6213.0], [118.0, 6302.5], [134.0, 418.0], [149.0, 5541.0], [189.0, 5603.0], [192.0, 4182.0], [200.0, 2798.0], [239.0, 6516.0], [245.0, 6332.0], [252.0, 512.0], [262.0, 3005.5], [277.0, 7080.0], [297.0, 1234.0], [303.0, 2729.0], [301.0, 2765.0], [300.0, 3329.0], [306.0, 795.0], [305.0, 2207.0], [304.0, 2879.5], [307.0, 2753.0], [319.0, 2714.0], [316.0, 2675.0], [309.0, 2781.0], [322.0, 2930.0], [325.0, 2690.0], [331.0, 2567.0], [333.0, 2310.0], [323.0, 2915.0], [335.0, 2841.0], [338.0, 1847.0], [339.0, 2599.0], [341.0, 2186.0], [379.0, 2861.0], [382.0, 2742.5], [376.0, 2687.0], [383.0, 2598.0], [380.0, 2587.0], [374.0, 2862.0], [369.0, 2793.0], [368.0, 2727.0], [396.0, 2656.5], [399.0, 2698.0], [389.0, 2823.0], [392.0, 2926.0], [394.0, 2621.0], [388.0, 2621.0], [398.0, 2476.0], [386.0, 2452.0], [384.0, 2713.0], [390.0, 2440.0], [400.0, 2560.0], [401.0, 2336.0], [402.0, 2358.0], [413.0, 2473.0], [411.0, 2354.0], [410.0, 2470.0], [409.0, 2235.0], [405.0, 2821.0], [425.0, 2481.0], [430.0, 2097.0], [428.0, 2310.0], [443.0, 2374.0], [441.0, 2272.5], [447.0, 2340.0], [436.0, 2169.0], [435.0, 1812.0], [456.0, 2165.5], [458.0, 2291.5], [452.0, 2291.0], [455.0, 2022.0], [448.0, 2259.5], [457.0, 2143.0], [451.0, 2189.0], [459.0, 2124.0], [462.0, 2006.0], [461.0, 1996.0], [472.0, 2374.0], [471.0, 2394.0], [464.0, 2137.0], [475.0, 2210.0], [488.0, 2296.0], [490.0, 2191.0], [481.0, 2011.0], [491.0, 2020.0], [480.0, 2014.0], [485.0, 2010.0], [492.0, 2067.0], [497.0, 2355.0], [499.0, 2049.0], [500.0, 2005.0], [501.0, 1975.0], [503.0, 2006.0], [498.0, 1966.5], [502.0, 1957.0], [508.0, 1919.0], [505.0, 1934.0], [506.0, 1964.0], [504.0, 1712.0], [539.0, 1893.0], [513.0, 2038.0], [541.0, 2027.0], [523.0, 1948.0], [518.0, 1901.0], [526.0, 1865.0], [531.0, 1962.0], [532.0, 1849.0], [543.0, 1851.0], [529.0, 1734.0], [527.0, 1835.0], [512.0, 1940.0], [540.0, 1893.0], [550.0, 1982.5], [544.0, 1842.0], [562.0, 1721.0], [568.0, 1737.5], [551.0, 1748.0], [548.0, 1756.0], [567.0, 1421.0], [577.0, 1692.5], [586.0, 1969.0], [599.0, 1691.0], [597.0, 1697.0], [598.0, 1661.5], [590.0, 1691.5], [588.0, 1853.0], [589.0, 1555.0], [596.0, 1759.0], [592.0, 1821.5], [595.0, 1633.0], [607.0, 1672.0], [606.0, 1631.0], [603.0, 1655.0], [591.0, 1684.0], [601.0, 1681.0], [600.0, 1688.0], [583.0, 1713.0], [579.0, 1717.0], [608.0, 1624.0], [632.0, 1812.0], [633.0, 1348.0], [615.0, 1623.5], [618.0, 1728.0], [609.0, 1757.0], [614.0, 1712.0], [620.0, 1672.5], [622.0, 1739.0], [631.0, 1645.0], [630.0, 1401.0], [627.0, 1780.0], [624.0, 1574.0], [616.0, 1889.0], [617.0, 1643.0], [647.0, 1400.0], [643.0, 1548.0], [669.0, 1674.0], [653.0, 1421.0], [662.0, 1326.0], [648.0, 1437.0], [657.0, 1601.0], [654.0, 1666.0], [656.0, 1690.0], [701.0, 1403.0], [699.0, 1459.0], [690.0, 1398.0], [702.0, 1271.0], [703.0, 1453.5], [698.0, 1265.0], [686.0, 1393.0], [680.0, 1314.0], [693.0, 1367.0], [691.0, 1340.0], [672.0, 1715.0], [697.0, 1313.0], [677.0, 1371.0], [708.0, 1253.0], [704.0, 1631.0], [718.0, 1581.0], [717.0, 1598.0], [714.0, 1324.0], [713.0, 1318.0], [712.0, 1321.5], [732.0, 1242.0], [707.0, 1461.0], [724.0, 1563.0], [725.0, 1341.0], [710.0, 1383.0], [721.0, 1591.0], [705.0, 1356.0], [739.0, 1340.0], [742.0, 1245.0], [763.0, 5331.0], [761.0, 1285.0], [764.0, 1139.0], [796.0, 1332.0], [790.0, 1298.0], [793.0, 1369.0], [771.0, 1227.0], [797.0, 1207.0], [776.0, 1268.5], [788.0, 1251.0], [786.0, 1192.0], [780.0, 1208.5], [791.0, 1194.0], [807.0, 1204.0], [801.0, 1262.0], [815.0, 1195.0], [848.0, 1140.5], [861.0, 1107.0], [879.0, 1628.0], [885.0, 1085.0], [873.0, 1108.0], [909.0, 1055.0], [934.0, 1077.0], [960.0, 886.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 960.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 418.0, "minX": 69.0, "maxY": 7540.0, "series": [{"data": [[69.0, 7540.0], [102.0, 5204.0], [101.0, 7516.0], [104.0, 4813.0], [105.0, 6339.0], [110.0, 6947.0], [111.0, 7361.0], [114.0, 6358.0], [119.0, 6213.0], [118.0, 6302.5], [134.0, 418.0], [149.0, 5541.0], [189.0, 5603.0], [192.0, 4182.0], [200.0, 2798.0], [239.0, 6516.0], [245.0, 6332.0], [252.0, 512.0], [262.0, 3005.5], [277.0, 7080.0], [297.0, 1234.0], [303.0, 2729.0], [301.0, 2765.0], [300.0, 3329.0], [306.0, 795.0], [305.0, 2207.0], [304.0, 2879.5], [307.0, 2753.0], [319.0, 2714.0], [316.0, 2675.0], [309.0, 2781.0], [322.0, 2930.0], [325.0, 2690.0], [331.0, 2567.0], [333.0, 2310.0], [323.0, 2915.0], [335.0, 2841.0], [338.0, 1847.0], [339.0, 2599.0], [341.0, 2186.0], [379.0, 2861.0], [382.0, 2742.5], [376.0, 2687.0], [383.0, 2598.0], [380.0, 2587.0], [374.0, 2862.0], [369.0, 2793.0], [368.0, 2727.0], [396.0, 2656.5], [399.0, 2698.0], [389.0, 2823.0], [392.0, 2926.0], [394.0, 2621.0], [388.0, 2621.0], [398.0, 2476.0], [386.0, 2452.0], [384.0, 2713.0], [390.0, 2440.0], [400.0, 2560.0], [401.0, 2336.0], [402.0, 2358.0], [413.0, 2473.0], [411.0, 2354.0], [410.0, 2470.0], [409.0, 2235.0], [405.0, 2821.0], [425.0, 2481.0], [430.0, 2097.0], [428.0, 2310.0], [443.0, 2374.0], [441.0, 2272.5], [447.0, 2340.0], [436.0, 2169.0], [435.0, 1812.0], [456.0, 2165.5], [458.0, 2291.5], [452.0, 2291.0], [455.0, 2022.0], [448.0, 2259.5], [457.0, 2143.0], [451.0, 2189.0], [459.0, 2124.0], [462.0, 2006.0], [461.0, 1996.0], [472.0, 2374.0], [471.0, 2394.0], [464.0, 2137.0], [475.0, 2210.0], [488.0, 2296.0], [490.0, 2191.0], [481.0, 2011.0], [491.0, 2020.0], [480.0, 2014.0], [485.0, 2010.0], [492.0, 2067.0], [497.0, 2355.0], [499.0, 2049.0], [500.0, 2005.0], [501.0, 1975.0], [503.0, 2006.0], [498.0, 1966.5], [502.0, 1957.0], [508.0, 1919.0], [505.0, 1934.0], [506.0, 1964.0], [504.0, 1712.0], [539.0, 1893.0], [513.0, 2038.0], [541.0, 2027.0], [523.0, 1948.0], [518.0, 1901.0], [526.0, 1865.0], [531.0, 1962.0], [532.0, 1849.0], [543.0, 1851.0], [529.0, 1734.0], [527.0, 1835.0], [512.0, 1940.0], [540.0, 1893.0], [550.0, 1982.5], [544.0, 1842.0], [562.0, 1721.0], [568.0, 1737.5], [551.0, 1748.0], [548.0, 1756.0], [567.0, 1421.0], [577.0, 1692.5], [586.0, 1969.0], [599.0, 1691.0], [597.0, 1697.0], [598.0, 1661.5], [590.0, 1691.5], [588.0, 1853.0], [589.0, 1555.0], [596.0, 1759.0], [592.0, 1821.5], [595.0, 1633.0], [607.0, 1672.0], [606.0, 1631.0], [603.0, 1655.0], [591.0, 1684.0], [601.0, 1681.0], [600.0, 1688.0], [583.0, 1713.0], [579.0, 1717.0], [608.0, 1624.0], [632.0, 1812.0], [633.0, 1348.0], [615.0, 1623.5], [618.0, 1728.0], [609.0, 1757.0], [614.0, 1712.0], [620.0, 1672.5], [622.0, 1739.0], [631.0, 1645.0], [630.0, 1401.0], [627.0, 1780.0], [624.0, 1574.0], [616.0, 1889.0], [617.0, 1643.0], [647.0, 1400.0], [643.0, 1548.0], [669.0, 1674.0], [653.0, 1421.0], [662.0, 1326.0], [648.0, 1437.0], [657.0, 1601.0], [654.0, 1666.0], [656.0, 1690.0], [701.0, 1403.0], [699.0, 1459.0], [690.0, 1398.0], [702.0, 1271.0], [703.0, 1453.5], [698.0, 1265.0], [686.0, 1393.0], [680.0, 1314.0], [693.0, 1367.0], [691.0, 1340.0], [672.0, 1715.0], [697.0, 1313.0], [677.0, 1371.0], [708.0, 1253.0], [704.0, 1631.0], [718.0, 1581.0], [717.0, 1598.0], [714.0, 1324.0], [713.0, 1318.0], [712.0, 1321.5], [732.0, 1242.0], [707.0, 1461.0], [724.0, 1563.0], [725.0, 1341.0], [710.0, 1383.0], [721.0, 1591.0], [705.0, 1356.0], [739.0, 1340.0], [742.0, 1245.0], [763.0, 5331.0], [761.0, 1285.0], [764.0, 1139.0], [796.0, 1332.0], [790.0, 1298.0], [793.0, 1369.0], [771.0, 1227.0], [797.0, 1207.0], [776.0, 1268.5], [788.0, 1251.0], [786.0, 1192.0], [780.0, 1208.5], [791.0, 1194.0], [807.0, 1204.0], [801.0, 1262.0], [815.0, 1195.0], [848.0, 1140.5], [861.0, 1107.0], [879.0, 1628.0], [885.0, 1085.0], [873.0, 1108.0], [909.0, 1055.0], [934.0, 1077.0], [960.0, 886.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 960.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 60.65, "minX": 1.6618986E12, "maxY": 639.3666666666667, "series": [{"data": [[1.66189878E12, 510.48333333333335], [1.6618986E12, 197.86666666666667], [1.6618989E12, 639.3666666666667], [1.66189872E12, 447.81666666666666], [1.66189902E12, 60.65], [1.66189884E12, 561.9666666666667], [1.66189866E12, 394.98333333333335], [1.66189896E12, 520.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66189902E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 77.3, "minX": 1.6618986E12, "maxY": 639.3666666666667, "series": [{"data": [[1.66189878E12, 510.48333333333335], [1.6618986E12, 181.2], [1.6618989E12, 639.3666666666667], [1.66189872E12, 447.81666666666666], [1.66189902E12, 77.3], [1.66189884E12, 561.9666666666667], [1.66189866E12, 394.98333333333335], [1.66189896E12, 520.2166666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66189902E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 77.3, "minX": 1.6618986E12, "maxY": 639.3666666666667, "series": [{"data": [[1.66189878E12, 510.48333333333335], [1.6618986E12, 181.2], [1.6618989E12, 639.3666666666667], [1.66189872E12, 447.81666666666666], [1.66189902E12, 77.3], [1.66189884E12, 561.9666666666667], [1.66189866E12, 394.98333333333335], [1.66189896E12, 520.2166666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66189902E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 77.3, "minX": 1.6618986E12, "maxY": 639.3666666666667, "series": [{"data": [[1.66189878E12, 510.48333333333335], [1.6618986E12, 181.2], [1.6618989E12, 639.3666666666667], [1.66189872E12, 447.81666666666666], [1.66189902E12, 77.3], [1.66189884E12, 561.9666666666667], [1.66189866E12, 394.98333333333335], [1.66189896E12, 520.2166666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66189902E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

