/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 38.0, "minX": 0.0, "maxY": 33953.0, "series": [{"data": [[0.0, 38.0], [0.1, 300.0], [0.2, 414.0], [0.3, 448.0], [0.4, 471.0], [0.5, 482.0], [0.6, 488.0], [0.7, 494.0], [0.8, 502.0], [0.9, 509.0], [1.0, 517.0], [1.1, 523.0], [1.2, 529.0], [1.3, 535.0], [1.4, 541.0], [1.5, 547.0], [1.6, 552.0], [1.7, 557.0], [1.8, 567.0], [1.9, 575.0], [2.0, 583.0], [2.1, 593.0], [2.2, 603.0], [2.3, 609.0], [2.4, 614.0], [2.5, 621.0], [2.6, 627.0], [2.7, 633.0], [2.8, 640.0], [2.9, 644.0], [3.0, 649.0], [3.1, 653.0], [3.2, 660.0], [3.3, 665.0], [3.4, 670.0], [3.5, 674.0], [3.6, 679.0], [3.7, 683.0], [3.8, 687.0], [3.9, 692.0], [4.0, 698.0], [4.1, 703.0], [4.2, 708.0], [4.3, 713.0], [4.4, 718.0], [4.5, 723.0], [4.6, 729.0], [4.7, 733.0], [4.8, 738.0], [4.9, 744.0], [5.0, 749.0], [5.1, 754.0], [5.2, 758.0], [5.3, 762.0], [5.4, 767.0], [5.5, 772.0], [5.6, 777.0], [5.7, 783.0], [5.8, 789.0], [5.9, 794.0], [6.0, 800.0], [6.1, 805.0], [6.2, 812.0], [6.3, 820.0], [6.4, 827.0], [6.5, 834.0], [6.6, 840.0], [6.7, 850.0], [6.8, 862.0], [6.9, 872.0], [7.0, 880.0], [7.1, 889.0], [7.2, 901.0], [7.3, 914.0], [7.4, 921.0], [7.5, 927.0], [7.6, 935.0], [7.7, 944.0], [7.8, 954.0], [7.9, 964.0], [8.0, 971.0], [8.1, 977.0], [8.2, 985.0], [8.3, 997.0], [8.4, 1010.0], [8.5, 1018.0], [8.6, 1027.0], [8.7, 1037.0], [8.8, 1046.0], [8.9, 1054.0], [9.0, 1063.0], [9.1, 1072.0], [9.2, 1079.0], [9.3, 1089.0], [9.4, 1096.0], [9.5, 1102.0], [9.6, 1109.0], [9.7, 1115.0], [9.8, 1122.0], [9.9, 1128.0], [10.0, 1135.0], [10.1, 1141.0], [10.2, 1147.0], [10.3, 1153.0], [10.4, 1160.0], [10.5, 1168.0], [10.6, 1174.0], [10.7, 1180.0], [10.8, 1185.0], [10.9, 1191.0], [11.0, 1196.0], [11.1, 1201.0], [11.2, 1207.0], [11.3, 1214.0], [11.4, 1219.0], [11.5, 1226.0], [11.6, 1230.0], [11.7, 1237.0], [11.8, 1242.0], [11.9, 1247.0], [12.0, 1252.0], [12.1, 1257.0], [12.2, 1261.0], [12.3, 1265.0], [12.4, 1270.0], [12.5, 1273.0], [12.6, 1278.0], [12.7, 1282.0], [12.8, 1287.0], [12.9, 1291.0], [13.0, 1295.0], [13.1, 1299.0], [13.2, 1303.0], [13.3, 1307.0], [13.4, 1310.0], [13.5, 1313.0], [13.6, 1316.0], [13.7, 1319.0], [13.8, 1322.0], [13.9, 1324.0], [14.0, 1327.0], [14.1, 1330.0], [14.2, 1334.0], [14.3, 1336.0], [14.4, 1340.0], [14.5, 1344.0], [14.6, 1348.0], [14.7, 1352.0], [14.8, 1356.0], [14.9, 1359.0], [15.0, 1364.0], [15.1, 1367.0], [15.2, 1371.0], [15.3, 1374.0], [15.4, 1377.0], [15.5, 1381.0], [15.6, 1384.0], [15.7, 1388.0], [15.8, 1391.0], [15.9, 1394.0], [16.0, 1398.0], [16.1, 1402.0], [16.2, 1407.0], [16.3, 1410.0], [16.4, 1413.0], [16.5, 1416.0], [16.6, 1420.0], [16.7, 1423.0], [16.8, 1426.0], [16.9, 1430.0], [17.0, 1434.0], [17.1, 1437.0], [17.2, 1440.0], [17.3, 1443.0], [17.4, 1445.0], [17.5, 1448.0], [17.6, 1451.0], [17.7, 1454.0], [17.8, 1456.0], [17.9, 1459.0], [18.0, 1462.0], [18.1, 1465.0], [18.2, 1468.0], [18.3, 1471.0], [18.4, 1474.0], [18.5, 1477.0], [18.6, 1480.0], [18.7, 1483.0], [18.8, 1486.0], [18.9, 1489.0], [19.0, 1492.0], [19.1, 1495.0], [19.2, 1498.0], [19.3, 1501.0], [19.4, 1504.0], [19.5, 1507.0], [19.6, 1510.0], [19.7, 1513.0], [19.8, 1515.0], [19.9, 1518.0], [20.0, 1521.0], [20.1, 1525.0], [20.2, 1529.0], [20.3, 1533.0], [20.4, 1538.0], [20.5, 1542.0], [20.6, 1546.0], [20.7, 1551.0], [20.8, 1555.0], [20.9, 1558.0], [21.0, 1563.0], [21.1, 1567.0], [21.2, 1570.0], [21.3, 1575.0], [21.4, 1580.0], [21.5, 1585.0], [21.6, 1590.0], [21.7, 1598.0], [21.8, 1603.0], [21.9, 1609.0], [22.0, 1614.0], [22.1, 1620.0], [22.2, 1626.0], [22.3, 1631.0], [22.4, 1637.0], [22.5, 1643.0], [22.6, 1649.0], [22.7, 1657.0], [22.8, 1664.0], [22.9, 1671.0], [23.0, 1677.0], [23.1, 1682.0], [23.2, 1689.0], [23.3, 1696.0], [23.4, 1702.0], [23.5, 1708.0], [23.6, 1713.0], [23.7, 1721.0], [23.8, 1730.0], [23.9, 1739.0], [24.0, 1748.0], [24.1, 1756.0], [24.2, 1766.0], [24.3, 1774.0], [24.4, 1785.0], [24.5, 1793.0], [24.6, 1805.0], [24.7, 1818.0], [24.8, 1832.0], [24.9, 1844.0], [25.0, 1854.0], [25.1, 1866.0], [25.2, 1879.0], [25.3, 1896.0], [25.4, 1912.0], [25.5, 1928.0], [25.6, 1944.0], [25.7, 1963.0], [25.8, 1983.0], [25.9, 1999.0], [26.0, 2020.0], [26.1, 2045.0], [26.2, 2064.0], [26.3, 2085.0], [26.4, 2122.0], [26.5, 2148.0], [26.6, 2181.0], [26.7, 2214.0], [26.8, 2235.0], [26.9, 2253.0], [27.0, 2269.0], [27.1, 2283.0], [27.2, 2298.0], [27.3, 2313.0], [27.4, 2324.0], [27.5, 2333.0], [27.6, 2341.0], [27.7, 2349.0], [27.8, 2357.0], [27.9, 2364.0], [28.0, 2372.0], [28.1, 2379.0], [28.2, 2388.0], [28.3, 2398.0], [28.4, 2406.0], [28.5, 2413.0], [28.6, 2419.0], [28.7, 2425.0], [28.8, 2431.0], [28.9, 2437.0], [29.0, 2441.0], [29.1, 2446.0], [29.2, 2452.0], [29.3, 2457.0], [29.4, 2464.0], [29.5, 2471.0], [29.6, 2476.0], [29.7, 2482.0], [29.8, 2488.0], [29.9, 2495.0], [30.0, 2501.0], [30.1, 2508.0], [30.2, 2515.0], [30.3, 2521.0], [30.4, 2527.0], [30.5, 2533.0], [30.6, 2538.0], [30.7, 2543.0], [30.8, 2549.0], [30.9, 2555.0], [31.0, 2561.0], [31.1, 2567.0], [31.2, 2573.0], [31.3, 2580.0], [31.4, 2588.0], [31.5, 2596.0], [31.6, 2602.0], [31.7, 2610.0], [31.8, 2617.0], [31.9, 2623.0], [32.0, 2629.0], [32.1, 2636.0], [32.2, 2641.0], [32.3, 2647.0], [32.4, 2654.0], [32.5, 2660.0], [32.6, 2667.0], [32.7, 2673.0], [32.8, 2680.0], [32.9, 2687.0], [33.0, 2694.0], [33.1, 2702.0], [33.2, 2710.0], [33.3, 2717.0], [33.4, 2724.0], [33.5, 2730.0], [33.6, 2735.0], [33.7, 2742.0], [33.8, 2748.0], [33.9, 2755.0], [34.0, 2761.0], [34.1, 2767.0], [34.2, 2773.0], [34.3, 2779.0], [34.4, 2785.0], [34.5, 2793.0], [34.6, 2801.0], [34.7, 2807.0], [34.8, 2813.0], [34.9, 2819.0], [35.0, 2825.0], [35.1, 2832.0], [35.2, 2837.0], [35.3, 2844.0], [35.4, 2850.0], [35.5, 2856.0], [35.6, 2862.0], [35.7, 2868.0], [35.8, 2874.0], [35.9, 2879.0], [36.0, 2886.0], [36.1, 2892.0], [36.2, 2897.0], [36.3, 2904.0], [36.4, 2910.0], [36.5, 2916.0], [36.6, 2921.0], [36.7, 2927.0], [36.8, 2932.0], [36.9, 2936.0], [37.0, 2941.0], [37.1, 2947.0], [37.2, 2952.0], [37.3, 2957.0], [37.4, 2962.0], [37.5, 2967.0], [37.6, 2972.0], [37.7, 2978.0], [37.8, 2984.0], [37.9, 2990.0], [38.0, 2995.0], [38.1, 3000.0], [38.2, 3005.0], [38.3, 3009.0], [38.4, 3014.0], [38.5, 3020.0], [38.6, 3025.0], [38.7, 3029.0], [38.8, 3034.0], [38.9, 3039.0], [39.0, 3044.0], [39.1, 3050.0], [39.2, 3055.0], [39.3, 3061.0], [39.4, 3068.0], [39.5, 3074.0], [39.6, 3080.0], [39.7, 3086.0], [39.8, 3091.0], [39.9, 3096.0], [40.0, 3102.0], [40.1, 3109.0], [40.2, 3114.0], [40.3, 3121.0], [40.4, 3127.0], [40.5, 3133.0], [40.6, 3139.0], [40.7, 3145.0], [40.8, 3152.0], [40.9, 3159.0], [41.0, 3167.0], [41.1, 3175.0], [41.2, 3183.0], [41.3, 3191.0], [41.4, 3200.0], [41.5, 3208.0], [41.6, 3215.0], [41.7, 3224.0], [41.8, 3231.0], [41.9, 3240.0], [42.0, 3249.0], [42.1, 3257.0], [42.2, 3267.0], [42.3, 3275.0], [42.4, 3285.0], [42.5, 3296.0], [42.6, 3306.0], [42.7, 3314.0], [42.8, 3324.0], [42.9, 3334.0], [43.0, 3346.0], [43.1, 3355.0], [43.2, 3367.0], [43.3, 3380.0], [43.4, 3394.0], [43.5, 3405.0], [43.6, 3417.0], [43.7, 3427.0], [43.8, 3438.0], [43.9, 3450.0], [44.0, 3461.0], [44.1, 3472.0], [44.2, 3480.0], [44.3, 3490.0], [44.4, 3500.0], [44.5, 3510.0], [44.6, 3520.0], [44.7, 3531.0], [44.8, 3541.0], [44.9, 3550.0], [45.0, 3558.0], [45.1, 3566.0], [45.2, 3574.0], [45.3, 3580.0], [45.4, 3589.0], [45.5, 3597.0], [45.6, 3604.0], [45.7, 3610.0], [45.8, 3619.0], [45.9, 3625.0], [46.0, 3631.0], [46.1, 3638.0], [46.2, 3645.0], [46.3, 3652.0], [46.4, 3658.0], [46.5, 3663.0], [46.6, 3669.0], [46.7, 3675.0], [46.8, 3681.0], [46.9, 3687.0], [47.0, 3692.0], [47.1, 3699.0], [47.2, 3703.0], [47.3, 3709.0], [47.4, 3715.0], [47.5, 3721.0], [47.6, 3727.0], [47.7, 3734.0], [47.8, 3741.0], [47.9, 3748.0], [48.0, 3754.0], [48.1, 3761.0], [48.2, 3769.0], [48.3, 3776.0], [48.4, 3783.0], [48.5, 3789.0], [48.6, 3795.0], [48.7, 3800.0], [48.8, 3806.0], [48.9, 3810.0], [49.0, 3814.0], [49.1, 3819.0], [49.2, 3824.0], [49.3, 3829.0], [49.4, 3834.0], [49.5, 3838.0], [49.6, 3844.0], [49.7, 3849.0], [49.8, 3854.0], [49.9, 3859.0], [50.0, 3865.0], [50.1, 3870.0], [50.2, 3875.0], [50.3, 3881.0], [50.4, 3886.0], [50.5, 3892.0], [50.6, 3898.0], [50.7, 3904.0], [50.8, 3909.0], [50.9, 3915.0], [51.0, 3921.0], [51.1, 3926.0], [51.2, 3933.0], [51.3, 3939.0], [51.4, 3946.0], [51.5, 3952.0], [51.6, 3958.0], [51.7, 3964.0], [51.8, 3970.0], [51.9, 3976.0], [52.0, 3980.0], [52.1, 3984.0], [52.2, 3991.0], [52.3, 3996.0], [52.4, 4002.0], [52.5, 4009.0], [52.6, 4014.0], [52.7, 4022.0], [52.8, 4029.0], [52.9, 4036.0], [53.0, 4043.0], [53.1, 4051.0], [53.2, 4059.0], [53.3, 4066.0], [53.4, 4073.0], [53.5, 4080.0], [53.6, 4087.0], [53.7, 4093.0], [53.8, 4101.0], [53.9, 4108.0], [54.0, 4115.0], [54.1, 4121.0], [54.2, 4127.0], [54.3, 4132.0], [54.4, 4137.0], [54.5, 4143.0], [54.6, 4149.0], [54.7, 4155.0], [54.8, 4161.0], [54.9, 4166.0], [55.0, 4174.0], [55.1, 4180.0], [55.2, 4186.0], [55.3, 4192.0], [55.4, 4197.0], [55.5, 4202.0], [55.6, 4208.0], [55.7, 4213.0], [55.8, 4217.0], [55.9, 4222.0], [56.0, 4226.0], [56.1, 4232.0], [56.2, 4236.0], [56.3, 4240.0], [56.4, 4244.0], [56.5, 4248.0], [56.6, 4253.0], [56.7, 4257.0], [56.8, 4260.0], [56.9, 4264.0], [57.0, 4268.0], [57.1, 4272.0], [57.2, 4276.0], [57.3, 4280.0], [57.4, 4284.0], [57.5, 4288.0], [57.6, 4293.0], [57.7, 4299.0], [57.8, 4304.0], [57.9, 4309.0], [58.0, 4314.0], [58.1, 4318.0], [58.2, 4324.0], [58.3, 4328.0], [58.4, 4333.0], [58.5, 4338.0], [58.6, 4343.0], [58.7, 4348.0], [58.8, 4354.0], [58.9, 4358.0], [59.0, 4363.0], [59.1, 4367.0], [59.2, 4372.0], [59.3, 4376.0], [59.4, 4380.0], [59.5, 4384.0], [59.6, 4389.0], [59.7, 4393.0], [59.8, 4397.0], [59.9, 4402.0], [60.0, 4406.0], [60.1, 4410.0], [60.2, 4414.0], [60.3, 4417.0], [60.4, 4420.0], [60.5, 4424.0], [60.6, 4429.0], [60.7, 4433.0], [60.8, 4437.0], [60.9, 4441.0], [61.0, 4445.0], [61.1, 4449.0], [61.2, 4453.0], [61.3, 4457.0], [61.4, 4462.0], [61.5, 4466.0], [61.6, 4471.0], [61.7, 4476.0], [61.8, 4481.0], [61.9, 4486.0], [62.0, 4490.0], [62.1, 4495.0], [62.2, 4499.0], [62.3, 4504.0], [62.4, 4509.0], [62.5, 4513.0], [62.6, 4517.0], [62.7, 4522.0], [62.8, 4527.0], [62.9, 4530.0], [63.0, 4535.0], [63.1, 4539.0], [63.2, 4544.0], [63.3, 4548.0], [63.4, 4553.0], [63.5, 4559.0], [63.6, 4564.0], [63.7, 4569.0], [63.8, 4573.0], [63.9, 4578.0], [64.0, 4584.0], [64.1, 4589.0], [64.2, 4595.0], [64.3, 4602.0], [64.4, 4606.0], [64.5, 4611.0], [64.6, 4616.0], [64.7, 4620.0], [64.8, 4627.0], [64.9, 4632.0], [65.0, 4637.0], [65.1, 4643.0], [65.2, 4648.0], [65.3, 4653.0], [65.4, 4658.0], [65.5, 4663.0], [65.6, 4669.0], [65.7, 4674.0], [65.8, 4680.0], [65.9, 4685.0], [66.0, 4691.0], [66.1, 4696.0], [66.2, 4701.0], [66.3, 4707.0], [66.4, 4712.0], [66.5, 4718.0], [66.6, 4723.0], [66.7, 4728.0], [66.8, 4735.0], [66.9, 4741.0], [67.0, 4746.0], [67.1, 4752.0], [67.2, 4759.0], [67.3, 4766.0], [67.4, 4772.0], [67.5, 4777.0], [67.6, 4783.0], [67.7, 4788.0], [67.8, 4793.0], [67.9, 4799.0], [68.0, 4804.0], [68.1, 4809.0], [68.2, 4814.0], [68.3, 4819.0], [68.4, 4824.0], [68.5, 4830.0], [68.6, 4835.0], [68.7, 4839.0], [68.8, 4845.0], [68.9, 4850.0], [69.0, 4856.0], [69.1, 4862.0], [69.2, 4868.0], [69.3, 4872.0], [69.4, 4879.0], [69.5, 4884.0], [69.6, 4889.0], [69.7, 4894.0], [69.8, 4899.0], [69.9, 4904.0], [70.0, 4910.0], [70.1, 4914.0], [70.2, 4919.0], [70.3, 4923.0], [70.4, 4928.0], [70.5, 4933.0], [70.6, 4938.0], [70.7, 4943.0], [70.8, 4948.0], [70.9, 4952.0], [71.0, 4957.0], [71.1, 4962.0], [71.2, 4967.0], [71.3, 4972.0], [71.4, 4977.0], [71.5, 4981.0], [71.6, 4985.0], [71.7, 4990.0], [71.8, 4996.0], [71.9, 5000.0], [72.0, 5005.0], [72.1, 5010.0], [72.2, 5015.0], [72.3, 5021.0], [72.4, 5026.0], [72.5, 5031.0], [72.6, 5035.0], [72.7, 5040.0], [72.8, 5046.0], [72.9, 5050.0], [73.0, 5055.0], [73.1, 5060.0], [73.2, 5066.0], [73.3, 5073.0], [73.4, 5078.0], [73.5, 5084.0], [73.6, 5089.0], [73.7, 5094.0], [73.8, 5099.0], [73.9, 5106.0], [74.0, 5112.0], [74.1, 5117.0], [74.2, 5122.0], [74.3, 5127.0], [74.4, 5132.0], [74.5, 5138.0], [74.6, 5143.0], [74.7, 5148.0], [74.8, 5155.0], [74.9, 5162.0], [75.0, 5168.0], [75.1, 5175.0], [75.2, 5180.0], [75.3, 5187.0], [75.4, 5192.0], [75.5, 5199.0], [75.6, 5206.0], [75.7, 5213.0], [75.8, 5219.0], [75.9, 5225.0], [76.0, 5231.0], [76.1, 5236.0], [76.2, 5243.0], [76.3, 5250.0], [76.4, 5257.0], [76.5, 5264.0], [76.6, 5270.0], [76.7, 5278.0], [76.8, 5285.0], [76.9, 5291.0], [77.0, 5298.0], [77.1, 5305.0], [77.2, 5311.0], [77.3, 5319.0], [77.4, 5326.0], [77.5, 5333.0], [77.6, 5339.0], [77.7, 5346.0], [77.8, 5351.0], [77.9, 5358.0], [78.0, 5366.0], [78.1, 5374.0], [78.2, 5381.0], [78.3, 5387.0], [78.4, 5393.0], [78.5, 5400.0], [78.6, 5407.0], [78.7, 5414.0], [78.8, 5422.0], [78.9, 5428.0], [79.0, 5435.0], [79.1, 5440.0], [79.2, 5447.0], [79.3, 5454.0], [79.4, 5459.0], [79.5, 5466.0], [79.6, 5472.0], [79.7, 5478.0], [79.8, 5484.0], [79.9, 5491.0], [80.0, 5495.0], [80.1, 5502.0], [80.2, 5508.0], [80.3, 5513.0], [80.4, 5518.0], [80.5, 5524.0], [80.6, 5530.0], [80.7, 5535.0], [80.8, 5542.0], [80.9, 5548.0], [81.0, 5554.0], [81.1, 5560.0], [81.2, 5565.0], [81.3, 5571.0], [81.4, 5576.0], [81.5, 5582.0], [81.6, 5587.0], [81.7, 5593.0], [81.8, 5599.0], [81.9, 5605.0], [82.0, 5611.0], [82.1, 5616.0], [82.2, 5623.0], [82.3, 5630.0], [82.4, 5637.0], [82.5, 5643.0], [82.6, 5648.0], [82.7, 5654.0], [82.8, 5659.0], [82.9, 5665.0], [83.0, 5670.0], [83.1, 5676.0], [83.2, 5682.0], [83.3, 5689.0], [83.4, 5695.0], [83.5, 5702.0], [83.6, 5706.0], [83.7, 5712.0], [83.8, 5719.0], [83.9, 5724.0], [84.0, 5730.0], [84.1, 5736.0], [84.2, 5743.0], [84.3, 5750.0], [84.4, 5757.0], [84.5, 5764.0], [84.6, 5771.0], [84.7, 5779.0], [84.8, 5785.0], [84.9, 5792.0], [85.0, 5800.0], [85.1, 5807.0], [85.2, 5815.0], [85.3, 5823.0], [85.4, 5832.0], [85.5, 5839.0], [85.6, 5847.0], [85.7, 5856.0], [85.8, 5865.0], [85.9, 5873.0], [86.0, 5881.0], [86.1, 5888.0], [86.2, 5895.0], [86.3, 5903.0], [86.4, 5912.0], [86.5, 5922.0], [86.6, 5930.0], [86.7, 5938.0], [86.8, 5945.0], [86.9, 5952.0], [87.0, 5961.0], [87.1, 5969.0], [87.2, 5978.0], [87.3, 5987.0], [87.4, 5996.0], [87.5, 6005.0], [87.6, 6015.0], [87.7, 6024.0], [87.8, 6033.0], [87.9, 6042.0], [88.0, 6053.0], [88.1, 6062.0], [88.2, 6072.0], [88.3, 6080.0], [88.4, 6089.0], [88.5, 6101.0], [88.6, 6113.0], [88.7, 6122.0], [88.8, 6135.0], [88.9, 6147.0], [89.0, 6158.0], [89.1, 6168.0], [89.2, 6179.0], [89.3, 6193.0], [89.4, 6206.0], [89.5, 6216.0], [89.6, 6228.0], [89.7, 6238.0], [89.8, 6252.0], [89.9, 6265.0], [90.0, 6276.0], [90.1, 6289.0], [90.2, 6302.0], [90.3, 6316.0], [90.4, 6333.0], [90.5, 6348.0], [90.6, 6360.0], [90.7, 6375.0], [90.8, 6392.0], [90.9, 6406.0], [91.0, 6420.0], [91.1, 6436.0], [91.2, 6448.0], [91.3, 6464.0], [91.4, 6478.0], [91.5, 6498.0], [91.6, 6514.0], [91.7, 6531.0], [91.8, 6546.0], [91.9, 6564.0], [92.0, 6582.0], [92.1, 6599.0], [92.2, 6615.0], [92.3, 6631.0], [92.4, 6646.0], [92.5, 6660.0], [92.6, 6673.0], [92.7, 6688.0], [92.8, 6709.0], [92.9, 6727.0], [93.0, 6745.0], [93.1, 6762.0], [93.2, 6778.0], [93.3, 6797.0], [93.4, 6815.0], [93.5, 6832.0], [93.6, 6854.0], [93.7, 6875.0], [93.8, 6893.0], [93.9, 6911.0], [94.0, 6939.0], [94.1, 6963.0], [94.2, 6987.0], [94.3, 7012.0], [94.4, 7041.0], [94.5, 7077.0], [94.6, 7115.0], [94.7, 7162.0], [94.8, 7216.0], [94.9, 7272.0], [95.0, 7355.0], [95.1, 7474.0], [95.2, 7623.0], [95.3, 7822.0], [95.4, 8098.0], [95.5, 8430.0], [95.6, 8750.0], [95.7, 9087.0], [95.8, 9304.0], [95.9, 9535.0], [96.0, 9698.0], [96.1, 9862.0], [96.2, 10014.0], [96.3, 10148.0], [96.4, 10259.0], [96.5, 10328.0], [96.6, 10382.0], [96.7, 10468.0], [96.8, 10544.0], [96.9, 10624.0], [97.0, 10694.0], [97.1, 10782.0], [97.2, 10854.0], [97.3, 10938.0], [97.4, 11018.0], [97.5, 11126.0], [97.6, 11238.0], [97.7, 11386.0], [97.8, 11532.0], [97.9, 11731.0], [98.0, 12111.0], [98.1, 12660.0], [98.2, 13524.0], [98.3, 15205.0], [98.4, 15921.0], [98.5, 16504.0], [98.6, 17034.0], [98.7, 17516.0], [98.8, 17934.0], [98.9, 18581.0], [99.0, 19798.0], [99.1, 21917.0], [99.2, 23368.0], [99.3, 24127.0], [99.4, 25189.0], [99.5, 26095.0], [99.6, 27012.0], [99.7, 27655.0], [99.8, 28482.0], [99.9, 29350.0], [100.0, 33953.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3226.0, "series": [{"data": [[0.0, 11.0], [100.0, 36.0], [32900.0, 1.0], [200.0, 52.0], [300.0, 78.0], [400.0, 592.0], [500.0, 1388.0], [600.0, 1867.0], [700.0, 1972.0], [800.0, 1192.0], [900.0, 1138.0], [1000.0, 1130.0], [1100.0, 1612.0], [1200.0, 2039.0], [1300.0, 2926.0], [1400.0, 3226.0], [1500.0, 2471.0], [1600.0, 1627.0], [1700.0, 1197.0], [1800.0, 764.0], [1900.0, 588.0], [2000.0, 433.0], [2100.0, 307.0], [2200.0, 562.0], [2300.0, 1105.0], [2400.0, 1663.0], [2500.0, 1585.0], [2600.0, 1507.0], [2700.0, 1511.0], [2800.0, 1657.0], [2900.0, 1844.0], [3000.0, 1880.0], [3100.0, 1435.0], [3200.0, 1154.0], [3300.0, 893.0], [3400.0, 944.0], [3500.0, 1155.0], [3600.0, 1579.0], [3700.0, 1562.0], [3800.0, 1942.0], [3900.0, 1731.0], [4000.0, 1429.0], [4100.0, 1665.0], [4200.0, 2260.0], [4300.0, 2147.0], [4400.0, 2356.0], [4500.0, 2059.0], [4600.0, 1889.0], [4800.0, 1890.0], [4700.0, 1758.0], [4900.0, 2084.0], [5000.0, 1909.0], [5100.0, 1713.0], [5200.0, 1513.0], [5300.0, 1467.0], [5400.0, 1576.0], [5500.0, 1731.0], [5600.0, 1670.0], [5700.0, 1524.0], [5800.0, 1262.0], [6000.0, 1041.0], [5900.0, 1184.0], [6100.0, 872.0], [6200.0, 826.0], [6300.0, 672.0], [6500.0, 585.0], [6600.0, 667.0], [6400.0, 664.0], [6900.0, 417.0], [6800.0, 512.0], [6700.0, 547.0], [7000.0, 318.0], [7100.0, 214.0], [7200.0, 162.0], [7300.0, 98.0], [7400.0, 86.0], [7500.0, 68.0], [7600.0, 53.0], [7900.0, 40.0], [7700.0, 49.0], [7800.0, 41.0], [8000.0, 27.0], [8100.0, 38.0], [8400.0, 35.0], [8700.0, 32.0], [8300.0, 29.0], [8200.0, 20.0], [8600.0, 29.0], [8500.0, 32.0], [9100.0, 33.0], [8900.0, 21.0], [9200.0, 56.0], [9000.0, 46.0], [8800.0, 23.0], [9400.0, 42.0], [9600.0, 64.0], [9700.0, 63.0], [9500.0, 62.0], [9300.0, 39.0], [10100.0, 80.0], [10000.0, 74.0], [10200.0, 115.0], [9800.0, 56.0], [9900.0, 69.0], [10300.0, 166.0], [10500.0, 122.0], [10400.0, 123.0], [10700.0, 110.0], [10600.0, 135.0], [10800.0, 141.0], [11000.0, 95.0], [11100.0, 85.0], [11200.0, 74.0], [10900.0, 129.0], [11300.0, 72.0], [11500.0, 56.0], [11700.0, 36.0], [11600.0, 43.0], [11400.0, 71.0], [11900.0, 32.0], [11800.0, 29.0], [12100.0, 24.0], [12000.0, 18.0], [12200.0, 19.0], [12300.0, 18.0], [12500.0, 12.0], [12600.0, 17.0], [12400.0, 21.0], [12700.0, 18.0], [13000.0, 10.0], [12800.0, 14.0], [13100.0, 13.0], [13300.0, 12.0], [13200.0, 9.0], [12900.0, 6.0], [13400.0, 7.0], [13500.0, 12.0], [13800.0, 7.0], [13700.0, 3.0], [13600.0, 7.0], [14300.0, 6.0], [13900.0, 10.0], [14100.0, 7.0], [14200.0, 5.0], [14000.0, 7.0], [14400.0, 6.0], [14600.0, 6.0], [14800.0, 5.0], [14700.0, 5.0], [14500.0, 1.0], [14900.0, 7.0], [15200.0, 10.0], [15300.0, 9.0], [15100.0, 2.0], [15000.0, 8.0], [15400.0, 9.0], [15600.0, 20.0], [15500.0, 7.0], [15800.0, 23.0], [15700.0, 19.0], [15900.0, 14.0], [16000.0, 16.0], [16200.0, 19.0], [16100.0, 15.0], [16300.0, 17.0], [17200.0, 17.0], [16800.0, 28.0], [16600.0, 18.0], [16400.0, 22.0], [17000.0, 22.0], [17400.0, 23.0], [17600.0, 31.0], [17800.0, 17.0], [18000.0, 20.0], [18400.0, 11.0], [18200.0, 14.0], [18600.0, 12.0], [19000.0, 8.0], [19200.0, 1.0], [18800.0, 8.0], [19400.0, 9.0], [19800.0, 4.0], [20200.0, 7.0], [19600.0, 3.0], [20000.0, 4.0], [20400.0, 3.0], [20800.0, 5.0], [20600.0, 5.0], [21200.0, 5.0], [21000.0, 5.0], [21400.0, 2.0], [22400.0, 6.0], [21600.0, 2.0], [21800.0, 4.0], [22000.0, 4.0], [22200.0, 3.0], [22600.0, 3.0], [22800.0, 6.0], [23200.0, 11.0], [23000.0, 11.0], [23400.0, 15.0], [23600.0, 16.0], [23800.0, 18.0], [24000.0, 10.0], [24200.0, 11.0], [24400.0, 8.0], [25400.0, 12.0], [24600.0, 7.0], [24800.0, 7.0], [25200.0, 12.0], [25000.0, 6.0], [25600.0, 10.0], [26000.0, 9.0], [26200.0, 15.0], [26600.0, 11.0], [25800.0, 14.0], [26400.0, 8.0], [26800.0, 8.0], [27000.0, 15.0], [27200.0, 14.0], [27600.0, 15.0], [27400.0, 19.0], [28000.0, 3.0], [27800.0, 9.0], [28400.0, 18.0], [28600.0, 18.0], [28200.0, 14.0], [29200.0, 8.0], [29000.0, 14.0], [28800.0, 11.0], [29400.0, 9.0], [29600.0, 4.0], [29800.0, 8.0], [30000.0, 3.0], [30400.0, 3.0], [30200.0, 4.0], [30600.0, 3.0], [31000.0, 2.0], [31200.0, 2.0], [30800.0, 5.0], [31400.0, 1.0], [32200.0, 1.0], [31800.0, 1.0], [32000.0, 1.0], [32400.0, 3.0], [33100.0, 1.0], [33900.0, 1.0], [33500.0, 1.0], [16500.0, 7.0], [16700.0, 21.0], [16900.0, 16.0], [17100.0, 22.0], [17300.0, 23.0], [17500.0, 24.0], [17700.0, 26.0], [17900.0, 19.0], [18300.0, 14.0], [18100.0, 19.0], [18700.0, 12.0], [18900.0, 13.0], [18500.0, 16.0], [19100.0, 4.0], [19300.0, 8.0], [19700.0, 8.0], [19500.0, 7.0], [19900.0, 8.0], [20300.0, 4.0], [20100.0, 1.0], [21100.0, 5.0], [20700.0, 6.0], [20500.0, 6.0], [20900.0, 7.0], [21300.0, 5.0], [21500.0, 3.0], [21700.0, 5.0], [21900.0, 6.0], [22100.0, 6.0], [22300.0, 5.0], [22500.0, 4.0], [23500.0, 14.0], [23300.0, 19.0], [22900.0, 10.0], [22700.0, 6.0], [23100.0, 7.0], [23700.0, 17.0], [23900.0, 5.0], [24100.0, 12.0], [24300.0, 10.0], [24500.0, 12.0], [24700.0, 9.0], [25100.0, 13.0], [24900.0, 7.0], [25300.0, 10.0], [25500.0, 13.0], [25900.0, 10.0], [26100.0, 19.0], [26300.0, 10.0], [26500.0, 11.0], [25700.0, 10.0], [26700.0, 7.0], [26900.0, 10.0], [27100.0, 10.0], [27300.0, 12.0], [27500.0, 22.0], [27700.0, 18.0], [27900.0, 11.0], [28300.0, 12.0], [28100.0, 12.0], [28500.0, 8.0], [28700.0, 16.0], [29100.0, 11.0], [29300.0, 9.0], [29500.0, 7.0], [28900.0, 7.0], [29700.0, 11.0], [29900.0, 3.0], [30300.0, 4.0], [30700.0, 1.0], [30500.0, 1.0], [30100.0, 4.0], [31700.0, 1.0], [31100.0, 1.0], [30900.0, 4.0], [32100.0, 2.0], [32500.0, 1.0], [33000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 33900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 783.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 80705.0, "series": [{"data": [[0.0, 783.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 18512.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 80705.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 491.9789904376613, "minX": 1.66173438E12, "maxY": 500.0, "series": [{"data": [[1.6617348E12, 500.0], [1.6617345E12, 500.0], [1.66173516E12, 491.9789904376613], [1.66173486E12, 500.0], [1.66173504E12, 500.0], [1.66173474E12, 500.0], [1.6617351E12, 500.0], [1.66173444E12, 500.0], [1.66173498E12, 500.0], [1.66173468E12, 500.0], [1.66173438E12, 494.49570993634023], [1.66173456E12, 500.0], [1.66173492E12, 500.0], [1.66173462E12, 500.0]], "isOverall": false, "label": "Thread Group Create Type", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66173516E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 56.4, "minX": 5.0, "maxY": 4140.0660510857215, "series": [{"data": [[5.0, 56.4], [7.0, 154.5], [9.0, 98.5], [10.0, 91.0], [11.0, 134.0], [12.0, 63.0], [13.0, 195.0], [14.0, 177.0], [17.0, 142.66666666666666], [19.0, 184.0], [20.0, 124.0], [21.0, 199.0], [22.0, 104.0], [25.0, 159.5], [26.0, 212.0], [27.0, 116.5], [28.0, 246.0], [29.0, 254.0], [31.0, 169.0], [33.0, 180.5], [36.0, 196.33333333333334], [39.0, 138.0], [38.0, 213.0], [41.0, 193.0], [40.0, 200.0], [42.0, 79.0], [46.0, 213.6], [49.0, 262.0], [48.0, 254.0], [51.0, 263.0], [50.0, 219.0], [53.0, 246.0], [56.0, 250.75], [58.0, 249.0], [61.0, 232.0], [60.0, 241.5], [63.0, 227.0], [62.0, 302.0], [67.0, 260.0], [66.0, 281.0], [65.0, 288.0], [68.0, 309.0], [74.0, 177.0], [75.0, 273.0], [73.0, 303.0], [72.0, 267.75], [76.0, 266.3333333333333], [78.0, 358.0], [77.0, 287.0], [82.0, 234.0], [81.0, 368.0], [80.0, 321.0], [87.0, 182.5], [86.0, 323.0], [85.0, 311.3333333333333], [91.0, 174.5], [89.0, 289.0], [88.0, 353.0], [93.0, 258.5], [94.0, 249.66666666666666], [95.0, 160.0], [92.0, 344.25], [96.0, 279.75], [97.0, 302.5], [99.0, 306.0], [100.0, 243.5], [101.0, 295.0], [103.0, 276.8], [102.0, 358.5], [107.0, 347.0], [106.0, 372.0], [105.0, 369.0], [104.0, 407.0], [111.0, 369.0], [110.0, 363.0], [109.0, 367.0], [108.0, 380.0], [114.0, 373.0], [115.0, 381.0], [112.0, 351.0], [117.0, 385.5], [119.0, 383.0], [116.0, 398.0], [121.0, 300.0], [122.0, 365.6], [123.0, 373.0], [120.0, 394.0], [127.0, 404.3333333333333], [124.0, 355.0], [129.0, 369.5], [135.0, 392.0], [134.0, 385.0], [132.0, 374.6666666666667], [131.0, 411.0], [128.0, 370.0], [143.0, 388.0], [142.0, 403.5], [141.0, 397.0], [140.0, 408.0], [139.0, 422.0], [138.0, 406.0], [137.0, 407.0], [136.0, 413.0], [150.0, 436.0], [149.0, 425.0], [148.0, 416.0], [147.0, 413.0], [146.0, 396.0], [145.0, 405.5], [144.0, 422.3333333333333], [158.0, 396.0], [159.0, 413.3333333333333], [157.0, 442.0], [156.0, 424.0], [155.0, 440.0], [154.0, 438.0], [152.0, 428.0], [166.0, 419.0], [163.0, 446.5], [162.0, 434.0], [161.0, 404.0], [160.0, 436.0], [173.0, 467.5], [175.0, 441.0], [174.0, 403.0], [172.0, 425.6666666666667], [170.0, 413.5], [169.0, 412.0], [168.0, 431.3333333333333], [181.0, 441.0], [180.0, 439.0], [177.0, 414.0], [176.0, 450.0], [191.0, 442.0], [190.0, 450.0], [189.0, 415.5], [187.0, 430.0], [186.0, 436.0], [185.0, 435.0], [184.0, 446.0], [199.0, 428.0], [198.0, 431.0], [197.0, 485.0], [196.0, 439.0], [195.0, 419.0], [194.0, 422.0], [193.0, 422.0], [192.0, 447.0], [205.0, 470.5], [207.0, 493.0], [206.0, 442.6666666666667], [204.0, 440.5], [202.0, 450.3333333333333], [200.0, 426.0], [215.0, 467.0], [214.0, 445.0], [212.0, 431.0], [211.0, 446.0], [210.0, 444.0], [209.0, 439.0], [208.0, 428.0], [219.0, 430.5], [220.0, 489.6666666666667], [223.0, 442.0], [222.0, 459.0], [221.0, 427.0], [218.0, 442.6666666666667], [216.0, 431.0], [224.0, 486.0], [231.0, 451.3333333333333], [230.0, 464.5], [229.0, 458.0], [228.0, 449.0], [227.0, 456.5], [225.0, 442.0], [235.0, 520.0], [239.0, 494.0], [238.0, 452.5], [237.0, 439.6666666666667], [234.0, 481.0], [232.0, 502.0], [247.0, 479.0], [246.0, 457.5], [244.0, 479.75], [241.0, 439.0], [240.0, 435.0], [255.0, 441.0], [254.0, 520.5], [252.0, 444.0], [251.0, 540.5], [250.0, 505.5], [249.0, 461.0], [248.0, 448.5], [271.0, 458.0], [259.0, 570.6], [263.0, 441.0], [257.0, 455.0], [256.0, 462.0], [262.0, 526.0], [261.0, 434.0], [260.0, 434.0], [265.0, 571.3333333333334], [270.0, 542.0], [269.0, 439.5], [268.0, 444.0], [267.0, 443.0], [266.0, 519.0], [264.0, 437.0], [286.0, 520.6666666666666], [287.0, 528.0], [285.0, 506.0], [284.0, 545.5], [283.0, 557.0], [282.0, 498.0], [281.0, 505.5], [280.0, 499.5], [278.0, 512.0], [272.0, 435.0], [275.0, 424.0], [274.0, 519.3333333333334], [277.0, 450.0], [276.0, 530.0], [301.0, 492.5], [293.0, 742.0], [292.0, 494.0], [294.0, 533.5], [302.0, 580.1428571428571], [300.0, 550.5], [291.0, 519.0], [290.0, 518.5], [289.0, 494.5], [288.0, 518.0], [299.0, 501.5], [298.0, 500.3333333333333], [297.0, 531.0], [296.0, 514.0], [295.0, 528.0], [317.0, 483.5], [308.0, 642.0], [309.0, 516.6666666666666], [310.0, 576.0], [318.0, 500.0], [316.0, 493.0], [315.0, 486.0], [314.0, 500.0], [313.0, 491.0], [311.0, 501.0], [304.0, 502.75], [306.0, 506.0], [305.0, 497.0], [307.0, 540.0], [334.0, 487.0], [335.0, 478.0], [333.0, 469.0], [332.0, 473.0], [331.0, 486.0], [330.0, 484.0], [329.0, 490.5], [328.0, 485.0], [327.0, 481.0], [321.0, 499.2], [323.0, 501.6666666666667], [322.0, 494.0], [325.0, 501.0], [324.0, 484.5], [350.0, 552.8], [339.0, 661.0], [341.0, 605.3333333333334], [343.0, 510.0], [336.0, 486.0], [338.0, 505.6666666666667], [337.0, 489.5], [342.0, 509.5], [351.0, 654.5], [349.0, 481.0], [348.0, 477.6666666666667], [346.0, 478.0], [345.0, 503.0], [344.0, 477.5], [365.0, 551.0], [357.0, 732.0], [356.0, 491.0], [358.0, 485.0], [359.0, 662.5], [366.0, 543.0], [364.0, 478.5], [355.0, 483.5], [354.0, 497.3333333333333], [352.0, 479.0], [363.0, 474.0], [362.0, 512.5], [361.0, 466.5], [360.0, 485.6666666666667], [383.0, 519.0], [377.0, 636.0], [382.0, 524.6666666666666], [381.0, 499.5], [380.0, 508.3333333333333], [371.0, 483.6666666666667], [370.0, 517.0], [369.0, 517.5], [368.0, 480.0], [379.0, 465.0], [378.0, 467.0], [376.0, 471.0], [375.0, 477.5], [374.0, 477.5], [373.0, 505.8], [398.0, 512.0], [399.0, 495.6], [397.0, 502.0], [387.0, 521.0], [386.0, 494.5], [385.0, 475.0], [384.0, 463.0], [395.0, 509.25], [394.0, 511.0], [393.0, 474.0], [392.0, 500.0], [391.0, 468.0], [390.0, 492.8333333333333], [389.0, 475.0], [388.0, 476.0], [414.0, 559.0909090909091], [415.0, 510.8], [413.0, 521.3333333333334], [412.0, 513.0], [411.0, 522.3333333333334], [410.0, 497.0], [409.0, 507.0], [408.0, 500.0], [407.0, 498.0], [400.0, 487.0], [403.0, 522.5], [402.0, 484.6666666666667], [406.0, 506.5], [405.0, 510.8333333333333], [404.0, 507.0], [428.0, 504.57142857142856], [430.0, 528.5], [429.0, 645.0], [431.0, 505.3333333333333], [425.0, 511.0], [424.0, 535.0], [423.0, 520.5], [416.0, 492.0], [419.0, 524.7777777777777], [418.0, 511.0], [422.0, 497.5], [420.0, 499.0], [445.0, 539.0], [432.0, 642.0], [434.0, 548.9166666666666], [433.0, 517.0], [437.0, 682.6666666666666], [436.0, 520.0], [439.0, 516.0], [438.0, 528.1428571428572], [440.0, 637.75], [441.0, 528.6666666666666], [447.0, 539.2], [446.0, 544.5714285714286], [444.0, 536.0909090909091], [435.0, 522.25], [443.0, 553.0], [442.0, 540.4545454545455], [462.0, 493.6666666666667], [463.0, 475.5], [461.0, 496.0], [460.0, 495.5], [459.0, 509.5], [458.0, 510.0714285714286], [457.0, 530.4], [456.0, 533.0], [455.0, 535.0], [448.0, 533.0], [451.0, 530.5], [450.0, 541.4374999999999], [454.0, 537.5], [453.0, 533.25], [452.0, 556.4], [478.0, 500.31250000000006], [479.0, 534.6666666666666], [477.0, 482.3333333333333], [476.0, 495.1111111111111], [475.0, 509.5833333333333], [474.0, 520.4], [473.0, 510.3333333333333], [472.0, 504.2], [471.0, 505.89285714285717], [465.0, 501.3333333333333], [464.0, 492.5], [467.0, 496.2857142857143], [466.0, 499.53333333333336], [470.0, 496.0], [469.0, 504.2], [468.0, 502.3333333333333], [494.0, 506.0], [480.0, 537.9999999999999], [481.0, 521.2857142857142], [483.0, 524.3636363636364], [482.0, 519.75], [487.0, 507.15217391304344], [486.0, 513.0000000000001], [485.0, 510.58620689655174], [484.0, 505.5], [495.0, 543.8888888888889], [493.0, 514.6714285714286], [492.0, 488.90476190476187], [491.0, 484.62499999999994], [490.0, 503.7826086956522], [489.0, 503.1886792452831], [488.0, 510.125], [500.0, 4140.0660510857215], [499.0, 565.786885245901], [498.0, 562.6981132075472], [497.0, 549.2857142857143], [496.0, 538.2]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[498.05639999999835, 4075.4481699999274]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1090.6, "minX": 1.66173438E12, "maxY": 90270.8, "series": [{"data": [[1.6617348E12, 4029.9], [1.6617345E12, 2023.5], [1.66173516E12, 13776.266666666666], [1.66173486E12, 4409.266666666666], [1.66173504E12, 4466.266666666666], [1.66173474E12, 3574.5333333333333], [1.6617351E12, 7675.366666666667], [1.66173444E12, 1090.6], [1.66173498E12, 5656.933333333333], [1.66173468E12, 3255.3333333333335], [1.66173438E12, 2288.233333333333], [1.66173456E12, 3394.6666666666665], [1.66173492E12, 4544.166666666667], [1.66173462E12, 3148.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6617348E12, 26406.45], [1.6617345E12, 13259.25], [1.66173516E12, 90270.8], [1.66173486E12, 28892.3], [1.66173504E12, 29265.8], [1.66173474E12, 23422.6], [1.6617351E12, 50293.85], [1.66173444E12, 7146.3], [1.66173498E12, 37067.8], [1.66173468E12, 21331.0], [1.66173438E12, 14993.95], [1.66173456E12, 22244.0], [1.66173492E12, 29776.25], [1.66173462E12, 20629.65]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66173516E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1111.1630194924544, "minX": 1.66173438E12, "maxY": 16516.931475029043, "series": [{"data": [[1.6617348E12, 4739.76441929911], [1.6617345E12, 11130.676995305166], [1.66173516E12, 1111.1630194924544], [1.66173486E12, 4323.073829359365], [1.66173504E12, 3963.160380034036], [1.66173474E12, 5278.951452870317], [1.6617351E12, 2668.038864592779], [1.66173444E12, 16516.931475029043], [1.66173498E12, 3397.862516793542], [1.66173468E12, 5857.349805447485], [1.66173438E12, 5170.531967893714], [1.66173456E12, 5471.714738805969], [1.66173492E12, 4197.910940766555], [1.66173462E12, 6125.764836049084]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66173516E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1111.162789628546, "minX": 1.66173438E12, "maxY": 16516.929732868764, "series": [{"data": [[1.6617348E12, 4739.764262140528], [1.6617345E12, 11130.676369327066], [1.66173516E12, 1111.162789628546], [1.66173486E12, 4323.073829359365], [1.66173504E12, 3963.159954622797], [1.66173474E12, 5278.951275690984], [1.6617351E12, 2668.038452017489], [1.66173444E12, 16516.929732868764], [1.66173498E12, 3397.86218092252], [1.66173468E12, 5857.349610894961], [1.66173438E12, 5170.530307223924], [1.66173456E12, 5471.7145522388055], [1.66173492E12, 4197.909965156764], [1.66173462E12, 6125.7642325487905]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66173516E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0015171018756895932, "minX": 1.66173438E12, "maxY": 0.11614401858304321, "series": [{"data": [[1.6617348E12, 0.016187333019016235], [1.6617345E12, 0.06384976525821615], [1.66173516E12, 0.0015171018756895932], [1.66173486E12, 0.017092789428325112], [1.66173504E12, 0.01191151446398185], [1.66173474E12, 0.01824946846208358], [1.6617351E12, 0.03152075253733826], [1.66173444E12, 0.11614401858304321], [1.66173498E12, 0.01410658307210031], [1.66173468E12, 0.024902723735408527], [1.66173438E12, 0.0669803487406589], [1.66173456E12, 0.019776119402985137], [1.66173492E12, 0.021045296167247395], [1.66173462E12, 0.021927177630255493]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66173516E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 38.0, "minX": 1.66173438E12, "maxY": 33953.0, "series": [{"data": [[1.6617348E12, 6297.0], [1.6617345E12, 33535.0], [1.66173516E12, 1999.0], [1.66173486E12, 5815.0], [1.66173504E12, 11974.0], [1.66173474E12, 6972.0], [1.6617351E12, 12554.0], [1.66173444E12, 33953.0], [1.66173498E12, 4854.0], [1.66173468E12, 7493.0], [1.66173438E12, 14350.0], [1.66173456E12, 8100.0], [1.66173492E12, 5594.0], [1.66173462E12, 8694.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6617348E12, 5408.6], [1.6617345E12, 25947.4], [1.66173516E12, 1484.0], [1.66173486E12, 5031.7], [1.66173504E12, 8555.099999999999], [1.66173474E12, 5869.0], [1.6617351E12, 2777.0], [1.66173444E12, 26546.0], [1.66173498E12, 3978.0], [1.66173468E12, 6466.0], [1.66173438E12, 6254.2], [1.66173456E12, 6489.0], [1.66173492E12, 4839.0], [1.66173462E12, 7094.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6617348E12, 5898.519999999998], [1.6617345E12, 29462.999999999996], [1.66173516E12, 1628.0], [1.66173486E12, 5397.849999999999], [1.66173504E12, 11123.470000000001], [1.66173474E12, 6237.650000000001], [1.6617351E12, 11152.599999999991], [1.66173444E12, 31061.87], [1.66173498E12, 4338.67], [1.66173468E12, 6889.950000000001], [1.66173438E12, 11142.44], [1.66173456E12, 7146.39], [1.66173492E12, 5252.719999999999], [1.66173462E12, 7694.519999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6617348E12, 5594.0], [1.6617345E12, 27750.8], [1.66173516E12, 1536.0], [1.66173486E12, 5162.849999999999], [1.66173504E12, 10487.0], [1.66173474E12, 5989.75], [1.6617351E12, 7049.0], [1.66173444E12, 28820.199999999997], [1.66173498E12, 4102.0], [1.66173468E12, 6603.95], [1.66173438E12, 6649.799999999998], [1.66173456E12, 6740.9], [1.66173492E12, 4996.2], [1.66173462E12, 7267.4]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6617348E12, 3904.0], [1.6617345E12, 4061.0], [1.66173516E12, 38.0], [1.66173486E12, 3403.0], [1.66173504E12, 2522.0], [1.66173474E12, 4109.0], [1.6617351E12, 1335.0], [1.66173444E12, 8799.0], [1.66173498E12, 2453.0], [1.66173468E12, 4212.0], [1.66173438E12, 114.0], [1.66173456E12, 3847.0], [1.66173492E12, 3004.0], [1.66173462E12, 4461.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6617348E12, 4622.0], [1.6617345E12, 7310.0], [1.66173516E12, 1139.0], [1.66173486E12, 4199.0], [1.66173504E12, 3102.0], [1.66173474E12, 5383.5], [1.6617351E12, 2372.0], [1.66173444E12, 16110.0], [1.66173498E12, 3530.0], [1.66173468E12, 5997.0], [1.66173438E12, 5198.0], [1.66173456E12, 5591.5], [1.66173492E12, 4265.0], [1.66173462E12, 6424.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66173516E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 164.5, "minX": 4.0, "maxY": 29507.5, "series": [{"data": [[4.0, 164.5], [6.0, 26499.5], [7.0, 21112.0], [8.0, 19871.5], [9.0, 18701.0], [10.0, 20296.0], [11.0, 13976.0], [12.0, 13047.5], [13.0, 16957.0], [14.0, 12257.0], [15.0, 27041.0], [16.0, 18259.0], [17.0, 29507.5], [18.0, 21543.0], [19.0, 17498.0], [20.0, 27717.5], [21.0, 29011.5], [22.0, 25875.5], [23.0, 18693.0], [24.0, 27718.0], [25.0, 22656.5], [27.0, 16181.0], [28.0, 28420.0], [29.0, 23444.0], [30.0, 15584.0], [33.0, 16489.0], [32.0, 26456.0], [35.0, 10979.0], [37.0, 22548.0], [36.0, 27476.0], [39.0, 10728.0], [41.0, 10490.5], [40.0, 10696.0], [42.0, 14739.5], [43.0, 11558.0], [44.0, 10753.5], [45.0, 10680.0], [47.0, 16315.0], [46.0, 14388.5], [48.0, 10979.5], [49.0, 10265.5], [50.0, 9418.0], [51.0, 10475.0], [53.0, 17285.0], [52.0, 17211.5], [55.0, 10876.5], [54.0, 23742.0], [56.0, 9843.5], [59.0, 10474.5], [58.0, 4249.5], [60.0, 6738.5], [61.0, 6893.0], [63.0, 4046.5], [62.0, 10675.0], [66.0, 6336.0], [65.0, 6687.0], [64.0, 6516.5], [71.0, 6591.5], [70.0, 5855.0], [69.0, 6570.0], [68.0, 6767.5], [75.0, 6485.0], [74.0, 6568.0], [72.0, 6154.5], [73.0, 6360.0], [76.0, 6158.0], [77.0, 5792.0], [79.0, 6273.0], [78.0, 6046.5], [83.0, 6208.0], [80.0, 6076.5], [82.0, 5679.0], [81.0, 5728.0], [87.0, 5659.0], [84.0, 5653.5], [86.0, 5804.0], [85.0, 5862.5], [91.0, 5282.0], [89.0, 5507.5], [88.0, 5750.5], [90.0, 5294.5], [92.0, 5576.0], [94.0, 5401.5], [95.0, 5583.0], [93.0, 5323.5], [97.0, 5147.0], [98.0, 5234.0], [99.0, 5236.0], [96.0, 5482.5], [103.0, 5103.5], [101.0, 4885.0], [100.0, 4822.0], [102.0, 4999.5], [106.0, 4574.0], [104.0, 4892.5], [107.0, 4975.0], [105.0, 4522.5], [111.0, 4561.0], [108.0, 4716.0], [109.0, 4856.0], [110.0, 4785.0], [115.0, 4376.5], [113.0, 4280.0], [114.0, 4562.5], [112.0, 4734.0], [118.0, 4324.0], [119.0, 4330.0], [117.0, 4410.0], [116.0, 4481.5], [120.0, 4421.0], [121.0, 4329.5], [123.0, 4325.5], [122.0, 4251.5], [125.0, 4212.0], [124.0, 4210.5], [127.0, 4037.0], [126.0, 3904.0], [133.0, 3949.0], [131.0, 3871.5], [130.0, 3880.0], [132.0, 3986.5], [128.0, 3909.5], [135.0, 3622.0], [129.0, 3811.0], [134.0, 3821.0], [138.0, 3818.5], [137.0, 3754.5], [136.0, 3595.5], [143.0, 4017.0], [140.0, 3824.5], [139.0, 3477.0], [141.0, 3836.5], [142.0, 3681.0], [149.0, 3508.5], [151.0, 3507.0], [148.0, 3726.0], [147.0, 3636.0], [145.0, 2852.0], [144.0, 2987.5], [154.0, 3139.0], [156.0, 3301.0], [159.0, 3051.0], [157.0, 3123.0], [158.0, 3141.0], [155.0, 3141.0], [162.0, 3015.5], [161.0, 3382.5], [167.0, 2921.0], [166.0, 2909.5], [163.0, 2983.0], [164.0, 2959.0], [165.0, 3106.0], [160.0, 3124.0], [173.0, 3513.0], [170.0, 3130.0], [174.0, 2897.5], [171.0, 2907.0], [172.0, 2708.5], [168.0, 3140.0], [169.0, 3073.5], [175.0, 3065.0], [183.0, 2849.0], [176.0, 2928.5], [177.0, 3194.5], [180.0, 2769.5], [182.0, 2985.5], [178.0, 2999.5], [185.0, 2729.0], [186.0, 2700.0], [187.0, 2753.0], [190.0, 2635.5], [184.0, 2847.0], [188.0, 2678.0], [191.0, 2526.0], [192.0, 2589.5], [195.0, 4192.5], [199.0, 2480.0], [196.0, 2503.0], [193.0, 2487.0], [205.0, 2548.0], [203.0, 2467.0], [204.0, 2492.5], [206.0, 2529.5], [202.0, 2469.0], [211.0, 2479.0], [213.0, 2432.0], [215.0, 2479.0], [208.0, 2427.0], [210.0, 2353.0], [217.0, 2558.0], [221.0, 2343.0], [220.0, 2326.0], [224.0, 2313.0], [238.0, 2205.5], [240.0, 2072.0], [251.0, 2060.0], [270.0, 1984.0], [263.0, 1875.0], [259.0, 1872.0], [273.0, 1878.0], [279.0, 1860.0], [284.0, 1735.0], [278.0, 1680.5], [296.0, 1731.0], [304.0, 1694.0], [305.0, 1620.0], [313.0, 1709.0], [319.0, 1614.0], [312.0, 1516.0], [307.0, 1509.0], [315.0, 1535.0], [316.0, 1516.0], [334.0, 1527.5], [330.0, 1470.0], [324.0, 1452.0], [332.0, 1506.0], [331.0, 1358.0], [339.0, 1504.0], [347.0, 1549.0], [340.0, 1492.0], [346.0, 1456.0], [360.0, 1376.5], [365.0, 1335.0], [363.0, 1468.0], [374.0, 1397.0], [370.0, 1333.0], [377.0, 1490.0], [369.0, 1422.0], [376.0, 1326.5], [392.0, 1314.5], [386.0, 1317.5], [387.0, 1288.0], [398.0, 1265.5], [408.0, 1224.0], [420.0, 1225.5], [445.0, 1152.0], [436.0, 1117.5], [441.0, 1125.0], [478.0, 1126.0], [492.0, 1040.0], [508.0, 970.5], [529.0, 938.0], [588.0, 917.0], [615.0, 807.0], [633.0, 802.0], [673.0, 761.0], [719.0, 711.0], [723.0, 660.0], [792.0, 687.0], [827.0, 622.0], [885.0, 487.0], [931.0, 542.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 931.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 164.5, "minX": 4.0, "maxY": 29507.5, "series": [{"data": [[4.0, 164.5], [6.0, 26499.5], [7.0, 21112.0], [8.0, 19871.5], [9.0, 18701.0], [10.0, 20296.0], [11.0, 13976.0], [12.0, 13047.5], [13.0, 16957.0], [14.0, 12257.0], [15.0, 27041.0], [16.0, 18259.0], [17.0, 29507.5], [18.0, 21543.0], [19.0, 17498.0], [20.0, 27717.5], [21.0, 29011.5], [22.0, 25875.5], [23.0, 18693.0], [24.0, 27718.0], [25.0, 22656.5], [27.0, 16181.0], [28.0, 28420.0], [29.0, 23444.0], [30.0, 15584.0], [33.0, 16489.0], [32.0, 26456.0], [35.0, 10979.0], [37.0, 22548.0], [36.0, 27476.0], [39.0, 10728.0], [41.0, 10490.5], [40.0, 10696.0], [42.0, 14739.5], [43.0, 11558.0], [44.0, 10753.5], [45.0, 10680.0], [47.0, 16315.0], [46.0, 14388.5], [48.0, 10979.5], [49.0, 10265.5], [50.0, 9418.0], [51.0, 10475.0], [53.0, 17285.0], [52.0, 17211.5], [55.0, 10876.5], [54.0, 23742.0], [56.0, 9843.5], [59.0, 10474.5], [58.0, 4249.5], [60.0, 6738.5], [61.0, 6893.0], [63.0, 4046.5], [62.0, 10675.0], [66.0, 6336.0], [65.0, 6687.0], [64.0, 6516.5], [71.0, 6591.5], [70.0, 5855.0], [69.0, 6570.0], [68.0, 6767.5], [75.0, 6485.0], [74.0, 6568.0], [72.0, 6154.5], [73.0, 6360.0], [76.0, 6158.0], [77.0, 5792.0], [79.0, 6273.0], [78.0, 6046.5], [83.0, 6208.0], [80.0, 6076.5], [82.0, 5679.0], [81.0, 5728.0], [87.0, 5659.0], [84.0, 5653.5], [86.0, 5804.0], [85.0, 5862.5], [91.0, 5282.0], [89.0, 5507.5], [88.0, 5750.5], [90.0, 5294.5], [92.0, 5576.0], [94.0, 5401.5], [95.0, 5583.0], [93.0, 5323.5], [97.0, 5147.0], [98.0, 5234.0], [99.0, 5236.0], [96.0, 5482.5], [103.0, 5103.5], [101.0, 4885.0], [100.0, 4822.0], [102.0, 4999.5], [106.0, 4574.0], [104.0, 4892.5], [107.0, 4975.0], [105.0, 4522.5], [111.0, 4561.0], [108.0, 4716.0], [109.0, 4856.0], [110.0, 4785.0], [115.0, 4376.5], [113.0, 4280.0], [114.0, 4562.5], [112.0, 4734.0], [118.0, 4324.0], [119.0, 4330.0], [117.0, 4410.0], [116.0, 4481.5], [120.0, 4421.0], [121.0, 4329.5], [123.0, 4325.5], [122.0, 4251.5], [125.0, 4212.0], [124.0, 4210.5], [127.0, 4037.0], [126.0, 3904.0], [133.0, 3949.0], [131.0, 3871.5], [130.0, 3880.0], [132.0, 3986.5], [128.0, 3909.5], [135.0, 3622.0], [129.0, 3811.0], [134.0, 3821.0], [138.0, 3818.5], [137.0, 3754.5], [136.0, 3595.5], [143.0, 4017.0], [140.0, 3824.5], [139.0, 3477.0], [141.0, 3836.5], [142.0, 3681.0], [149.0, 3508.5], [151.0, 3507.0], [148.0, 3726.0], [147.0, 3636.0], [145.0, 2852.0], [144.0, 2987.5], [154.0, 3139.0], [156.0, 3301.0], [159.0, 3051.0], [157.0, 3123.0], [158.0, 3141.0], [155.0, 3141.0], [162.0, 3015.5], [161.0, 3382.5], [167.0, 2921.0], [166.0, 2909.5], [163.0, 2983.0], [164.0, 2959.0], [165.0, 3106.0], [160.0, 3124.0], [173.0, 3513.0], [170.0, 3130.0], [174.0, 2897.5], [171.0, 2907.0], [172.0, 2708.5], [168.0, 3140.0], [169.0, 3073.5], [175.0, 3065.0], [183.0, 2849.0], [176.0, 2928.5], [177.0, 3194.5], [180.0, 2769.5], [182.0, 2985.5], [178.0, 2999.5], [185.0, 2729.0], [186.0, 2700.0], [187.0, 2753.0], [190.0, 2635.5], [184.0, 2847.0], [188.0, 2678.0], [191.0, 2526.0], [192.0, 2589.5], [195.0, 4192.5], [199.0, 2480.0], [196.0, 2503.0], [193.0, 2487.0], [205.0, 2548.0], [203.0, 2467.0], [204.0, 2492.5], [206.0, 2529.5], [202.0, 2469.0], [211.0, 2479.0], [213.0, 2432.0], [215.0, 2479.0], [208.0, 2427.0], [210.0, 2353.0], [217.0, 2558.0], [221.0, 2343.0], [220.0, 2326.0], [224.0, 2313.0], [238.0, 2205.5], [240.0, 2072.0], [251.0, 2060.0], [270.0, 1984.0], [263.0, 1875.0], [259.0, 1872.0], [273.0, 1878.0], [279.0, 1860.0], [284.0, 1735.0], [278.0, 1680.5], [296.0, 1731.0], [304.0, 1694.0], [305.0, 1620.0], [313.0, 1709.0], [319.0, 1614.0], [312.0, 1516.0], [307.0, 1509.0], [315.0, 1535.0], [316.0, 1516.0], [334.0, 1527.5], [330.0, 1470.0], [324.0, 1452.0], [332.0, 1506.0], [331.0, 1358.0], [339.0, 1504.0], [347.0, 1549.0], [340.0, 1492.0], [346.0, 1456.0], [360.0, 1376.5], [365.0, 1335.0], [363.0, 1468.0], [374.0, 1397.0], [370.0, 1333.0], [377.0, 1490.0], [369.0, 1422.0], [376.0, 1326.5], [392.0, 1314.5], [386.0, 1317.5], [387.0, 1288.0], [398.0, 1265.5], [408.0, 1224.0], [420.0, 1225.5], [445.0, 1152.0], [436.0, 1117.5], [441.0, 1125.0], [478.0, 1126.0], [492.0, 1040.0], [508.0, 970.5], [529.0, 938.0], [588.0, 917.0], [615.0, 807.0], [633.0, 802.0], [673.0, 761.0], [719.0, 711.0], [723.0, 660.0], [792.0, 687.0], [827.0, 622.0], [885.0, 487.0], [931.0, 542.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 931.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 28.7, "minX": 1.66173438E12, "maxY": 354.2, "series": [{"data": [[1.6617348E12, 106.05], [1.6617345E12, 53.25], [1.66173516E12, 354.2], [1.66173486E12, 116.03333333333333], [1.66173504E12, 117.53333333333333], [1.66173474E12, 94.06666666666666], [1.6617351E12, 201.98333333333332], [1.66173444E12, 28.7], [1.66173498E12, 148.86666666666667], [1.66173468E12, 85.68333333333334], [1.66173438E12, 68.55], [1.66173456E12, 89.33333333333333], [1.66173492E12, 119.58333333333333], [1.66173462E12, 82.83333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66173516E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 28.7, "minX": 1.66173438E12, "maxY": 362.53333333333336, "series": [{"data": [[1.6617348E12, 106.05], [1.6617345E12, 53.25], [1.66173516E12, 362.53333333333336], [1.66173486E12, 116.03333333333333], [1.66173504E12, 117.53333333333333], [1.66173474E12, 94.06666666666666], [1.6617351E12, 201.98333333333332], [1.66173444E12, 28.7], [1.66173498E12, 148.86666666666667], [1.66173468E12, 85.66666666666667], [1.66173438E12, 60.21666666666667], [1.66173456E12, 89.33333333333333], [1.66173492E12, 119.58333333333333], [1.66173462E12, 82.85]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66173516E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 28.7, "minX": 1.66173438E12, "maxY": 362.53333333333336, "series": [{"data": [[1.6617348E12, 106.05], [1.6617345E12, 53.25], [1.66173516E12, 362.53333333333336], [1.66173486E12, 116.03333333333333], [1.66173504E12, 117.53333333333333], [1.66173474E12, 94.06666666666666], [1.6617351E12, 201.98333333333332], [1.66173444E12, 28.7], [1.66173498E12, 148.86666666666667], [1.66173468E12, 85.66666666666667], [1.66173438E12, 60.21666666666667], [1.66173456E12, 89.33333333333333], [1.66173492E12, 119.58333333333333], [1.66173462E12, 82.85]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66173516E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 28.7, "minX": 1.66173438E12, "maxY": 362.53333333333336, "series": [{"data": [[1.6617348E12, 106.05], [1.6617345E12, 53.25], [1.66173516E12, 362.53333333333336], [1.66173486E12, 116.03333333333333], [1.66173504E12, 117.53333333333333], [1.66173474E12, 94.06666666666666], [1.6617351E12, 201.98333333333332], [1.66173444E12, 28.7], [1.66173498E12, 148.86666666666667], [1.66173468E12, 85.66666666666667], [1.66173438E12, 60.21666666666667], [1.66173456E12, 89.33333333333333], [1.66173492E12, 119.58333333333333], [1.66173462E12, 82.85]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66173516E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

