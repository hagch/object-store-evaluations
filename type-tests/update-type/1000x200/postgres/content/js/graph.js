/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 400.0, "minX": 0.0, "maxY": 9525.0, "series": [{"data": [[0.0, 400.0], [0.1, 3127.0], [0.2, 4515.0], [0.3, 5853.0], [0.4, 6081.0], [0.5, 6124.0], [0.6, 6141.0], [0.7, 6163.0], [0.8, 6186.0], [0.9, 6212.0], [1.0, 6237.0], [1.1, 6261.0], [1.2, 6284.0], [1.3, 6299.0], [1.4, 6308.0], [1.5, 6314.0], [1.6, 6320.0], [1.7, 6325.0], [1.8, 6329.0], [1.9, 6333.0], [2.0, 6338.0], [2.1, 6342.0], [2.2, 6346.0], [2.3, 6351.0], [2.4, 6356.0], [2.5, 6361.0], [2.6, 6365.0], [2.7, 6369.0], [2.8, 6373.0], [2.9, 6376.0], [3.0, 6380.0], [3.1, 6383.0], [3.2, 6388.0], [3.3, 6392.0], [3.4, 6396.0], [3.5, 6401.0], [3.6, 6404.0], [3.7, 6410.0], [3.8, 6416.0], [3.9, 6423.0], [4.0, 6428.0], [4.1, 6434.0], [4.2, 6440.0], [4.3, 6446.0], [4.4, 6452.0], [4.5, 6459.0], [4.6, 6466.0], [4.7, 6475.0], [4.8, 6483.0], [4.9, 6492.0], [5.0, 6506.0], [5.1, 6514.0], [5.2, 6521.0], [5.3, 6525.0], [5.4, 6529.0], [5.5, 6533.0], [5.6, 6537.0], [5.7, 6541.0], [5.8, 6544.0], [5.9, 6548.0], [6.0, 6551.0], [6.1, 6553.0], [6.2, 6556.0], [6.3, 6558.0], [6.4, 6560.0], [6.5, 6563.0], [6.6, 6565.0], [6.7, 6568.0], [6.8, 6570.0], [6.9, 6572.0], [7.0, 6574.0], [7.1, 6576.0], [7.2, 6577.0], [7.3, 6579.0], [7.4, 6580.0], [7.5, 6582.0], [7.6, 6583.0], [7.7, 6585.0], [7.8, 6587.0], [7.9, 6588.0], [8.0, 6589.0], [8.1, 6591.0], [8.2, 6592.0], [8.3, 6594.0], [8.4, 6595.0], [8.5, 6597.0], [8.6, 6598.0], [8.7, 6599.0], [8.8, 6601.0], [8.9, 6602.0], [9.0, 6603.0], [9.1, 6604.0], [9.2, 6606.0], [9.3, 6607.0], [9.4, 6608.0], [9.5, 6609.0], [9.6, 6610.0], [9.7, 6611.0], [9.8, 6613.0], [9.9, 6614.0], [10.0, 6615.0], [10.1, 6616.0], [10.2, 6617.0], [10.3, 6619.0], [10.4, 6619.0], [10.5, 6621.0], [10.6, 6622.0], [10.7, 6623.0], [10.8, 6624.0], [10.9, 6625.0], [11.0, 6626.0], [11.1, 6627.0], [11.2, 6628.0], [11.3, 6629.0], [11.4, 6631.0], [11.5, 6632.0], [11.6, 6633.0], [11.7, 6634.0], [11.8, 6635.0], [11.9, 6637.0], [12.0, 6638.0], [12.1, 6639.0], [12.2, 6640.0], [12.3, 6642.0], [12.4, 6643.0], [12.5, 6644.0], [12.6, 6645.0], [12.7, 6647.0], [12.8, 6648.0], [12.9, 6649.0], [13.0, 6650.0], [13.1, 6652.0], [13.2, 6653.0], [13.3, 6654.0], [13.4, 6655.0], [13.5, 6656.0], [13.6, 6657.0], [13.7, 6658.0], [13.8, 6659.0], [13.9, 6661.0], [14.0, 6662.0], [14.1, 6663.0], [14.2, 6664.0], [14.3, 6665.0], [14.4, 6666.0], [14.5, 6667.0], [14.6, 6668.0], [14.7, 6669.0], [14.8, 6670.0], [14.9, 6671.0], [15.0, 6672.0], [15.1, 6673.0], [15.2, 6674.0], [15.3, 6675.0], [15.4, 6676.0], [15.5, 6677.0], [15.6, 6678.0], [15.7, 6680.0], [15.8, 6681.0], [15.9, 6682.0], [16.0, 6683.0], [16.1, 6684.0], [16.2, 6685.0], [16.3, 6686.0], [16.4, 6687.0], [16.5, 6688.0], [16.6, 6689.0], [16.7, 6690.0], [16.8, 6691.0], [16.9, 6692.0], [17.0, 6693.0], [17.1, 6694.0], [17.2, 6695.0], [17.3, 6695.0], [17.4, 6696.0], [17.5, 6697.0], [17.6, 6698.0], [17.7, 6699.0], [17.8, 6700.0], [17.9, 6701.0], [18.0, 6702.0], [18.1, 6703.0], [18.2, 6704.0], [18.3, 6705.0], [18.4, 6706.0], [18.5, 6707.0], [18.6, 6708.0], [18.7, 6708.0], [18.8, 6709.0], [18.9, 6710.0], [19.0, 6711.0], [19.1, 6712.0], [19.2, 6713.0], [19.3, 6715.0], [19.4, 6716.0], [19.5, 6717.0], [19.6, 6718.0], [19.7, 6719.0], [19.8, 6720.0], [19.9, 6721.0], [20.0, 6722.0], [20.1, 6723.0], [20.2, 6724.0], [20.3, 6725.0], [20.4, 6726.0], [20.5, 6727.0], [20.6, 6728.0], [20.7, 6729.0], [20.8, 6730.0], [20.9, 6731.0], [21.0, 6732.0], [21.1, 6733.0], [21.2, 6734.0], [21.3, 6735.0], [21.4, 6736.0], [21.5, 6737.0], [21.6, 6738.0], [21.7, 6739.0], [21.8, 6740.0], [21.9, 6741.0], [22.0, 6742.0], [22.1, 6743.0], [22.2, 6744.0], [22.3, 6744.0], [22.4, 6745.0], [22.5, 6746.0], [22.6, 6747.0], [22.7, 6748.0], [22.8, 6749.0], [22.9, 6750.0], [23.0, 6751.0], [23.1, 6752.0], [23.2, 6753.0], [23.3, 6754.0], [23.4, 6755.0], [23.5, 6755.0], [23.6, 6756.0], [23.7, 6757.0], [23.8, 6758.0], [23.9, 6759.0], [24.0, 6760.0], [24.1, 6761.0], [24.2, 6761.0], [24.3, 6762.0], [24.4, 6763.0], [24.5, 6764.0], [24.6, 6765.0], [24.7, 6765.0], [24.8, 6766.0], [24.9, 6767.0], [25.0, 6768.0], [25.1, 6769.0], [25.2, 6769.0], [25.3, 6770.0], [25.4, 6771.0], [25.5, 6772.0], [25.6, 6772.0], [25.7, 6773.0], [25.8, 6774.0], [25.9, 6775.0], [26.0, 6776.0], [26.1, 6776.0], [26.2, 6777.0], [26.3, 6778.0], [26.4, 6779.0], [26.5, 6780.0], [26.6, 6781.0], [26.7, 6782.0], [26.8, 6782.0], [26.9, 6783.0], [27.0, 6784.0], [27.1, 6785.0], [27.2, 6785.0], [27.3, 6786.0], [27.4, 6787.0], [27.5, 6788.0], [27.6, 6788.0], [27.7, 6789.0], [27.8, 6790.0], [27.9, 6791.0], [28.0, 6791.0], [28.1, 6792.0], [28.2, 6793.0], [28.3, 6794.0], [28.4, 6794.0], [28.5, 6795.0], [28.6, 6796.0], [28.7, 6797.0], [28.8, 6797.0], [28.9, 6798.0], [29.0, 6799.0], [29.1, 6800.0], [29.2, 6800.0], [29.3, 6801.0], [29.4, 6802.0], [29.5, 6802.0], [29.6, 6803.0], [29.7, 6804.0], [29.8, 6805.0], [29.9, 6805.0], [30.0, 6806.0], [30.1, 6806.0], [30.2, 6807.0], [30.3, 6808.0], [30.4, 6809.0], [30.5, 6809.0], [30.6, 6810.0], [30.7, 6811.0], [30.8, 6812.0], [30.9, 6812.0], [31.0, 6813.0], [31.1, 6814.0], [31.2, 6815.0], [31.3, 6815.0], [31.4, 6816.0], [31.5, 6817.0], [31.6, 6817.0], [31.7, 6818.0], [31.8, 6819.0], [31.9, 6819.0], [32.0, 6820.0], [32.1, 6820.0], [32.2, 6821.0], [32.3, 6822.0], [32.4, 6822.0], [32.5, 6823.0], [32.6, 6824.0], [32.7, 6824.0], [32.8, 6825.0], [32.9, 6826.0], [33.0, 6826.0], [33.1, 6827.0], [33.2, 6828.0], [33.3, 6828.0], [33.4, 6829.0], [33.5, 6830.0], [33.6, 6830.0], [33.7, 6831.0], [33.8, 6832.0], [33.9, 6832.0], [34.0, 6833.0], [34.1, 6833.0], [34.2, 6834.0], [34.3, 6835.0], [34.4, 6835.0], [34.5, 6836.0], [34.6, 6836.0], [34.7, 6837.0], [34.8, 6838.0], [34.9, 6838.0], [35.0, 6839.0], [35.1, 6839.0], [35.2, 6840.0], [35.3, 6840.0], [35.4, 6841.0], [35.5, 6842.0], [35.6, 6842.0], [35.7, 6843.0], [35.8, 6844.0], [35.9, 6844.0], [36.0, 6845.0], [36.1, 6845.0], [36.2, 6846.0], [36.3, 6846.0], [36.4, 6847.0], [36.5, 6848.0], [36.6, 6848.0], [36.7, 6849.0], [36.8, 6849.0], [36.9, 6850.0], [37.0, 6850.0], [37.1, 6851.0], [37.2, 6852.0], [37.3, 6852.0], [37.4, 6853.0], [37.5, 6853.0], [37.6, 6854.0], [37.7, 6854.0], [37.8, 6855.0], [37.9, 6855.0], [38.0, 6856.0], [38.1, 6856.0], [38.2, 6857.0], [38.3, 6857.0], [38.4, 6858.0], [38.5, 6858.0], [38.6, 6859.0], [38.7, 6859.0], [38.8, 6860.0], [38.9, 6860.0], [39.0, 6861.0], [39.1, 6861.0], [39.2, 6862.0], [39.3, 6863.0], [39.4, 6863.0], [39.5, 6864.0], [39.6, 6864.0], [39.7, 6865.0], [39.8, 6865.0], [39.9, 6866.0], [40.0, 6866.0], [40.1, 6867.0], [40.2, 6867.0], [40.3, 6868.0], [40.4, 6868.0], [40.5, 6869.0], [40.6, 6870.0], [40.7, 6870.0], [40.8, 6871.0], [40.9, 6871.0], [41.0, 6872.0], [41.1, 6872.0], [41.2, 6873.0], [41.3, 6873.0], [41.4, 6874.0], [41.5, 6874.0], [41.6, 6875.0], [41.7, 6875.0], [41.8, 6876.0], [41.9, 6877.0], [42.0, 6877.0], [42.1, 6878.0], [42.2, 6878.0], [42.3, 6879.0], [42.4, 6880.0], [42.5, 6880.0], [42.6, 6881.0], [42.7, 6882.0], [42.8, 6882.0], [42.9, 6883.0], [43.0, 6883.0], [43.1, 6884.0], [43.2, 6885.0], [43.3, 6885.0], [43.4, 6886.0], [43.5, 6887.0], [43.6, 6887.0], [43.7, 6888.0], [43.8, 6889.0], [43.9, 6889.0], [44.0, 6890.0], [44.1, 6891.0], [44.2, 6891.0], [44.3, 6892.0], [44.4, 6893.0], [44.5, 6893.0], [44.6, 6894.0], [44.7, 6895.0], [44.8, 6896.0], [44.9, 6896.0], [45.0, 6897.0], [45.1, 6898.0], [45.2, 6899.0], [45.3, 6900.0], [45.4, 6900.0], [45.5, 6901.0], [45.6, 6902.0], [45.7, 6903.0], [45.8, 6903.0], [45.9, 6904.0], [46.0, 6905.0], [46.1, 6906.0], [46.2, 6907.0], [46.3, 6907.0], [46.4, 6908.0], [46.5, 6909.0], [46.6, 6910.0], [46.7, 6910.0], [46.8, 6911.0], [46.9, 6912.0], [47.0, 6912.0], [47.1, 6913.0], [47.2, 6914.0], [47.3, 6915.0], [47.4, 6915.0], [47.5, 6916.0], [47.6, 6917.0], [47.7, 6917.0], [47.8, 6918.0], [47.9, 6919.0], [48.0, 6919.0], [48.1, 6920.0], [48.2, 6921.0], [48.3, 6921.0], [48.4, 6922.0], [48.5, 6922.0], [48.6, 6923.0], [48.7, 6923.0], [48.8, 6924.0], [48.9, 6924.0], [49.0, 6925.0], [49.1, 6926.0], [49.2, 6926.0], [49.3, 6927.0], [49.4, 6927.0], [49.5, 6928.0], [49.6, 6928.0], [49.7, 6929.0], [49.8, 6930.0], [49.9, 6930.0], [50.0, 6931.0], [50.1, 6931.0], [50.2, 6932.0], [50.3, 6933.0], [50.4, 6933.0], [50.5, 6934.0], [50.6, 6935.0], [50.7, 6935.0], [50.8, 6936.0], [50.9, 6937.0], [51.0, 6937.0], [51.1, 6938.0], [51.2, 6939.0], [51.3, 6939.0], [51.4, 6940.0], [51.5, 6941.0], [51.6, 6941.0], [51.7, 6942.0], [51.8, 6943.0], [51.9, 6943.0], [52.0, 6944.0], [52.1, 6945.0], [52.2, 6945.0], [52.3, 6946.0], [52.4, 6947.0], [52.5, 6947.0], [52.6, 6948.0], [52.7, 6949.0], [52.8, 6950.0], [52.9, 6950.0], [53.0, 6951.0], [53.1, 6952.0], [53.2, 6952.0], [53.3, 6953.0], [53.4, 6954.0], [53.5, 6954.0], [53.6, 6955.0], [53.7, 6956.0], [53.8, 6956.0], [53.9, 6957.0], [54.0, 6958.0], [54.1, 6958.0], [54.2, 6959.0], [54.3, 6959.0], [54.4, 6960.0], [54.5, 6961.0], [54.6, 6961.0], [54.7, 6962.0], [54.8, 6963.0], [54.9, 6963.0], [55.0, 6964.0], [55.1, 6965.0], [55.2, 6965.0], [55.3, 6966.0], [55.4, 6967.0], [55.5, 6967.0], [55.6, 6968.0], [55.7, 6968.0], [55.8, 6969.0], [55.9, 6970.0], [56.0, 6971.0], [56.1, 6971.0], [56.2, 6972.0], [56.3, 6973.0], [56.4, 6973.0], [56.5, 6974.0], [56.6, 6975.0], [56.7, 6976.0], [56.8, 6976.0], [56.9, 6977.0], [57.0, 6978.0], [57.1, 6978.0], [57.2, 6979.0], [57.3, 6980.0], [57.4, 6981.0], [57.5, 6981.0], [57.6, 6982.0], [57.7, 6983.0], [57.8, 6984.0], [57.9, 6984.0], [58.0, 6985.0], [58.1, 6986.0], [58.2, 6987.0], [58.3, 6987.0], [58.4, 6988.0], [58.5, 6989.0], [58.6, 6989.0], [58.7, 6990.0], [58.8, 6991.0], [58.9, 6992.0], [59.0, 6992.0], [59.1, 6993.0], [59.2, 6994.0], [59.3, 6995.0], [59.4, 6995.0], [59.5, 6996.0], [59.6, 6997.0], [59.7, 6998.0], [59.8, 6998.0], [59.9, 6999.0], [60.0, 7000.0], [60.1, 7001.0], [60.2, 7001.0], [60.3, 7002.0], [60.4, 7003.0], [60.5, 7003.0], [60.6, 7004.0], [60.7, 7005.0], [60.8, 7006.0], [60.9, 7007.0], [61.0, 7007.0], [61.1, 7008.0], [61.2, 7009.0], [61.3, 7010.0], [61.4, 7011.0], [61.5, 7012.0], [61.6, 7013.0], [61.7, 7014.0], [61.8, 7014.0], [61.9, 7015.0], [62.0, 7016.0], [62.1, 7017.0], [62.2, 7018.0], [62.3, 7019.0], [62.4, 7020.0], [62.5, 7021.0], [62.6, 7022.0], [62.7, 7023.0], [62.8, 7023.0], [62.9, 7024.0], [63.0, 7025.0], [63.1, 7026.0], [63.2, 7027.0], [63.3, 7028.0], [63.4, 7028.0], [63.5, 7029.0], [63.6, 7030.0], [63.7, 7031.0], [63.8, 7032.0], [63.9, 7034.0], [64.0, 7035.0], [64.1, 7036.0], [64.2, 7037.0], [64.3, 7038.0], [64.4, 7039.0], [64.5, 7040.0], [64.6, 7041.0], [64.7, 7042.0], [64.8, 7043.0], [64.9, 7044.0], [65.0, 7045.0], [65.1, 7046.0], [65.2, 7047.0], [65.3, 7048.0], [65.4, 7049.0], [65.5, 7050.0], [65.6, 7051.0], [65.7, 7051.0], [65.8, 7052.0], [65.9, 7053.0], [66.0, 7054.0], [66.1, 7055.0], [66.2, 7056.0], [66.3, 7056.0], [66.4, 7057.0], [66.5, 7058.0], [66.6, 7059.0], [66.7, 7060.0], [66.8, 7061.0], [66.9, 7062.0], [67.0, 7063.0], [67.1, 7064.0], [67.2, 7065.0], [67.3, 7065.0], [67.4, 7066.0], [67.5, 7067.0], [67.6, 7068.0], [67.7, 7069.0], [67.8, 7070.0], [67.9, 7070.0], [68.0, 7071.0], [68.1, 7072.0], [68.2, 7073.0], [68.3, 7074.0], [68.4, 7075.0], [68.5, 7076.0], [68.6, 7076.0], [68.7, 7077.0], [68.8, 7078.0], [68.9, 7079.0], [69.0, 7080.0], [69.1, 7080.0], [69.2, 7081.0], [69.3, 7082.0], [69.4, 7083.0], [69.5, 7084.0], [69.6, 7085.0], [69.7, 7086.0], [69.8, 7087.0], [69.9, 7088.0], [70.0, 7089.0], [70.1, 7089.0], [70.2, 7090.0], [70.3, 7091.0], [70.4, 7092.0], [70.5, 7093.0], [70.6, 7094.0], [70.7, 7095.0], [70.8, 7096.0], [70.9, 7097.0], [71.0, 7098.0], [71.1, 7099.0], [71.2, 7100.0], [71.3, 7101.0], [71.4, 7102.0], [71.5, 7103.0], [71.6, 7104.0], [71.7, 7105.0], [71.8, 7106.0], [71.9, 7106.0], [72.0, 7107.0], [72.1, 7108.0], [72.2, 7109.0], [72.3, 7110.0], [72.4, 7111.0], [72.5, 7112.0], [72.6, 7113.0], [72.7, 7114.0], [72.8, 7115.0], [72.9, 7116.0], [73.0, 7116.0], [73.1, 7117.0], [73.2, 7118.0], [73.3, 7119.0], [73.4, 7120.0], [73.5, 7121.0], [73.6, 7122.0], [73.7, 7123.0], [73.8, 7124.0], [73.9, 7125.0], [74.0, 7126.0], [74.1, 7127.0], [74.2, 7128.0], [74.3, 7129.0], [74.4, 7129.0], [74.5, 7130.0], [74.6, 7131.0], [74.7, 7132.0], [74.8, 7133.0], [74.9, 7134.0], [75.0, 7135.0], [75.1, 7136.0], [75.2, 7137.0], [75.3, 7138.0], [75.4, 7139.0], [75.5, 7140.0], [75.6, 7141.0], [75.7, 7142.0], [75.8, 7143.0], [75.9, 7144.0], [76.0, 7145.0], [76.1, 7146.0], [76.2, 7147.0], [76.3, 7148.0], [76.4, 7149.0], [76.5, 7150.0], [76.6, 7152.0], [76.7, 7153.0], [76.8, 7154.0], [76.9, 7155.0], [77.0, 7156.0], [77.1, 7158.0], [77.2, 7159.0], [77.3, 7160.0], [77.4, 7161.0], [77.5, 7162.0], [77.6, 7164.0], [77.7, 7165.0], [77.8, 7166.0], [77.9, 7167.0], [78.0, 7169.0], [78.1, 7170.0], [78.2, 7171.0], [78.3, 7172.0], [78.4, 7173.0], [78.5, 7174.0], [78.6, 7175.0], [78.7, 7177.0], [78.8, 7178.0], [78.9, 7180.0], [79.0, 7181.0], [79.1, 7182.0], [79.2, 7184.0], [79.3, 7185.0], [79.4, 7187.0], [79.5, 7188.0], [79.6, 7189.0], [79.7, 7190.0], [79.8, 7192.0], [79.9, 7193.0], [80.0, 7194.0], [80.1, 7196.0], [80.2, 7197.0], [80.3, 7198.0], [80.4, 7199.0], [80.5, 7200.0], [80.6, 7201.0], [80.7, 7202.0], [80.8, 7204.0], [80.9, 7205.0], [81.0, 7206.0], [81.1, 7207.0], [81.2, 7209.0], [81.3, 7210.0], [81.4, 7211.0], [81.5, 7212.0], [81.6, 7213.0], [81.7, 7215.0], [81.8, 7216.0], [81.9, 7217.0], [82.0, 7219.0], [82.1, 7220.0], [82.2, 7222.0], [82.3, 7223.0], [82.4, 7224.0], [82.5, 7226.0], [82.6, 7227.0], [82.7, 7229.0], [82.8, 7230.0], [82.9, 7232.0], [83.0, 7234.0], [83.1, 7235.0], [83.2, 7237.0], [83.3, 7238.0], [83.4, 7240.0], [83.5, 7241.0], [83.6, 7242.0], [83.7, 7244.0], [83.8, 7245.0], [83.9, 7247.0], [84.0, 7249.0], [84.1, 7251.0], [84.2, 7253.0], [84.3, 7255.0], [84.4, 7257.0], [84.5, 7259.0], [84.6, 7261.0], [84.7, 7262.0], [84.8, 7264.0], [84.9, 7266.0], [85.0, 7268.0], [85.1, 7270.0], [85.2, 7272.0], [85.3, 7274.0], [85.4, 7275.0], [85.5, 7277.0], [85.6, 7279.0], [85.7, 7280.0], [85.8, 7282.0], [85.9, 7284.0], [86.0, 7286.0], [86.1, 7288.0], [86.2, 7290.0], [86.3, 7292.0], [86.4, 7293.0], [86.5, 7295.0], [86.6, 7297.0], [86.7, 7299.0], [86.8, 7301.0], [86.9, 7303.0], [87.0, 7305.0], [87.1, 7307.0], [87.2, 7309.0], [87.3, 7311.0], [87.4, 7314.0], [87.5, 7316.0], [87.6, 7319.0], [87.7, 7322.0], [87.8, 7324.0], [87.9, 7327.0], [88.0, 7329.0], [88.1, 7332.0], [88.2, 7335.0], [88.3, 7337.0], [88.4, 7340.0], [88.5, 7342.0], [88.6, 7345.0], [88.7, 7347.0], [88.8, 7350.0], [88.9, 7353.0], [89.0, 7356.0], [89.1, 7359.0], [89.2, 7363.0], [89.3, 7366.0], [89.4, 7369.0], [89.5, 7372.0], [89.6, 7374.0], [89.7, 7377.0], [89.8, 7380.0], [89.9, 7382.0], [90.0, 7385.0], [90.1, 7387.0], [90.2, 7389.0], [90.3, 7391.0], [90.4, 7394.0], [90.5, 7396.0], [90.6, 7399.0], [90.7, 7403.0], [90.8, 7407.0], [90.9, 7411.0], [91.0, 7415.0], [91.1, 7419.0], [91.2, 7421.0], [91.3, 7424.0], [91.4, 7427.0], [91.5, 7429.0], [91.6, 7431.0], [91.7, 7434.0], [91.8, 7436.0], [91.9, 7438.0], [92.0, 7441.0], [92.1, 7443.0], [92.2, 7446.0], [92.3, 7449.0], [92.4, 7451.0], [92.5, 7454.0], [92.6, 7458.0], [92.7, 7462.0], [92.8, 7466.0], [92.9, 7470.0], [93.0, 7474.0], [93.1, 7478.0], [93.2, 7482.0], [93.3, 7486.0], [93.4, 7490.0], [93.5, 7495.0], [93.6, 7501.0], [93.7, 7505.0], [93.8, 7509.0], [93.9, 7514.0], [94.0, 7518.0], [94.1, 7522.0], [94.2, 7528.0], [94.3, 7533.0], [94.4, 7538.0], [94.5, 7543.0], [94.6, 7548.0], [94.7, 7551.0], [94.8, 7555.0], [94.9, 7559.0], [95.0, 7562.0], [95.1, 7567.0], [95.2, 7572.0], [95.3, 7577.0], [95.4, 7584.0], [95.5, 7589.0], [95.6, 7597.0], [95.7, 7603.0], [95.8, 7608.0], [95.9, 7614.0], [96.0, 7621.0], [96.1, 7627.0], [96.2, 7632.0], [96.3, 7637.0], [96.4, 7640.0], [96.5, 7644.0], [96.6, 7649.0], [96.7, 7654.0], [96.8, 7659.0], [96.9, 7666.0], [97.0, 7673.0], [97.1, 7685.0], [97.2, 7707.0], [97.3, 7720.0], [97.4, 7732.0], [97.5, 7746.0], [97.6, 7766.0], [97.7, 7798.0], [97.8, 7849.0], [97.9, 7887.0], [98.0, 7951.0], [98.1, 8101.0], [98.2, 8249.0], [98.3, 8383.0], [98.4, 8544.0], [98.5, 8581.0], [98.6, 8611.0], [98.7, 8680.0], [98.8, 8719.0], [98.9, 8740.0], [99.0, 8872.0], [99.1, 8962.0], [99.2, 9009.0], [99.3, 9030.0], [99.4, 9061.0], [99.5, 9094.0], [99.6, 9136.0], [99.7, 9253.0], [99.8, 9417.0], [99.9, 9447.0], [100.0, 9525.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 400.0, "maxY": 32382.0, "series": [{"data": [[600.0, 4.0], [700.0, 3.0], [800.0, 4.0], [900.0, 4.0], [1000.0, 5.0], [1100.0, 4.0], [1200.0, 5.0], [1300.0, 4.0], [1400.0, 6.0], [1500.0, 5.0], [1600.0, 7.0], [1700.0, 4.0], [1800.0, 7.0], [1900.0, 7.0], [2000.0, 5.0], [2100.0, 5.0], [2200.0, 9.0], [2300.0, 7.0], [2400.0, 7.0], [2500.0, 14.0], [2600.0, 18.0], [2700.0, 13.0], [2800.0, 13.0], [2900.0, 13.0], [3000.0, 15.0], [3100.0, 13.0], [3200.0, 12.0], [3300.0, 14.0], [3400.0, 16.0], [3500.0, 13.0], [3600.0, 9.0], [3700.0, 14.0], [3800.0, 10.0], [3900.0, 14.0], [4000.0, 13.0], [4100.0, 17.0], [4200.0, 16.0], [4300.0, 21.0], [4400.0, 20.0], [4500.0, 14.0], [4600.0, 11.0], [4700.0, 15.0], [4800.0, 20.0], [4900.0, 14.0], [5000.0, 13.0], [5100.0, 15.0], [5200.0, 15.0], [5300.0, 16.0], [5400.0, 13.0], [5500.0, 17.0], [5600.0, 13.0], [5700.0, 17.0], [5800.0, 19.0], [5900.0, 58.0], [6000.0, 178.0], [6100.0, 834.0], [6200.0, 923.0], [6300.0, 4342.0], [6400.0, 2961.0], [6500.0, 7495.0], [6600.0, 18050.0], [6700.0, 22727.0], [6800.0, 32382.0], [6900.0, 29334.0], [7000.0, 22448.0], [7100.0, 18487.0], [7200.0, 12629.0], [7300.0, 7771.0], [7400.0, 5923.0], [7500.0, 4152.0], [7600.0, 3016.0], [7700.0, 1093.0], [7800.0, 459.0], [7900.0, 199.0], [8000.0, 126.0], [8100.0, 147.0], [8200.0, 128.0], [8300.0, 146.0], [8400.0, 124.0], [8500.0, 343.0], [8600.0, 395.0], [8700.0, 409.0], [8800.0, 170.0], [8900.0, 274.0], [9000.0, 709.0], [9100.0, 289.0], [9200.0, 129.0], [9300.0, 120.0], [9400.0, 397.0], [9500.0, 23.0], [400.0, 4.0], [500.0, 4.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 199952.0, "series": [{"data": [[0.0, 4.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 44.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 199952.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 913.7874980367538, "minX": 1.66048056E12, "maxY": 1000.0, "series": [{"data": [[1.66048158E12, 1000.0], [1.66048092E12, 1000.0], [1.66048188E12, 1000.0], [1.66048062E12, 1000.0], [1.66048122E12, 1000.0], [1.66048056E12, 989.6811655405406], [1.66048152E12, 1000.0], [1.66048182E12, 1000.0], [1.66048116E12, 1000.0], [1.66048086E12, 1000.0], [1.66048146E12, 1000.0], [1.6604808E12, 1000.0], [1.66048176E12, 1000.0], [1.6604811E12, 1000.0], [1.6604814E12, 1000.0], [1.6604817E12, 1000.0], [1.66048104E12, 1000.0], [1.66048074E12, 1000.0], [1.66048134E12, 1000.0], [1.66048068E12, 1000.0], [1.66048164E12, 1000.0], [1.66048098E12, 1000.0], [1.66048194E12, 913.7874980367538], [1.66048128E12, 1000.0]], "isOverall": false, "label": "Thread Group Update Type", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66048194E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2773.666666666667, "minX": 1.0, "maxY": 6986.188080968181, "series": [{"data": [[2.0, 5897.0], [3.0, 5741.0], [4.0, 5896.0], [5.0, 5905.0], [6.0, 5907.0], [7.0, 5907.0], [8.0, 5909.0], [9.0, 5922.0], [10.0, 5923.0], [11.0, 5922.0], [12.0, 5899.0], [13.0, 5919.0], [14.0, 5920.0], [15.0, 5922.0], [16.0, 5922.0], [17.0, 5930.0], [18.0, 5918.0], [19.0, 5925.0], [20.0, 5927.0], [21.0, 5935.0], [22.0, 5935.0], [23.0, 5936.0], [24.0, 5949.0], [25.0, 5957.0], [26.0, 5945.0], [27.0, 5960.0], [28.0, 5914.0], [29.0, 5957.0], [30.0, 5958.0], [31.0, 5959.0], [33.0, 5976.0], [32.0, 5974.0], [35.0, 5976.0], [34.0, 5978.0], [37.0, 5979.0], [36.0, 5979.0], [39.0, 5988.0], [38.0, 5980.0], [41.0, 6009.0], [40.0, 5994.0], [43.0, 5990.0], [42.0, 5975.0], [45.0, 5991.0], [44.0, 5950.0], [47.0, 6014.0], [46.0, 5991.0], [49.0, 5994.0], [48.0, 5993.0], [51.0, 5995.0], [50.0, 5976.0], [53.0, 6007.0], [52.0, 6006.0], [55.0, 6008.0], [54.0, 6007.0], [57.0, 6010.0], [56.0, 6009.0], [59.0, 6024.0], [58.0, 6024.0], [61.0, 6033.0], [60.0, 6025.0], [63.0, 6039.0], [62.0, 6017.0], [67.0, 6026.0], [66.0, 6038.0], [65.0, 6020.0], [64.0, 6040.0], [71.0, 6019.0], [70.0, 6067.0], [69.0, 6061.0], [68.0, 6052.0], [75.0, 6062.0], [74.0, 6023.0], [73.0, 6063.0], [72.0, 6063.0], [79.0, 6063.0], [78.0, 6063.0], [77.0, 6062.0], [76.0, 6061.0], [83.0, 6084.0], [82.0, 6070.0], [81.0, 6070.0], [80.0, 6063.0], [87.0, 6067.0], [86.0, 6079.0], [85.0, 6066.0], [84.0, 6065.0], [91.0, 6081.0], [90.0, 6081.0], [89.0, 6068.0], [88.0, 6087.0], [95.0, 6082.0], [94.0, 6081.0], [93.0, 6081.0], [92.0, 6081.0], [99.0, 6092.0], [98.0, 6084.0], [97.0, 6082.0], [96.0, 6082.0], [103.0, 6087.0], [102.0, 6088.0], [101.0, 6089.0], [100.0, 6089.0], [107.0, 6076.0], [106.0, 6079.0], [105.0, 6079.0], [104.0, 6085.0], [111.0, 6082.0], [110.0, 6081.0], [109.0, 6079.0], [108.0, 6076.0], [115.0, 6072.0], [114.0, 6072.0], [113.0, 6072.0], [112.0, 6057.0], [119.0, 6072.0], [118.0, 6069.0], [117.0, 6070.0], [116.0, 6071.0], [123.0, 6074.0], [122.0, 6076.0], [121.0, 6076.0], [120.0, 6076.0], [127.0, 6056.0], [126.0, 6070.0], [125.0, 6066.0], [124.0, 6039.0], [135.0, 6076.0], [134.0, 6075.0], [133.0, 6077.0], [132.0, 6071.0], [131.0, 6064.0], [130.0, 6066.0], [129.0, 6069.0], [128.0, 6062.0], [143.0, 6070.0], [142.0, 6068.0], [141.0, 6070.0], [140.0, 6009.0], [139.0, 6063.0], [138.0, 6084.0], [137.0, 6072.0], [136.0, 6008.0], [151.0, 6072.0], [150.0, 6073.0], [149.0, 6075.0], [148.0, 6070.0], [147.0, 6072.0], [146.0, 6072.0], [145.0, 6072.0], [144.0, 6070.0], [159.0, 6074.0], [158.0, 6074.0], [157.0, 6075.0], [156.0, 6074.0], [155.0, 6069.0], [154.0, 6067.0], [153.0, 6069.0], [152.0, 6071.0], [167.0, 6077.0], [166.0, 6077.0], [165.0, 6079.0], [164.0, 6074.0], [163.0, 6075.0], [162.0, 6075.0], [161.0, 6076.0], [160.0, 6075.0], [170.0, 3249.0], [175.0, 6048.0], [174.0, 6094.0], [173.0, 6096.0], [172.0, 6096.0], [171.0, 6097.0], [169.0, 6085.0], [168.0, 6087.0], [177.0, 3253.5], [183.0, 6069.0], [182.0, 6130.0], [181.0, 6073.0], [180.0, 6075.0], [179.0, 6075.0], [178.0, 6076.0], [176.0, 6021.0], [187.0, 3267.0], [191.0, 6096.0], [190.0, 6041.0], [189.0, 6097.0], [188.0, 6084.0], [186.0, 6075.0], [185.0, 6068.0], [184.0, 6067.0], [194.0, 3285.0], [199.0, 6072.0], [198.0, 6092.0], [197.0, 6073.0], [196.0, 6100.0], [195.0, 6091.0], [193.0, 6078.0], [192.0, 6138.0], [207.0, 6101.0], [206.0, 6091.0], [205.0, 6092.0], [204.0, 6091.0], [203.0, 6092.0], [202.0, 6090.0], [201.0, 6092.0], [200.0, 6092.0], [209.0, 3310.5], [215.0, 6106.0], [214.0, 6104.0], [213.0, 6096.0], [212.0, 6097.0], [211.0, 6096.0], [210.0, 6071.0], [208.0, 6102.0], [223.0, 3342.5], [222.0, 6127.0], [221.0, 6102.0], [220.0, 6102.0], [219.0, 6101.0], [218.0, 6100.0], [217.0, 6078.0], [216.0, 6108.0], [231.0, 6154.0], [230.0, 6141.0], [229.0, 6139.0], [228.0, 6125.0], [227.0, 6145.0], [226.0, 6129.0], [225.0, 6130.0], [224.0, 6128.0], [235.0, 3386.5], [238.0, 3367.0], [239.0, 6175.0], [237.0, 6180.0], [236.0, 6181.0], [234.0, 6174.0], [233.0, 6147.0], [232.0, 6181.0], [247.0, 3411.5], [246.0, 6187.0], [245.0, 6187.0], [244.0, 6179.0], [243.0, 6171.0], [242.0, 6128.0], [241.0, 6176.0], [240.0, 6178.0], [255.0, 6136.0], [254.0, 6194.0], [253.0, 6192.0], [252.0, 6192.0], [251.0, 6186.0], [250.0, 6226.0], [249.0, 6193.0], [248.0, 6193.0], [271.0, 6209.0], [267.0, 3434.5], [270.0, 3442.5], [269.0, 6209.0], [268.0, 6196.0], [259.0, 6203.0], [258.0, 6202.0], [257.0, 6200.0], [256.0, 6194.0], [266.0, 6200.0], [265.0, 6223.0], [264.0, 6207.0], [263.0, 6157.0], [262.0, 6211.0], [261.0, 6204.0], [260.0, 6203.0], [286.0, 6250.0], [279.0, 3458.0], [273.0, 6220.0], [272.0, 6210.0], [275.0, 6212.0], [274.0, 6227.0], [278.0, 6233.0], [277.0, 6225.0], [276.0, 6225.0], [287.0, 6269.0], [285.0, 6250.0], [284.0, 6240.0], [283.0, 6239.0], [282.0, 6232.0], [281.0, 6231.0], [280.0, 6229.0], [303.0, 6286.0], [296.0, 3499.5], [302.0, 6284.0], [301.0, 6283.0], [300.0, 6276.0], [291.0, 6230.0], [290.0, 6271.0], [289.0, 6272.0], [288.0, 6269.0], [299.0, 6275.0], [298.0, 6274.0], [297.0, 6274.0], [295.0, 6261.0], [294.0, 6258.0], [293.0, 6286.0], [292.0, 6266.0], [318.0, 6297.0], [308.0, 3527.5], [310.0, 6305.0], [309.0, 6293.0], [311.0, 3550.5], [317.0, 3561.0], [319.0, 6309.0], [316.0, 6307.0], [307.0, 6294.0], [306.0, 6294.0], [305.0, 6293.0], [304.0, 6294.0], [315.0, 6306.0], [314.0, 6298.0], [313.0, 6300.0], [312.0, 6288.0], [334.0, 3602.0], [324.0, 3582.5], [325.0, 6315.0], [327.0, 6325.0], [321.0, 6313.0], [320.0, 6308.0], [323.0, 6321.0], [322.0, 6320.0], [326.0, 6325.0], [335.0, 6346.0], [333.0, 6330.0], [332.0, 6329.0], [331.0, 6326.0], [330.0, 6328.0], [329.0, 6327.0], [328.0, 6325.0], [351.0, 6347.0], [344.0, 3628.0], [348.0, 3636.0], [339.0, 6347.0], [338.0, 6345.0], [337.0, 6346.0], [336.0, 6346.0], [350.0, 6346.0], [349.0, 6346.0], [347.0, 6348.0], [346.0, 6337.0], [345.0, 6330.0], [343.0, 6349.0], [342.0, 6345.0], [341.0, 6346.0], [340.0, 6346.0], [365.0, 6372.0], [353.0, 3665.5], [354.0, 2773.666666666667], [357.0, 3671.5], [356.0, 6366.0], [359.0, 6367.0], [352.0, 6353.0], [358.0, 6364.0], [360.0, 3692.0], [361.0, 6367.0], [367.0, 3706.0], [366.0, 6372.0], [364.0, 6374.0], [355.0, 6363.0], [363.0, 6367.0], [362.0, 6380.0], [383.0, 6398.0], [372.0, 3721.5], [374.0, 6388.0], [373.0, 6377.0], [381.0, 3737.5], [382.0, 6389.0], [380.0, 6389.0], [371.0, 6375.0], [370.0, 6370.0], [369.0, 6364.0], [368.0, 6375.0], [375.0, 6389.0], [379.0, 6390.0], [378.0, 6390.0], [377.0, 6388.0], [376.0, 6363.0], [399.0, 6407.0], [392.0, 3751.0], [398.0, 6408.0], [397.0, 6407.0], [396.0, 6399.0], [387.0, 6403.0], [386.0, 6390.0], [385.0, 6401.0], [384.0, 6395.0], [395.0, 6400.0], [394.0, 6399.0], [393.0, 6399.0], [391.0, 6396.0], [390.0, 6389.0], [389.0, 6383.0], [388.0, 6408.0], [414.0, 6411.0], [400.0, 3782.0], [407.0, 3794.0], [406.0, 6399.0], [405.0, 6399.0], [404.0, 6425.0], [413.0, 3792.0], [415.0, 6411.0], [412.0, 6415.0], [403.0, 6400.0], [402.0, 6399.0], [401.0, 6375.0], [411.0, 6408.0], [410.0, 6381.0], [409.0, 6414.0], [408.0, 6407.0], [431.0, 6451.0], [418.0, 3805.5], [421.0, 3822.5], [420.0, 6415.0], [423.0, 6415.0], [417.0, 6421.0], [416.0, 6418.0], [422.0, 6416.0], [427.0, 3847.5], [430.0, 6451.0], [429.0, 6444.0], [428.0, 6445.0], [419.0, 6414.0], [426.0, 6439.0], [425.0, 6438.0], [424.0, 6415.0], [446.0, 6463.0], [433.0, 3871.5], [439.0, 3862.5], [432.0, 6366.0], [438.0, 6438.0], [437.0, 6438.0], [436.0, 6437.0], [447.0, 6417.0], [445.0, 6460.0], [444.0, 6452.0], [435.0, 6439.0], [434.0, 6417.0], [443.0, 6465.0], [442.0, 6452.0], [441.0, 6438.0], [440.0, 6440.0], [463.0, 6463.0], [451.0, 3862.5], [455.0, 6451.0], [448.0, 6456.0], [450.0, 6456.0], [449.0, 6456.0], [454.0, 6450.0], [453.0, 6452.0], [452.0, 6453.0], [458.0, 3900.0], [462.0, 6457.0], [461.0, 6457.0], [460.0, 6456.0], [459.0, 6457.0], [457.0, 6452.0], [456.0, 6452.0], [478.0, 6489.0], [467.0, 3919.0], [469.0, 3916.0], [468.0, 6456.0], [471.0, 6452.0], [464.0, 6460.0], [466.0, 6437.0], [465.0, 6460.0], [470.0, 6452.0], [477.0, 3937.5], [479.0, 6433.0], [476.0, 6495.0], [475.0, 6454.0], [474.0, 6455.0], [473.0, 6455.0], [472.0, 6456.0], [494.0, 6455.0], [481.0, 3925.5], [480.0, 6432.0], [483.0, 6441.0], [482.0, 6443.0], [487.0, 6456.0], [486.0, 6456.0], [485.0, 6455.0], [484.0, 6452.0], [492.0, 3952.0], [495.0, 3951.5], [493.0, 6456.0], [491.0, 6452.0], [490.0, 6452.0], [489.0, 6453.0], [488.0, 6456.0], [511.0, 3965.0], [505.0, 3956.0], [510.0, 6440.0], [509.0, 6440.0], [508.0, 6429.0], [499.0, 6459.0], [498.0, 6464.0], [497.0, 6462.0], [496.0, 6456.0], [507.0, 6411.0], [506.0, 6445.0], [504.0, 6477.0], [503.0, 6454.0], [502.0, 6448.0], [501.0, 6427.0], [500.0, 6457.0], [540.0, 6467.0], [515.0, 3972.0], [526.0, 3984.0], [525.0, 6441.0], [524.0, 6440.0], [523.0, 6434.0], [522.0, 6449.0], [521.0, 6443.0], [520.0, 6444.0], [527.0, 6441.0], [512.0, 6441.0], [514.0, 6443.0], [513.0, 6446.0], [536.0, 4010.5], [519.0, 6445.0], [518.0, 6403.0], [517.0, 6452.0], [516.0, 6454.0], [537.0, 6461.0], [542.0, 4019.0], [543.0, 6476.0], [529.0, 6441.0], [528.0, 6442.0], [531.0, 6443.0], [530.0, 6441.0], [533.0, 6461.0], [532.0, 6462.0], [535.0, 6459.0], [534.0, 6460.0], [541.0, 6475.0], [539.0, 6462.0], [538.0, 6461.0], [573.0, 6468.0], [550.0, 4036.0], [559.0, 6488.0], [545.0, 6483.0], [544.0, 6485.0], [547.0, 6475.0], [546.0, 6488.0], [549.0, 6482.0], [548.0, 6481.0], [558.0, 6489.0], [557.0, 6491.0], [556.0, 6479.0], [555.0, 6479.0], [554.0, 6479.0], [553.0, 6478.0], [552.0, 6474.0], [568.0, 6510.0], [551.0, 6475.0], [566.0, 4044.5], [565.0, 6486.0], [564.0, 6488.0], [563.0, 6476.0], [562.0, 6479.0], [561.0, 6449.0], [560.0, 6487.0], [567.0, 6486.0], [569.0, 3255.666666666667], [574.0, 4071.5], [575.0, 6498.0], [572.0, 6494.0], [571.0, 6475.0], [570.0, 6472.0], [605.0, 6478.0], [584.0, 4079.5], [585.0, 6485.0], [587.0, 6483.0], [586.0, 6485.0], [589.0, 6483.0], [588.0, 6483.0], [590.0, 4080.0], [593.0, 4091.5], [592.0, 6480.0], [595.0, 6482.0], [594.0, 6484.0], [597.0, 6476.0], [596.0, 6480.0], [599.0, 6474.0], [598.0, 6475.0], [607.0, 6474.0], [606.0, 6475.0], [604.0, 6477.0], [603.0, 6476.0], [602.0, 6478.0], [601.0, 6479.0], [600.0, 6475.0], [591.0, 6481.0], [576.0, 6485.0], [578.0, 6495.0], [577.0, 6495.0], [580.0, 6444.0], [579.0, 6494.0], [582.0, 6487.0], [581.0, 6488.0], [583.0, 6484.0], [635.0, 4131.5], [610.0, 4103.5], [609.0, 6483.0], [608.0, 6484.0], [612.0, 6481.0], [611.0, 6497.0], [614.0, 6488.0], [613.0, 6487.0], [632.0, 6494.0], [615.0, 6486.0], [620.0, 4119.0], [619.0, 6483.0], [618.0, 6484.0], [617.0, 6487.0], [616.0, 6487.0], [622.0, 6492.0], [621.0, 6492.0], [623.0, 4129.0], [639.0, 6507.0], [625.0, 6496.0], [624.0, 6497.0], [627.0, 6505.0], [626.0, 6505.0], [629.0, 6498.0], [628.0, 6467.0], [631.0, 6495.0], [630.0, 6495.0], [638.0, 6506.0], [637.0, 6507.0], [636.0, 6506.0], [634.0, 6493.0], [633.0, 6492.0], [666.0, 6538.0], [670.0, 4216.0], [641.0, 4168.0], [644.0, 4149.0], [643.0, 6523.0], [642.0, 6522.0], [645.0, 6519.0], [647.0, 6519.0], [646.0, 6521.0], [665.0, 6537.0], [664.0, 6536.0], [667.0, 6538.0], [669.0, 6536.0], [668.0, 6537.0], [649.0, 4184.0], [648.0, 6521.0], [651.0, 6507.0], [650.0, 6526.0], [652.0, 4185.0], [655.0, 4203.0], [640.0, 6520.0], [654.0, 6528.0], [653.0, 6518.0], [657.0, 4196.5], [662.0, 4224.0], [661.0, 6543.0], [660.0, 6529.0], [659.0, 6531.0], [658.0, 6527.0], [663.0, 6535.0], [671.0, 6542.0], [656.0, 6533.0], [701.0, 6576.0], [677.0, 4245.0], [680.0, 4261.0], [681.0, 6563.0], [683.0, 6564.0], [682.0, 6562.0], [685.0, 6560.0], [684.0, 6563.0], [686.0, 4263.5], [687.0, 4252.5], [672.0, 6550.0], [674.0, 6546.0], [673.0, 6548.0], [676.0, 6551.0], [675.0, 6547.0], [690.0, 4277.0], [689.0, 6563.0], [688.0, 6563.0], [691.0, 6572.0], [693.0, 6577.0], [692.0, 6576.0], [695.0, 6575.0], [694.0, 6576.0], [696.0, 4273.0], [679.0, 6555.0], [678.0, 6552.0], [697.0, 4302.0], [703.0, 6575.0], [702.0, 6573.0], [700.0, 6577.0], [699.0, 6578.0], [698.0, 6578.0], [733.0, 6576.0], [728.0, 4356.0], [704.0, 4293.0], [705.0, 6576.0], [706.0, 4310.5], [710.0, 4330.5], [709.0, 6562.0], [708.0, 6580.0], [707.0, 6571.0], [711.0, 6556.0], [714.0, 4331.5], [713.0, 6568.0], [712.0, 6568.0], [716.0, 6580.0], [715.0, 6569.0], [718.0, 6574.0], [717.0, 6559.0], [719.0, 6575.0], [722.0, 4348.5], [721.0, 6575.0], [720.0, 6575.0], [723.0, 6574.0], [725.0, 6574.0], [724.0, 6573.0], [727.0, 6574.0], [726.0, 6574.0], [735.0, 6575.0], [734.0, 6575.0], [732.0, 6575.0], [731.0, 6574.0], [730.0, 6573.0], [729.0, 6567.0], [765.0, 6587.0], [742.0, 4361.0], [751.0, 6593.0], [737.0, 6586.0], [736.0, 6580.0], [739.0, 6615.0], [738.0, 6600.0], [741.0, 6554.0], [740.0, 6548.0], [750.0, 6588.0], [749.0, 6588.0], [748.0, 6588.0], [747.0, 6589.0], [746.0, 6588.0], [745.0, 6589.0], [744.0, 6576.0], [760.0, 6590.0], [743.0, 6578.0], [756.0, 4384.0], [755.0, 6596.0], [754.0, 6578.0], [753.0, 6604.0], [752.0, 6601.0], [757.0, 6595.0], [759.0, 6593.0], [758.0, 6593.0], [761.0, 4400.0], [763.0, 4384.5], [767.0, 4400.5], [766.0, 6585.0], [764.0, 6587.0], [762.0, 6595.0], [793.0, 4447.5], [772.0, 4406.5], [773.0, 4410.0], [774.0, 6583.0], [792.0, 6588.0], [775.0, 6583.0], [781.0, 4432.5], [780.0, 6597.0], [779.0, 6584.0], [778.0, 6584.0], [777.0, 6583.0], [776.0, 6583.0], [783.0, 6596.0], [769.0, 6587.0], [768.0, 6586.0], [771.0, 6585.0], [770.0, 6585.0], [782.0, 6575.0], [784.0, 4425.5], [790.0, 4437.0], [789.0, 6582.0], [788.0, 6548.0], [787.0, 6587.0], [786.0, 6589.0], [785.0, 6590.0], [791.0, 6581.0], [797.0, 4460.5], [796.0, 6597.0], [795.0, 6595.0], [794.0, 6569.0], [799.0, 6597.0], [798.0, 6590.0], [829.0, 6621.0], [803.0, 4454.0], [802.0, 6628.0], [801.0, 6628.0], [800.0, 6598.0], [804.0, 4477.5], [807.0, 4447.0], [806.0, 6615.0], [805.0, 6616.0], [824.0, 6596.0], [826.0, 6607.0], [825.0, 6608.0], [815.0, 4450.5], [814.0, 6604.0], [813.0, 6605.0], [812.0, 6606.0], [811.0, 6608.0], [810.0, 6610.0], [809.0, 6605.0], [808.0, 6549.0], [820.0, 4449.5], [819.0, 6605.0], [818.0, 6603.0], [817.0, 6603.0], [816.0, 6601.0], [821.0, 6612.0], [823.0, 6616.0], [822.0, 6619.0], [831.0, 4501.5], [830.0, 6621.0], [828.0, 6620.0], [827.0, 6605.0], [861.0, 4531.5], [848.0, 4516.5], [849.0, 6607.0], [851.0, 6600.0], [850.0, 6613.0], [853.0, 6604.0], [852.0, 6604.0], [855.0, 6604.0], [854.0, 6605.5], [863.0, 6596.0], [862.0, 6596.0], [860.0, 6599.0], [859.0, 6587.0], [858.0, 6610.0], [857.0, 6612.0], [856.0, 6604.0], [839.0, 6593.0], [838.0, 6611.0], [837.0, 6614.0], [836.0, 6608.0], [835.0, 6565.0], [834.0, 6615.0], [833.0, 6615.0], [832.0, 6616.0], [847.0, 6614.5], [846.0, 6609.0], [845.0, 6608.0], [844.0, 6607.0], [843.0, 6606.0], [842.0, 6606.0], [841.0, 6607.0], [840.0, 6608.0], [892.0, 6543.111111111111], [873.0, 4511.5], [872.0, 6592.0], [874.0, 6593.5], [876.0, 6588.4], [875.0, 6599.5], [878.0, 6578.4], [877.0, 6580.692307692308], [889.0, 5717.0], [895.0, 6509.0], [881.0, 6560.0], [880.0, 6569.8], [883.0, 6563.7], [882.0, 6564.833333333334], [885.0, 6553.0], [884.0, 6557.571428571428], [887.0, 6549.333333333333], [886.0, 6552.0], [894.0, 6524.945945945946], [893.0, 6542.363636363636], [891.0, 6541.285714285714], [890.0, 6543.0], [888.0, 6550.0], [871.0, 6592.0], [870.0, 6591.0], [869.0, 6592.0], [868.0, 6592.0], [867.0, 6594.0], [866.0, 6593.0], [865.0, 6595.0], [864.0, 6597.0], [879.0, 6565.75], [922.0, 6426.142857142857], [903.0, 6218.874999999999], [909.0, 4499.5], [908.0, 6472.25], [907.0, 6472.142857142857], [906.0, 6475.0], [905.0, 6474.0], [904.0, 6475.0], [911.0, 6469.0], [896.0, 6507.0], [898.0, 6493.941176470588], [897.0, 6508.499999999999], [900.0, 6483.714285714285], [899.0, 6484.636363636364], [902.0, 6477.105263157895], [901.0, 6478.333333333333], [910.0, 6471.666666666667], [921.0, 5987.666666666668], [920.0, 6434.75], [924.0, 5936.0], [927.0, 6415.333333333333], [913.0, 6468.5], [912.0, 6469.916666666667], [915.0, 6460.833333333334], [914.0, 6459.250000000001], [917.0, 6443.0], [916.0, 6460.363636363637], [919.0, 6439.0], [918.0, 6448.0], [926.0, 6408.4], [925.0, 6423.0], [923.0, 6423.75], [957.0, 6386.187500000001], [952.0, 5954.222222222223], [928.0, 5099.666666666667], [935.0, 5768.333333333334], [934.0, 6403.333333333333], [933.0, 6403.8], [932.0, 6402.571428571428], [931.0, 6408.384615384615], [930.0, 6406.0], [929.0, 6407.846153846154], [939.0, 5913.0], [938.0, 6400.666666666667], [937.0, 6402.0], [936.0, 6400.5], [941.0, 6399.500000000001], [940.0, 6403.181818181818], [943.0, 6395.666666666667], [942.0, 6397.733333333334], [950.0, 6221.916666666667], [949.0, 6385.285714285714], [948.0, 6383.181818181819], [947.0, 6389.266666666666], [946.0, 6394.0], [945.0, 6394.0], [944.0, 6395.0], [951.0, 6381.333333333333], [958.0, 4453.0], [959.0, 6386.0], [956.0, 6392.0], [955.0, 6387.400000000001], [954.0, 6387.0], [953.0, 6375.0], [989.0, 6325.136363636363], [965.0, 5897.25], [975.0, 6356.2], [960.0, 6386.111111111111], [962.0, 6382.0], [961.0, 6383.0], [964.0, 6376.666666666667], [963.0, 6378.0], [974.0, 6358.142857142857], [973.0, 6372.0], [972.0, 6364.5], [971.0, 6377.4], [970.0, 6378.333333333333], [969.0, 6377.374999999999], [968.0, 6374.900000000001], [984.0, 6341.0], [967.0, 6374.166666666666], [966.0, 6383.0], [977.0, 6156.5], [976.0, 6348.0], [979.0, 6345.333333333333], [978.0, 6340.5], [981.0, 6339.0], [980.0, 6348.0], [983.0, 6338.8], [982.0, 6332.0], [991.0, 5077.333333333334], [990.0, 6297.0], [988.0, 6321.5], [987.0, 6320.192307692306], [986.0, 6326.0], [985.0, 6324.666666666666], [996.0, 5085.0], [1000.0, 6986.188080968181], [999.0, 6326.625], [998.0, 6333.166666666667], [997.0, 6334.125], [995.0, 6336.25], [994.0, 6338.0], [993.0, 6331.159090909091], [992.0, 6325.571428571428], [1.0, 5700.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[997.0110749999931, 6977.496244999988]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 197806.93333333332, "minX": 1.66048056E12, "maxY": 861789.9, "series": [{"data": [[1.66048158E12, 364790.06666666665], [1.66048092E12, 367839.0333333333], [1.66048188E12, 378155.4], [1.66048062E12, 344825.6], [1.66048122E12, 366210.13333333336], [1.66048056E12, 197806.93333333332], [1.66048152E12, 364915.36666666664], [1.66048182E12, 370428.56666666665], [1.66048116E12, 367630.2], [1.66048086E12, 347665.73333333334], [1.66048146E12, 356311.43333333335], [1.6604808E12, 349461.7], [1.66048176E12, 363119.4], [1.6604811E12, 355810.23333333334], [1.6604814E12, 350923.5333333333], [1.6604817E12, 350714.7], [1.66048104E12, 344366.1666666667], [1.66048074E12, 350171.73333333334], [1.66048134E12, 358775.6666666667], [1.66048068E12, 351174.13333333336], [1.66048164E12, 356770.86666666664], [1.66048098E12, 361448.73333333334], [1.66048194E12, 265928.36666666664], [1.66048128E12, 368089.63333333336]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66048158E12, 831331.2333333333], [1.66048092E12, 838279.6166666667], [1.66048188E12, 861789.9], [1.66048062E12, 785833.6], [1.66048122E12, 834567.4666666667], [1.66048056E12, 450788.26666666666], [1.66048152E12, 831616.7833333333], [1.66048182E12, 844180.9833333333], [1.66048116E12, 837803.7], [1.66048086E12, 792306.0666666667], [1.66048146E12, 812009.0166666667], [1.6604808E12, 796398.95], [1.66048176E12, 827523.9], [1.6604811E12, 810866.8166666667], [1.6604814E12, 799730.3666666667], [1.6604817E12, 799254.45], [1.66048104E12, 784786.5833333334], [1.66048074E12, 798017.0666666667], [1.66048134E12, 817624.8333333334], [1.66048068E12, 800301.4666666667], [1.66048164E12, 813056.0333333333], [1.66048098E12, 823716.5666666667], [1.66048194E12, 606032.2833333333], [1.66048128E12, 838850.7166666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66048194E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6395.265902308763, "minX": 1.66048056E12, "maxY": 7271.6328730620135, "series": [{"data": [[1.66048158E12, 6860.597778795544], [1.66048092E12, 6858.098557965248], [1.66048188E12, 6623.996686547395], [1.66048062E12, 7271.6328730620135], [1.66048122E12, 6840.405679744516], [1.66048056E12, 7238.108530405417], [1.66048152E12, 6868.236694517542], [1.66048182E12, 6795.3884316157355], [1.66048116E12, 6837.948988866163], [1.66048086E12, 7195.7203267659515], [1.66048146E12, 7042.355409682342], [1.6604808E12, 7148.520377674195], [1.66048176E12, 7012.471589602052], [1.6604811E12, 7065.029580936755], [1.6604814E12, 7151.738633658684], [1.6604817E12, 7075.2512802191495], [1.66048104E12, 7227.568708308071], [1.66048074E12, 7178.022781488546], [1.66048134E12, 6955.956228172274], [1.66048068E12, 7141.1835156993275], [1.66048164E12, 6995.663076562858], [1.66048098E12, 6920.054425699104], [1.66048194E12, 6395.265902308763], [1.66048128E12, 6817.47917848635]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66048194E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 6395.260719334058, "minX": 1.66048056E12, "maxY": 7271.628633720938, "series": [{"data": [[1.66048158E12, 6860.594343943238], [1.66048092E12, 6858.094356761666], [1.66048188E12, 6623.993041749516], [1.66048062E12, 7271.628633720938], [1.66048122E12, 6840.40031934306], [1.66048056E12, 7238.094172297308], [1.66048152E12, 6868.233260844687], [1.66048182E12, 6795.385725560933], [1.66048116E12, 6837.945466939305], [1.66048086E12, 7195.71552138397], [1.66048146E12, 7042.351775876229], [1.6604808E12, 7148.517031193987], [1.66048176E12, 7012.467563837119], [1.6604811E12, 7065.02641155066], [1.6604814E12, 7151.734825041683], [1.6604817E12, 7075.24806478504], [1.66048104E12, 7227.564463311111], [1.66048074E12, 7178.019322519088], [1.66048134E12, 6955.9516880093015], [1.66048068E12, 7141.177093244543], [1.66048164E12, 6995.658979161759], [1.66048098E12, 6920.050034666056], [1.66048194E12, 6395.260719334058], [1.66048128E12, 6817.474980142971]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66048194E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.005340034553164755, "minX": 1.66048056E12, "maxY": 0.28462837837837723, "series": [{"data": [[1.66048158E12, 0.015914815662926518], [1.66048092E12, 0.015215169751334169], [1.66048188E12, 0.01965981886459024], [1.66048062E12, 0.05244670542635684], [1.66048122E12, 0.015282846715328443], [1.66048056E12, 0.28462837837837723], [1.66048152E12, 0.015909351035824682], [1.66048182E12, 0.017814860750930233], [1.66048116E12, 0.016814360372642553], [1.66048086E12, 0.024747717443536724], [1.66048146E12, 0.01723127417653261], [1.6604808E12, 0.024620533046492154], [1.66048176E12, 0.01633310328962499], [1.6604811E12, 0.012090620964902113], [1.6604814E12, 0.01940014282313736], [1.6604817E12, 0.018101702989162846], [1.66048104E12, 0.007398423286840516], [1.66048074E12, 0.025166984732824388], [1.66048134E12, 0.02060535506402805], [1.66048068E12, 0.023667935299714563], [1.66048164E12, 0.018145633341138], [1.66048098E12, 0.01883522070718743], [1.66048194E12, 0.005340034553164755], [1.66048128E12, 0.015204811074548972]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66048194E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 400.0, "minX": 1.66048056E12, "maxY": 9525.0, "series": [{"data": [[1.66048158E12, 7900.0], [1.66048092E12, 7700.0], [1.66048188E12, 7789.0], [1.66048062E12, 7915.0], [1.66048122E12, 7537.0], [1.66048056E12, 9275.0], [1.66048152E12, 7191.0], [1.66048182E12, 6991.0], [1.66048116E12, 7434.0], [1.66048086E12, 7795.0], [1.66048146E12, 7236.0], [1.6604808E12, 7673.0], [1.66048176E12, 9071.0], [1.6604811E12, 7680.0], [1.6604814E12, 8758.0], [1.6604817E12, 9105.0], [1.66048104E12, 9525.0], [1.66048074E12, 7688.0], [1.66048134E12, 7385.0], [1.66048068E12, 7647.0], [1.66048164E12, 7404.0], [1.66048098E12, 7317.0], [1.66048194E12, 6677.0], [1.66048128E12, 7081.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66048158E12, 7456.5], [1.66048092E12, 7082.0], [1.66048188E12, 7374.5], [1.66048062E12, 7601.0], [1.66048122E12, 7205.0], [1.66048056E12, 8524.2], [1.66048152E12, 7023.0], [1.66048182E12, 6932.0], [1.66048116E12, 7181.0], [1.66048086E12, 7442.5], [1.66048146E12, 7166.0], [1.6604808E12, 7458.0], [1.66048176E12, 7140.0], [1.6604811E12, 7434.0], [1.6604814E12, 8556.0], [1.6604817E12, 7406.2], [1.66048104E12, 9100.0], [1.66048074E12, 7424.0], [1.66048134E12, 7279.0], [1.66048068E12, 7333.0], [1.66048164E12, 7239.7], [1.66048098E12, 7215.0], [1.66048194E12, 6612.0], [1.66048128E12, 6967.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66048158E12, 7858.65], [1.66048092E12, 7633.0], [1.66048188E12, 7734.9000000000015], [1.66048062E12, 7870.0], [1.66048122E12, 7487.3099999999995], [1.66048056E12, 9219.89], [1.66048152E12, 7146.0], [1.66048182E12, 6972.0], [1.66048116E12, 7396.0], [1.66048086E12, 7756.0], [1.66048146E12, 7211.0], [1.6604808E12, 7633.0], [1.66048176E12, 9021.0], [1.6604811E12, 7641.0], [1.6604814E12, 8733.0], [1.6604817E12, 9083.0], [1.66048104E12, 9479.0], [1.66048074E12, 7620.15], [1.66048134E12, 7345.0], [1.66048068E12, 7581.0], [1.66048164E12, 7367.57], [1.66048098E12, 7273.450000000001], [1.66048194E12, 6648.0], [1.66048128E12, 7035.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66048158E12, 7671.0], [1.66048092E12, 7417.800000000003], [1.66048188E12, 7636.0], [1.66048062E12, 7667.0], [1.66048122E12, 7357.0], [1.66048056E12, 8905.599999999999], [1.66048152E12, 7100.1], [1.66048182E12, 6946.0], [1.66048116E12, 7280.550000000001], [1.66048086E12, 7696.0], [1.66048146E12, 7187.0], [1.6604808E12, 7528.0], [1.66048176E12, 8204.75], [1.6604811E12, 7465.0], [1.6604814E12, 8665.55], [1.6604817E12, 9007.0], [1.66048104E12, 9407.4], [1.66048074E12, 7477.0], [1.66048134E12, 7322.0], [1.66048068E12, 7405.0], [1.66048164E12, 7294.0], [1.66048098E12, 7242.0], [1.66048194E12, 6625.0], [1.66048128E12, 7001.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66048158E12, 6508.0], [1.66048092E12, 6535.0], [1.66048188E12, 6229.0], [1.66048062E12, 6720.0], [1.66048122E12, 6541.0], [1.66048056E12, 400.0], [1.66048152E12, 6655.0], [1.66048182E12, 6363.0], [1.66048116E12, 6486.0], [1.66048086E12, 6801.0], [1.66048146E12, 6812.0], [1.6604808E12, 6756.0], [1.66048176E12, 6496.0], [1.6604811E12, 6603.0], [1.6604814E12, 6561.0], [1.6604817E12, 6558.0], [1.66048104E12, 6608.0], [1.66048074E12, 6900.0], [1.66048134E12, 6586.0], [1.66048068E12, 6613.0], [1.66048164E12, 6690.0], [1.66048098E12, 6534.0], [1.66048194E12, 5700.0], [1.66048128E12, 6504.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66048158E12, 6757.0], [1.66048092E12, 6790.0], [1.66048188E12, 6486.0], [1.66048062E12, 7210.0], [1.66048122E12, 6794.0], [1.66048056E12, 7558.0], [1.66048152E12, 6849.0], [1.66048182E12, 6843.0], [1.66048116E12, 6792.0], [1.66048086E12, 7168.0], [1.66048146E12, 7057.0], [1.6604808E12, 7094.0], [1.66048176E12, 6948.0], [1.6604811E12, 7083.0], [1.6604814E12, 6971.0], [1.6604817E12, 6938.0], [1.66048104E12, 6889.0], [1.66048074E12, 7161.0], [1.66048134E12, 6886.0], [1.66048068E12, 7157.0], [1.66048164E12, 6959.0], [1.66048098E12, 6891.0], [1.66048194E12, 6391.0], [1.66048128E12, 6847.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66048194E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 400.0, "minX": 1.0, "maxY": 9101.5, "series": [{"data": [[38.0, 5926.0], [40.0, 981.0], [41.0, 8145.0], [42.0, 7339.5], [47.0, 8114.0], [51.0, 8040.0], [55.0, 4983.5], [56.0, 7343.5], [78.0, 7621.0], [83.0, 2670.0], [81.0, 8682.0], [86.0, 6930.0], [84.0, 7738.5], [85.0, 7281.0], [90.0, 7161.5], [92.0, 8991.0], [99.0, 3356.0], [101.0, 4115.0], [102.0, 4753.5], [110.0, 6189.5], [109.0, 7625.0], [111.0, 7138.0], [108.0, 7708.0], [112.0, 6733.0], [115.0, 7168.0], [119.0, 7394.0], [118.0, 7577.5], [117.0, 7186.0], [120.0, 9101.5], [123.0, 7240.5], [122.0, 7450.0], [121.0, 6916.0], [124.0, 7336.5], [126.0, 7447.5], [127.0, 7200.0], [125.0, 7093.0], [130.0, 7400.5], [131.0, 7298.0], [129.0, 7471.0], [128.0, 7313.0], [132.0, 7142.0], [134.0, 7253.0], [135.0, 7200.0], [133.0, 7262.0], [139.0, 7092.0], [138.0, 7068.0], [136.0, 7164.0], [137.0, 7215.0], [140.0, 7050.0], [141.0, 7009.0], [142.0, 6981.0], [143.0, 6955.0], [144.0, 6914.0], [145.0, 6909.0], [148.0, 6832.0], [147.0, 6846.0], [146.0, 6914.0], [149.0, 6820.0], [151.0, 6811.0], [150.0, 6804.0], [152.0, 6792.0], [156.0, 6552.5], [155.0, 6627.0], [159.0, 6411.0], [157.0, 6662.0], [154.0, 6748.5], [153.0, 6706.0], [158.0, 6622.0], [160.0, 6380.5], [162.0, 6690.0], [161.0, 6496.0], [165.0, 6402.0], [163.0, 7486.0], [166.0, 6359.5], [167.0, 6180.5], [1.0, 400.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 167.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 400.0, "minX": 1.0, "maxY": 9101.5, "series": [{"data": [[38.0, 5926.0], [40.0, 981.0], [41.0, 8145.0], [42.0, 7339.5], [47.0, 8114.0], [51.0, 8040.0], [55.0, 4983.5], [56.0, 7343.5], [78.0, 7621.0], [83.0, 2670.0], [81.0, 8682.0], [86.0, 6930.0], [84.0, 7738.5], [85.0, 7281.0], [90.0, 7161.5], [92.0, 8991.0], [99.0, 3356.0], [101.0, 4115.0], [102.0, 4753.5], [110.0, 6189.5], [109.0, 7625.0], [111.0, 7138.0], [108.0, 7708.0], [112.0, 6733.0], [115.0, 7168.0], [119.0, 7394.0], [118.0, 7577.5], [117.0, 7186.0], [120.0, 9101.5], [123.0, 7240.5], [122.0, 7450.0], [121.0, 6916.0], [124.0, 7336.5], [126.0, 7447.5], [127.0, 7200.0], [125.0, 7093.0], [130.0, 7400.5], [131.0, 7298.0], [129.0, 7471.0], [128.0, 7313.0], [132.0, 7142.0], [134.0, 7253.0], [135.0, 7200.0], [133.0, 7262.0], [139.0, 7092.0], [138.0, 7068.0], [136.0, 7164.0], [137.0, 7215.0], [140.0, 7050.0], [141.0, 7009.0], [142.0, 6981.0], [143.0, 6955.0], [144.0, 6914.0], [145.0, 6909.0], [148.0, 6832.0], [147.0, 6846.0], [146.0, 6914.0], [149.0, 6820.0], [151.0, 6811.0], [150.0, 6804.0], [152.0, 6792.0], [156.0, 6552.5], [155.0, 6627.0], [159.0, 6411.0], [157.0, 6662.0], [154.0, 6748.5], [153.0, 6706.0], [158.0, 6622.0], [160.0, 6380.5], [162.0, 6690.0], [161.0, 6496.0], [165.0, 6402.0], [163.0, 7486.0], [166.0, 6359.5], [167.0, 6180.5], [1.0, 400.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 167.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 89.45, "minX": 1.66048056E12, "maxY": 150.9, "series": [{"data": [[1.66048158E12, 145.55], [1.66048092E12, 146.76666666666668], [1.66048188E12, 150.9], [1.66048062E12, 137.61666666666667], [1.66048122E12, 146.13333333333333], [1.66048056E12, 95.58333333333333], [1.66048152E12, 145.63333333333333], [1.66048182E12, 147.81666666666666], [1.66048116E12, 146.7], [1.66048086E12, 138.73333333333332], [1.66048146E12, 142.16666666666666], [1.6604808E12, 139.45], [1.66048176E12, 144.9], [1.6604811E12, 141.98333333333332], [1.6604814E12, 140.03333333333333], [1.6604817E12, 139.95], [1.66048104E12, 137.41666666666666], [1.66048074E12, 139.73333333333332], [1.66048134E12, 143.16666666666666], [1.66048068E12, 140.13333333333333], [1.66048164E12, 142.38333333333333], [1.66048098E12, 144.25], [1.66048194E12, 89.45], [1.66048128E12, 146.88333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66048194E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 78.93333333333334, "minX": 1.66048056E12, "maxY": 150.9, "series": [{"data": [[1.66048158E12, 145.56666666666666], [1.66048092E12, 146.78333333333333], [1.66048188E12, 150.9], [1.66048062E12, 137.6], [1.66048122E12, 146.13333333333333], [1.66048056E12, 78.93333333333334], [1.66048152E12, 145.61666666666667], [1.66048182E12, 147.81666666666666], [1.66048116E12, 146.7], [1.66048086E12, 138.73333333333332], [1.66048146E12, 142.18333333333334], [1.6604808E12, 139.45], [1.66048176E12, 144.9], [1.6604811E12, 141.98333333333332], [1.6604814E12, 140.03333333333333], [1.6604817E12, 139.95], [1.66048104E12, 137.41666666666666], [1.66048074E12, 139.73333333333332], [1.66048134E12, 143.16666666666666], [1.66048068E12, 140.13333333333333], [1.66048164E12, 142.36666666666667], [1.66048098E12, 144.23333333333332], [1.66048194E12, 106.11666666666666], [1.66048128E12, 146.88333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66048194E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 78.93333333333334, "minX": 1.66048056E12, "maxY": 150.9, "series": [{"data": [[1.66048158E12, 145.56666666666666], [1.66048092E12, 146.78333333333333], [1.66048188E12, 150.9], [1.66048062E12, 137.6], [1.66048122E12, 146.13333333333333], [1.66048056E12, 78.93333333333334], [1.66048152E12, 145.61666666666667], [1.66048182E12, 147.81666666666666], [1.66048116E12, 146.7], [1.66048086E12, 138.73333333333332], [1.66048146E12, 142.18333333333334], [1.6604808E12, 139.45], [1.66048176E12, 144.9], [1.6604811E12, 141.98333333333332], [1.6604814E12, 140.03333333333333], [1.6604817E12, 139.95], [1.66048104E12, 137.41666666666666], [1.66048074E12, 139.73333333333332], [1.66048134E12, 143.16666666666666], [1.66048068E12, 140.13333333333333], [1.66048164E12, 142.36666666666667], [1.66048098E12, 144.23333333333332], [1.66048194E12, 106.11666666666666], [1.66048128E12, 146.88333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66048194E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 78.93333333333334, "minX": 1.66048056E12, "maxY": 150.9, "series": [{"data": [[1.66048158E12, 145.56666666666666], [1.66048092E12, 146.78333333333333], [1.66048188E12, 150.9], [1.66048062E12, 137.6], [1.66048122E12, 146.13333333333333], [1.66048056E12, 78.93333333333334], [1.66048152E12, 145.61666666666667], [1.66048182E12, 147.81666666666666], [1.66048116E12, 146.7], [1.66048086E12, 138.73333333333332], [1.66048146E12, 142.18333333333334], [1.6604808E12, 139.45], [1.66048176E12, 144.9], [1.6604811E12, 141.98333333333332], [1.6604814E12, 140.03333333333333], [1.6604817E12, 139.95], [1.66048104E12, 137.41666666666666], [1.66048074E12, 139.73333333333332], [1.66048134E12, 143.16666666666666], [1.66048068E12, 140.13333333333333], [1.66048164E12, 142.36666666666667], [1.66048098E12, 144.23333333333332], [1.66048194E12, 106.11666666666666], [1.66048128E12, 146.88333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66048194E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

