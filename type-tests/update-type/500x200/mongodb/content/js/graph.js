/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 13.0, "minX": 0.0, "maxY": 10763.0, "series": [{"data": [[0.0, 13.0], [0.1, 66.0], [0.2, 146.0], [0.3, 268.0], [0.4, 376.0], [0.5, 466.0], [0.6, 524.0], [0.7, 552.0], [0.8, 570.0], [0.9, 583.0], [1.0, 594.0], [1.1, 605.0], [1.2, 614.0], [1.3, 621.0], [1.4, 629.0], [1.5, 634.0], [1.6, 638.0], [1.7, 642.0], [1.8, 645.0], [1.9, 649.0], [2.0, 651.0], [2.1, 654.0], [2.2, 657.0], [2.3, 659.0], [2.4, 662.0], [2.5, 665.0], [2.6, 666.0], [2.7, 668.0], [2.8, 670.0], [2.9, 672.0], [3.0, 674.0], [3.1, 677.0], [3.2, 679.0], [3.3, 680.0], [3.4, 682.0], [3.5, 684.0], [3.6, 686.0], [3.7, 688.0], [3.8, 690.0], [3.9, 692.0], [4.0, 693.0], [4.1, 695.0], [4.2, 697.0], [4.3, 698.0], [4.4, 700.0], [4.5, 701.0], [4.6, 703.0], [4.7, 704.0], [4.8, 705.0], [4.9, 707.0], [5.0, 708.0], [5.1, 709.0], [5.2, 711.0], [5.3, 712.0], [5.4, 714.0], [5.5, 715.0], [5.6, 716.0], [5.7, 718.0], [5.8, 719.0], [5.9, 720.0], [6.0, 721.0], [6.1, 723.0], [6.2, 724.0], [6.3, 725.0], [6.4, 727.0], [6.5, 728.0], [6.6, 729.0], [6.7, 730.0], [6.8, 732.0], [6.9, 733.0], [7.0, 734.0], [7.1, 735.0], [7.2, 736.0], [7.3, 737.0], [7.4, 738.0], [7.5, 740.0], [7.6, 741.0], [7.7, 742.0], [7.8, 743.0], [7.9, 744.0], [8.0, 745.0], [8.1, 747.0], [8.2, 748.0], [8.3, 749.0], [8.4, 750.0], [8.5, 751.0], [8.6, 752.0], [8.7, 753.0], [8.8, 755.0], [8.9, 756.0], [9.0, 757.0], [9.1, 758.0], [9.2, 759.0], [9.3, 760.0], [9.4, 761.0], [9.5, 763.0], [9.6, 764.0], [9.7, 765.0], [9.8, 766.0], [9.9, 767.0], [10.0, 768.0], [10.1, 769.0], [10.2, 770.0], [10.3, 772.0], [10.4, 773.0], [10.5, 774.0], [10.6, 775.0], [10.7, 776.0], [10.8, 777.0], [10.9, 778.0], [11.0, 779.0], [11.1, 780.0], [11.2, 781.0], [11.3, 782.0], [11.4, 783.0], [11.5, 784.0], [11.6, 785.0], [11.7, 786.0], [11.8, 787.0], [11.9, 788.0], [12.0, 789.0], [12.1, 790.0], [12.2, 791.0], [12.3, 792.0], [12.4, 793.0], [12.5, 794.0], [12.6, 795.0], [12.7, 796.0], [12.8, 797.0], [12.9, 798.0], [13.0, 799.0], [13.1, 800.0], [13.2, 801.0], [13.3, 802.0], [13.4, 803.0], [13.5, 804.0], [13.6, 805.0], [13.7, 806.0], [13.8, 806.0], [13.9, 807.0], [14.0, 808.0], [14.1, 809.0], [14.2, 810.0], [14.3, 811.0], [14.4, 812.0], [14.5, 813.0], [14.6, 814.0], [14.7, 815.0], [14.8, 816.0], [14.9, 816.0], [15.0, 817.0], [15.1, 818.0], [15.2, 819.0], [15.3, 820.0], [15.4, 820.0], [15.5, 821.0], [15.6, 822.0], [15.7, 823.0], [15.8, 824.0], [15.9, 825.0], [16.0, 826.0], [16.1, 827.0], [16.2, 828.0], [16.3, 828.0], [16.4, 829.0], [16.5, 830.0], [16.6, 831.0], [16.7, 832.0], [16.8, 833.0], [16.9, 834.0], [17.0, 834.0], [17.1, 835.0], [17.2, 836.0], [17.3, 837.0], [17.4, 838.0], [17.5, 839.0], [17.6, 840.0], [17.7, 841.0], [17.8, 842.0], [17.9, 843.0], [18.0, 844.0], [18.1, 845.0], [18.2, 846.0], [18.3, 847.0], [18.4, 848.0], [18.5, 849.0], [18.6, 850.0], [18.7, 851.0], [18.8, 852.0], [18.9, 853.0], [19.0, 854.0], [19.1, 855.0], [19.2, 856.0], [19.3, 857.0], [19.4, 858.0], [19.5, 859.0], [19.6, 860.0], [19.7, 861.0], [19.8, 862.0], [19.9, 862.0], [20.0, 863.0], [20.1, 864.0], [20.2, 865.0], [20.3, 866.0], [20.4, 867.0], [20.5, 868.0], [20.6, 869.0], [20.7, 870.0], [20.8, 871.0], [20.9, 872.0], [21.0, 873.0], [21.1, 873.0], [21.2, 874.0], [21.3, 875.0], [21.4, 876.0], [21.5, 877.0], [21.6, 878.0], [21.7, 879.0], [21.8, 880.0], [21.9, 881.0], [22.0, 881.0], [22.1, 882.0], [22.2, 883.0], [22.3, 884.0], [22.4, 885.0], [22.5, 885.0], [22.6, 886.0], [22.7, 887.0], [22.8, 888.0], [22.9, 889.0], [23.0, 890.0], [23.1, 891.0], [23.2, 891.0], [23.3, 892.0], [23.4, 893.0], [23.5, 894.0], [23.6, 895.0], [23.7, 896.0], [23.8, 897.0], [23.9, 898.0], [24.0, 899.0], [24.1, 900.0], [24.2, 900.0], [24.3, 901.0], [24.4, 902.0], [24.5, 903.0], [24.6, 904.0], [24.7, 905.0], [24.8, 906.0], [24.9, 906.0], [25.0, 907.0], [25.1, 908.0], [25.2, 909.0], [25.3, 910.0], [25.4, 911.0], [25.5, 911.0], [25.6, 912.0], [25.7, 913.0], [25.8, 914.0], [25.9, 915.0], [26.0, 915.0], [26.1, 916.0], [26.2, 917.0], [26.3, 918.0], [26.4, 919.0], [26.5, 919.0], [26.6, 920.0], [26.7, 921.0], [26.8, 922.0], [26.9, 923.0], [27.0, 923.0], [27.1, 924.0], [27.2, 925.0], [27.3, 926.0], [27.4, 927.0], [27.5, 928.0], [27.6, 929.0], [27.7, 929.0], [27.8, 930.0], [27.9, 931.0], [28.0, 932.0], [28.1, 933.0], [28.2, 934.0], [28.3, 935.0], [28.4, 936.0], [28.5, 936.0], [28.6, 937.0], [28.7, 938.0], [28.8, 939.0], [28.9, 940.0], [29.0, 941.0], [29.1, 941.0], [29.2, 942.0], [29.3, 943.0], [29.4, 944.0], [29.5, 944.0], [29.6, 945.0], [29.7, 946.0], [29.8, 947.0], [29.9, 948.0], [30.0, 948.0], [30.1, 949.0], [30.2, 950.0], [30.3, 951.0], [30.4, 951.0], [30.5, 952.0], [30.6, 953.0], [30.7, 954.0], [30.8, 954.0], [30.9, 955.0], [31.0, 956.0], [31.1, 957.0], [31.2, 957.0], [31.3, 958.0], [31.4, 959.0], [31.5, 960.0], [31.6, 961.0], [31.7, 962.0], [31.8, 962.0], [31.9, 963.0], [32.0, 964.0], [32.1, 965.0], [32.2, 965.0], [32.3, 966.0], [32.4, 967.0], [32.5, 968.0], [32.6, 969.0], [32.7, 969.0], [32.8, 970.0], [32.9, 971.0], [33.0, 972.0], [33.1, 973.0], [33.2, 974.0], [33.3, 974.0], [33.4, 975.0], [33.5, 976.0], [33.6, 977.0], [33.7, 978.0], [33.8, 978.0], [33.9, 979.0], [34.0, 980.0], [34.1, 981.0], [34.2, 982.0], [34.3, 983.0], [34.4, 983.0], [34.5, 984.0], [34.6, 985.0], [34.7, 986.0], [34.8, 987.0], [34.9, 988.0], [35.0, 988.0], [35.1, 989.0], [35.2, 990.0], [35.3, 991.0], [35.4, 992.0], [35.5, 993.0], [35.6, 994.0], [35.7, 994.0], [35.8, 995.0], [35.9, 996.0], [36.0, 997.0], [36.1, 998.0], [36.2, 998.0], [36.3, 999.0], [36.4, 1000.0], [36.5, 1001.0], [36.6, 1002.0], [36.7, 1003.0], [36.8, 1004.0], [36.9, 1005.0], [37.0, 1006.0], [37.1, 1006.0], [37.2, 1007.0], [37.3, 1008.0], [37.4, 1009.0], [37.5, 1010.0], [37.6, 1011.0], [37.7, 1012.0], [37.8, 1012.0], [37.9, 1013.0], [38.0, 1014.0], [38.1, 1015.0], [38.2, 1016.0], [38.3, 1017.0], [38.4, 1017.0], [38.5, 1018.0], [38.6, 1019.0], [38.7, 1020.0], [38.8, 1021.0], [38.9, 1022.0], [39.0, 1023.0], [39.1, 1024.0], [39.2, 1025.0], [39.3, 1026.0], [39.4, 1026.0], [39.5, 1027.0], [39.6, 1028.0], [39.7, 1029.0], [39.8, 1030.0], [39.9, 1031.0], [40.0, 1032.0], [40.1, 1033.0], [40.2, 1034.0], [40.3, 1034.0], [40.4, 1035.0], [40.5, 1036.0], [40.6, 1037.0], [40.7, 1038.0], [40.8, 1039.0], [40.9, 1040.0], [41.0, 1040.0], [41.1, 1041.0], [41.2, 1042.0], [41.3, 1043.0], [41.4, 1044.0], [41.5, 1045.0], [41.6, 1046.0], [41.7, 1047.0], [41.8, 1047.0], [41.9, 1048.0], [42.0, 1049.0], [42.1, 1050.0], [42.2, 1051.0], [42.3, 1052.0], [42.4, 1053.0], [42.5, 1053.0], [42.6, 1054.0], [42.7, 1055.0], [42.8, 1056.0], [42.9, 1057.0], [43.0, 1058.0], [43.1, 1059.0], [43.2, 1059.0], [43.3, 1060.0], [43.4, 1061.0], [43.5, 1062.0], [43.6, 1063.0], [43.7, 1064.0], [43.8, 1065.0], [43.9, 1066.0], [44.0, 1067.0], [44.1, 1067.0], [44.2, 1068.0], [44.3, 1069.0], [44.4, 1070.0], [44.5, 1071.0], [44.6, 1072.0], [44.7, 1073.0], [44.8, 1074.0], [44.9, 1075.0], [45.0, 1075.0], [45.1, 1076.0], [45.2, 1077.0], [45.3, 1078.0], [45.4, 1079.0], [45.5, 1080.0], [45.6, 1081.0], [45.7, 1082.0], [45.8, 1083.0], [45.9, 1084.0], [46.0, 1085.0], [46.1, 1086.0], [46.2, 1086.0], [46.3, 1087.0], [46.4, 1088.0], [46.5, 1089.0], [46.6, 1090.0], [46.7, 1091.0], [46.8, 1092.0], [46.9, 1093.0], [47.0, 1093.0], [47.1, 1094.0], [47.2, 1095.0], [47.3, 1096.0], [47.4, 1097.0], [47.5, 1098.0], [47.6, 1099.0], [47.7, 1100.0], [47.8, 1101.0], [47.9, 1102.0], [48.0, 1103.0], [48.1, 1104.0], [48.2, 1105.0], [48.3, 1106.0], [48.4, 1107.0], [48.5, 1108.0], [48.6, 1109.0], [48.7, 1110.0], [48.8, 1111.0], [48.9, 1112.0], [49.0, 1113.0], [49.1, 1114.0], [49.2, 1115.0], [49.3, 1116.0], [49.4, 1117.0], [49.5, 1118.0], [49.6, 1119.0], [49.7, 1120.0], [49.8, 1121.0], [49.9, 1122.0], [50.0, 1123.0], [50.1, 1123.0], [50.2, 1125.0], [50.3, 1126.0], [50.4, 1127.0], [50.5, 1128.0], [50.6, 1128.0], [50.7, 1129.0], [50.8, 1130.0], [50.9, 1131.0], [51.0, 1132.0], [51.1, 1133.0], [51.2, 1134.0], [51.3, 1136.0], [51.4, 1136.0], [51.5, 1138.0], [51.6, 1139.0], [51.7, 1140.0], [51.8, 1141.0], [51.9, 1142.0], [52.0, 1143.0], [52.1, 1144.0], [52.2, 1145.0], [52.3, 1146.0], [52.4, 1147.0], [52.5, 1149.0], [52.6, 1150.0], [52.7, 1151.0], [52.8, 1152.0], [52.9, 1153.0], [53.0, 1154.0], [53.1, 1155.0], [53.2, 1156.0], [53.3, 1157.0], [53.4, 1158.0], [53.5, 1160.0], [53.6, 1161.0], [53.7, 1162.0], [53.8, 1163.0], [53.9, 1164.0], [54.0, 1166.0], [54.1, 1167.0], [54.2, 1168.0], [54.3, 1170.0], [54.4, 1171.0], [54.5, 1172.0], [54.6, 1173.0], [54.7, 1174.0], [54.8, 1175.0], [54.9, 1177.0], [55.0, 1178.0], [55.1, 1179.0], [55.2, 1181.0], [55.3, 1182.0], [55.4, 1183.0], [55.5, 1185.0], [55.6, 1186.0], [55.7, 1188.0], [55.8, 1189.0], [55.9, 1190.0], [56.0, 1192.0], [56.1, 1193.0], [56.2, 1195.0], [56.3, 1196.0], [56.4, 1198.0], [56.5, 1199.0], [56.6, 1201.0], [56.7, 1202.0], [56.8, 1203.0], [56.9, 1205.0], [57.0, 1206.0], [57.1, 1208.0], [57.2, 1209.0], [57.3, 1210.0], [57.4, 1212.0], [57.5, 1213.0], [57.6, 1215.0], [57.7, 1217.0], [57.8, 1218.0], [57.9, 1220.0], [58.0, 1221.0], [58.1, 1223.0], [58.2, 1224.0], [58.3, 1226.0], [58.4, 1227.0], [58.5, 1229.0], [58.6, 1231.0], [58.7, 1232.0], [58.8, 1234.0], [58.9, 1236.0], [59.0, 1237.0], [59.1, 1239.0], [59.2, 1241.0], [59.3, 1242.0], [59.4, 1244.0], [59.5, 1246.0], [59.6, 1248.0], [59.7, 1249.0], [59.8, 1251.0], [59.9, 1253.0], [60.0, 1255.0], [60.1, 1256.0], [60.2, 1258.0], [60.3, 1260.0], [60.4, 1261.0], [60.5, 1263.0], [60.6, 1265.0], [60.7, 1267.0], [60.8, 1268.0], [60.9, 1270.0], [61.0, 1272.0], [61.1, 1273.0], [61.2, 1275.0], [61.3, 1276.0], [61.4, 1278.0], [61.5, 1280.0], [61.6, 1282.0], [61.7, 1283.0], [61.8, 1285.0], [61.9, 1286.0], [62.0, 1288.0], [62.1, 1290.0], [62.2, 1292.0], [62.3, 1294.0], [62.4, 1296.0], [62.5, 1297.0], [62.6, 1299.0], [62.7, 1301.0], [62.8, 1303.0], [62.9, 1305.0], [63.0, 1306.0], [63.1, 1308.0], [63.2, 1310.0], [63.3, 1312.0], [63.4, 1314.0], [63.5, 1316.0], [63.6, 1317.0], [63.7, 1319.0], [63.8, 1321.0], [63.9, 1323.0], [64.0, 1325.0], [64.1, 1327.0], [64.2, 1329.0], [64.3, 1332.0], [64.4, 1334.0], [64.5, 1336.0], [64.6, 1338.0], [64.7, 1340.0], [64.8, 1342.0], [64.9, 1344.0], [65.0, 1346.0], [65.1, 1348.0], [65.2, 1350.0], [65.3, 1352.0], [65.4, 1354.0], [65.5, 1356.0], [65.6, 1359.0], [65.7, 1362.0], [65.8, 1364.0], [65.9, 1367.0], [66.0, 1369.0], [66.1, 1371.0], [66.2, 1374.0], [66.3, 1376.0], [66.4, 1379.0], [66.5, 1382.0], [66.6, 1384.0], [66.7, 1387.0], [66.8, 1389.0], [66.9, 1392.0], [67.0, 1394.0], [67.1, 1397.0], [67.2, 1399.0], [67.3, 1402.0], [67.4, 1404.0], [67.5, 1407.0], [67.6, 1409.0], [67.7, 1412.0], [67.8, 1415.0], [67.9, 1417.0], [68.0, 1420.0], [68.1, 1423.0], [68.2, 1426.0], [68.3, 1428.0], [68.4, 1431.0], [68.5, 1434.0], [68.6, 1437.0], [68.7, 1439.0], [68.8, 1442.0], [68.9, 1445.0], [69.0, 1448.0], [69.1, 1451.0], [69.2, 1455.0], [69.3, 1458.0], [69.4, 1461.0], [69.5, 1465.0], [69.6, 1469.0], [69.7, 1472.0], [69.8, 1475.0], [69.9, 1479.0], [70.0, 1482.0], [70.1, 1485.0], [70.2, 1489.0], [70.3, 1493.0], [70.4, 1496.0], [70.5, 1500.0], [70.6, 1503.0], [70.7, 1508.0], [70.8, 1512.0], [70.9, 1516.0], [71.0, 1520.0], [71.1, 1524.0], [71.2, 1529.0], [71.3, 1533.0], [71.4, 1537.0], [71.5, 1542.0], [71.6, 1546.0], [71.7, 1551.0], [71.8, 1556.0], [71.9, 1560.0], [72.0, 1564.0], [72.1, 1568.0], [72.2, 1572.0], [72.3, 1577.0], [72.4, 1581.0], [72.5, 1586.0], [72.6, 1591.0], [72.7, 1595.0], [72.8, 1600.0], [72.9, 1605.0], [73.0, 1610.0], [73.1, 1616.0], [73.2, 1620.0], [73.3, 1626.0], [73.4, 1631.0], [73.5, 1635.0], [73.6, 1640.0], [73.7, 1645.0], [73.8, 1651.0], [73.9, 1656.0], [74.0, 1661.0], [74.1, 1666.0], [74.2, 1671.0], [74.3, 1676.0], [74.4, 1681.0], [74.5, 1684.0], [74.6, 1689.0], [74.7, 1694.0], [74.8, 1698.0], [74.9, 1703.0], [75.0, 1707.0], [75.1, 1712.0], [75.2, 1717.0], [75.3, 1721.0], [75.4, 1725.0], [75.5, 1730.0], [75.6, 1734.0], [75.7, 1739.0], [75.8, 1742.0], [75.9, 1746.0], [76.0, 1751.0], [76.1, 1755.0], [76.2, 1760.0], [76.3, 1765.0], [76.4, 1770.0], [76.5, 1775.0], [76.6, 1779.0], [76.7, 1784.0], [76.8, 1788.0], [76.9, 1792.0], [77.0, 1798.0], [77.1, 1802.0], [77.2, 1806.0], [77.3, 1811.0], [77.4, 1815.0], [77.5, 1820.0], [77.6, 1824.0], [77.7, 1829.0], [77.8, 1834.0], [77.9, 1839.0], [78.0, 1844.0], [78.1, 1849.0], [78.2, 1853.0], [78.3, 1858.0], [78.4, 1862.0], [78.5, 1866.0], [78.6, 1870.0], [78.7, 1875.0], [78.8, 1880.0], [78.9, 1884.0], [79.0, 1888.0], [79.1, 1893.0], [79.2, 1898.0], [79.3, 1902.0], [79.4, 1907.0], [79.5, 1911.0], [79.6, 1915.0], [79.7, 1920.0], [79.8, 1925.0], [79.9, 1929.0], [80.0, 1934.0], [80.1, 1938.0], [80.2, 1944.0], [80.3, 1948.0], [80.4, 1955.0], [80.5, 1960.0], [80.6, 1964.0], [80.7, 1970.0], [80.8, 1975.0], [80.9, 1981.0], [81.0, 1987.0], [81.1, 1991.0], [81.2, 1996.0], [81.3, 2002.0], [81.4, 2007.0], [81.5, 2012.0], [81.6, 2018.0], [81.7, 2023.0], [81.8, 2028.0], [81.9, 2034.0], [82.0, 2039.0], [82.1, 2045.0], [82.2, 2052.0], [82.3, 2058.0], [82.4, 2066.0], [82.5, 2073.0], [82.6, 2079.0], [82.7, 2086.0], [82.8, 2094.0], [82.9, 2099.0], [83.0, 2107.0], [83.1, 2113.0], [83.2, 2120.0], [83.3, 2128.0], [83.4, 2135.0], [83.5, 2142.0], [83.6, 2150.0], [83.7, 2159.0], [83.8, 2166.0], [83.9, 2175.0], [84.0, 2184.0], [84.1, 2194.0], [84.2, 2203.0], [84.3, 2212.0], [84.4, 2220.0], [84.5, 2228.0], [84.6, 2236.0], [84.7, 2246.0], [84.8, 2256.0], [84.9, 2266.0], [85.0, 2275.0], [85.1, 2285.0], [85.2, 2298.0], [85.3, 2309.0], [85.4, 2321.0], [85.5, 2331.0], [85.6, 2341.0], [85.7, 2351.0], [85.8, 2361.0], [85.9, 2372.0], [86.0, 2383.0], [86.1, 2393.0], [86.2, 2402.0], [86.3, 2413.0], [86.4, 2422.0], [86.5, 2432.0], [86.6, 2442.0], [86.7, 2450.0], [86.8, 2458.0], [86.9, 2466.0], [87.0, 2475.0], [87.1, 2484.0], [87.2, 2494.0], [87.3, 2502.0], [87.4, 2511.0], [87.5, 2519.0], [87.6, 2527.0], [87.7, 2535.0], [87.8, 2543.0], [87.9, 2553.0], [88.0, 2563.0], [88.1, 2573.0], [88.2, 2583.0], [88.3, 2594.0], [88.4, 2604.0], [88.5, 2614.0], [88.6, 2625.0], [88.7, 2637.0], [88.8, 2649.0], [88.9, 2661.0], [89.0, 2674.0], [89.1, 2688.0], [89.2, 2701.0], [89.3, 2715.0], [89.4, 2732.0], [89.5, 2747.0], [89.6, 2765.0], [89.7, 2784.0], [89.8, 2802.0], [89.9, 2820.0], [90.0, 2839.0], [90.1, 2857.0], [90.2, 2873.0], [90.3, 2890.0], [90.4, 2909.0], [90.5, 2930.0], [90.6, 2948.0], [90.7, 2970.0], [90.8, 2991.0], [90.9, 3010.0], [91.0, 3027.0], [91.1, 3046.0], [91.2, 3064.0], [91.3, 3080.0], [91.4, 3098.0], [91.5, 3114.0], [91.6, 3132.0], [91.7, 3149.0], [91.8, 3165.0], [91.9, 3182.0], [92.0, 3202.0], [92.1, 3217.0], [92.2, 3232.0], [92.3, 3249.0], [92.4, 3265.0], [92.5, 3282.0], [92.6, 3299.0], [92.7, 3315.0], [92.8, 3337.0], [92.9, 3355.0], [93.0, 3378.0], [93.1, 3397.0], [93.2, 3414.0], [93.3, 3429.0], [93.4, 3447.0], [93.5, 3464.0], [93.6, 3479.0], [93.7, 3497.0], [93.8, 3513.0], [93.9, 3532.0], [94.0, 3552.0], [94.1, 3571.0], [94.2, 3589.0], [94.3, 3608.0], [94.4, 3631.0], [94.5, 3652.0], [94.6, 3676.0], [94.7, 3702.0], [94.8, 3725.0], [94.9, 3754.0], [95.0, 3773.0], [95.1, 3795.0], [95.2, 3817.0], [95.3, 3833.0], [95.4, 3852.0], [95.5, 3873.0], [95.6, 3891.0], [95.7, 3911.0], [95.8, 3928.0], [95.9, 3948.0], [96.0, 3968.0], [96.1, 3990.0], [96.2, 4012.0], [96.3, 4033.0], [96.4, 4056.0], [96.5, 4081.0], [96.6, 4104.0], [96.7, 4137.0], [96.8, 4170.0], [96.9, 4202.0], [97.0, 4232.0], [97.1, 4262.0], [97.2, 4288.0], [97.3, 4313.0], [97.4, 4353.0], [97.5, 4394.0], [97.6, 4429.0], [97.7, 4461.0], [97.8, 4504.0], [97.9, 4542.0], [98.0, 4582.0], [98.1, 4625.0], [98.2, 4663.0], [98.3, 4705.0], [98.4, 4741.0], [98.5, 4781.0], [98.6, 4830.0], [98.7, 4888.0], [98.8, 4968.0], [98.9, 5068.0], [99.0, 5158.0], [99.1, 5268.0], [99.2, 5363.0], [99.3, 5480.0], [99.4, 5690.0], [99.5, 5894.0], [99.6, 6198.0], [99.7, 6664.0], [99.8, 7221.0], [99.9, 8131.0], [100.0, 10763.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 12237.0, "series": [{"data": [[0.0, 144.0], [100.0, 101.0], [200.0, 90.0], [300.0, 87.0], [400.0, 133.0], [500.0, 497.0], [600.0, 3348.0], [700.0, 8653.0], [800.0, 11030.0], [900.0, 12237.0], [1000.0, 11338.0], [1100.0, 8857.0], [1200.0, 6098.0], [1300.0, 4599.0], [1400.0, 3284.0], [1500.0, 2303.0], [1600.0, 2038.0], [1700.0, 2214.0], [1800.0, 2189.0], [1900.0, 2026.0], [2000.0, 1639.0], [2100.0, 1252.0], [2200.0, 1053.0], [2300.0, 962.0], [2400.0, 1092.0], [2500.0, 1090.0], [2600.0, 829.0], [2700.0, 605.0], [2800.0, 568.0], [2900.0, 491.0], [3000.0, 558.0], [3100.0, 578.0], [3200.0, 619.0], [3300.0, 513.0], [3400.0, 604.0], [3500.0, 537.0], [3700.0, 429.0], [3600.0, 431.0], [3800.0, 522.0], [3900.0, 508.0], [4000.0, 439.0], [4200.0, 367.0], [4300.0, 260.0], [4100.0, 305.0], [4400.0, 269.0], [4500.0, 256.0], [4600.0, 242.0], [4700.0, 255.0], [4800.0, 172.0], [4900.0, 122.0], [5100.0, 96.0], [5000.0, 106.0], [5200.0, 106.0], [5300.0, 101.0], [5500.0, 63.0], [5400.0, 71.0], [5600.0, 29.0], [5700.0, 50.0], [5800.0, 49.0], [5900.0, 42.0], [6100.0, 29.0], [6000.0, 26.0], [6300.0, 26.0], [6200.0, 26.0], [6600.0, 19.0], [6400.0, 20.0], [6500.0, 15.0], [6700.0, 31.0], [6800.0, 13.0], [6900.0, 12.0], [7000.0, 20.0], [7100.0, 12.0], [7200.0, 16.0], [7300.0, 19.0], [7400.0, 8.0], [7500.0, 10.0], [7600.0, 13.0], [7800.0, 7.0], [7700.0, 9.0], [7900.0, 12.0], [8100.0, 10.0], [8000.0, 6.0], [8200.0, 8.0], [8300.0, 10.0], [8400.0, 19.0], [8500.0, 8.0], [8600.0, 2.0], [8700.0, 3.0], [9200.0, 6.0], [9100.0, 5.0], [9000.0, 5.0], [8900.0, 4.0], [8800.0, 4.0], [9300.0, 4.0], [9700.0, 2.0], [9600.0, 4.0], [9900.0, 2.0], [10000.0, 1.0], [10100.0, 1.0], [10200.0, 1.0], [9800.0, 1.0], [10400.0, 2.0], [10600.0, 1.0], [10700.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 16.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 95792.0, "series": [{"data": [[0.0, 16.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1891.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2301.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 95792.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 442.63722986247546, "minX": 1.66173162E12, "maxY": 500.0, "series": [{"data": [[1.66173174E12, 500.0], [1.66173186E12, 500.0], [1.66173168E12, 500.0], [1.6617318E12, 500.0], [1.66173162E12, 499.2430058115942], [1.66173192E12, 442.63722986247546]], "isOverall": false, "label": "Thread Group Create Type", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66173192E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 14.5, "minX": 1.0, "maxY": 2682.0, "series": [{"data": [[2.0, 14.5], [3.0, 15.333333333333332], [4.0, 23.5], [5.0, 15.0], [6.0, 26.57142857142857], [7.0, 21.0], [8.0, 15.0], [9.0, 23.0], [10.0, 24.0], [11.0, 26.5], [12.0, 69.0], [13.0, 22.666666666666668], [14.0, 18.0], [15.0, 39.0], [17.0, 31.666666666666668], [18.0, 22.0], [19.0, 30.666666666666668], [20.0, 41.0], [21.0, 27.125], [22.0, 44.666666666666664], [23.0, 27.666666666666668], [24.0, 88.33333333333333], [25.0, 56.75], [26.0, 76.25], [27.0, 41.5], [28.0, 103.75], [29.0, 101.0], [30.0, 76.33333333333333], [31.0, 164.25], [33.0, 111.6], [32.0, 118.0], [35.0, 119.0], [34.0, 103.0], [37.0, 77.0], [36.0, 112.0], [39.0, 122.0], [38.0, 277.0], [41.0, 121.0], [40.0, 122.0], [43.0, 104.0], [42.0, 102.85714285714286], [45.0, 138.0], [44.0, 103.0], [49.0, 63.5], [48.0, 123.0], [51.0, 78.0], [50.0, 89.0], [53.0, 148.55555555555554], [52.0, 68.0], [55.0, 180.1], [54.0, 116.0], [57.0, 68.66666666666667], [56.0, 139.6], [59.0, 84.75], [58.0, 57.5], [61.0, 277.0], [60.0, 113.8], [63.0, 80.8], [62.0, 81.66666666666666], [67.0, 75.5], [66.0, 76.0], [65.0, 68.33333333333333], [64.0, 76.5], [71.0, 228.0], [70.0, 239.66666666666666], [69.0, 200.5], [68.0, 52.0], [75.0, 220.33333333333331], [74.0, 240.33333333333334], [73.0, 112.0], [72.0, 114.0], [79.0, 259.16666666666663], [78.0, 276.00000000000006], [77.0, 233.0], [76.0, 238.16666666666666], [83.0, 296.6666666666667], [82.0, 207.4], [81.0, 226.5], [80.0, 273.0], [87.0, 179.0], [86.0, 139.0], [85.0, 249.66666666666666], [91.0, 156.0], [89.0, 232.5], [88.0, 706.1666666666665], [95.0, 341.0], [94.0, 191.0], [93.0, 189.0], [92.0, 308.2857142857143], [99.0, 186.14285714285714], [98.0, 181.0], [96.0, 182.0], [103.0, 162.5], [102.0, 163.0], [101.0, 175.0], [100.0, 179.0], [107.0, 191.33333333333334], [106.0, 262.5], [105.0, 940.0], [111.0, 338.3333333333333], [110.0, 337.5], [109.0, 1037.5], [108.0, 263.0], [115.0, 375.5], [114.0, 386.5], [113.0, 346.0], [112.0, 680.0], [119.0, 343.8571428571429], [118.0, 393.0], [117.0, 297.375], [116.0, 242.0], [122.0, 696.0], [121.0, 391.8571428571429], [120.0, 457.75], [127.0, 321.0], [126.0, 352.25], [125.0, 413.4], [135.0, 319.0], [134.0, 327.42857142857144], [133.0, 441.5], [132.0, 310.0], [131.0, 415.5], [129.0, 268.0], [128.0, 588.625], [143.0, 540.5], [142.0, 431.3333333333333], [141.0, 288.0], [140.0, 412.4], [139.0, 346.5], [138.0, 272.2], [137.0, 359.5], [136.0, 314.6666666666667], [151.0, 1353.0], [150.0, 1758.0], [149.0, 1775.3333333333333], [148.0, 1443.2142857142858], [147.0, 1211.0], [146.0, 940.0], [145.0, 529.0], [144.0, 841.0], [159.0, 1951.6666666666665], [158.0, 1290.0], [157.0, 2057.0], [156.0, 2089.5], [155.0, 1773.5], [153.0, 1610.0], [152.0, 1540.25], [167.0, 2059.285714285714], [166.0, 2183.3333333333335], [165.0, 2074.1428571428573], [163.0, 1737.0], [161.0, 1607.6666666666667], [160.0, 1820.3333333333333], [175.0, 2682.0], [174.0, 1995.2222222222224], [173.0, 2176.0], [172.0, 2138.272727272727], [171.0, 2120.0], [170.0, 2015.7], [169.0, 2055.5], [168.0, 2160.0], [183.0, 2343.6666666666665], [182.0, 2059.6666666666665], [181.0, 2237.833333333333], [179.0, 2154.0], [176.0, 2239.0], [186.0, 2038.0], [185.0, 2163.0], [184.0, 2172.0], [199.0, 2230.0], [198.0, 2139.0], [197.0, 2223.0], [196.0, 2148.4], [195.0, 2130.935483870968], [194.0, 2086.0], [207.0, 1105.0], [206.0, 1243.1379310344828], [200.0, 2122.6666666666665], [215.0, 481.625], [214.0, 455.6666666666667], [213.0, 425.875], [212.0, 465.0], [211.0, 488.0], [210.0, 560.2857142857142], [209.0, 1099.3333333333333], [208.0, 1271.888888888889], [223.0, 373.0], [222.0, 367.0], [221.0, 373.0], [220.0, 447.75], [219.0, 564.090909090909], [217.0, 412.6666666666667], [216.0, 411.40000000000003], [231.0, 606.0], [230.0, 680.0], [229.0, 554.1666666666666], [228.0, 541.0], [227.0, 569.0], [226.0, 851.5555555555555], [225.0, 596.0], [224.0, 538.0000000000001], [239.0, 560.0], [238.0, 633.8750000000001], [237.0, 590.0], [236.0, 640.5], [235.0, 548.5], [234.0, 491.0], [233.0, 694.5], [232.0, 962.5], [247.0, 689.5], [246.0, 618.0], [245.0, 546.0], [244.0, 725.0], [243.0, 612.5], [242.0, 791.0], [241.0, 839.0], [240.0, 1060.5], [255.0, 647.5], [254.0, 588.5714285714286], [253.0, 574.0], [252.0, 677.3333333333334], [251.0, 649.4545454545455], [250.0, 608.3124999999999], [249.0, 717.4285714285714], [248.0, 795.75], [270.0, 539.5], [271.0, 710.0], [269.0, 1238.0], [268.0, 635.0], [267.0, 686.8333333333335], [265.0, 612.8666666666667], [264.0, 625.75], [263.0, 546.5], [257.0, 707.0769230769231], [256.0, 888.0], [259.0, 502.16666666666663], [258.0, 699.625], [262.0, 482.6666666666667], [261.0, 551.25], [260.0, 529.0], [284.0, 838.7142857142858], [273.0, 721.5555555555555], [272.0, 527.0], [274.0, 991.6666666666667], [275.0, 792.6666666666666], [279.0, 970.8], [278.0, 553.0], [277.0, 650.6], [276.0, 615.6666666666666], [287.0, 638.4], [281.0, 805.0], [280.0, 645.6666666666666], [286.0, 754.5], [285.0, 880.6666666666667], [283.0, 706.6666666666666], [282.0, 894.0], [302.0, 937.0], [289.0, 759.6], [293.0, 845.6666666666666], [292.0, 695.5555555555554], [295.0, 679.0], [288.0, 618.5], [294.0, 800.5], [303.0, 913.0625], [301.0, 795.3333333333334], [291.0, 738.6363636363636], [290.0, 598.0], [299.0, 664.3333333333334], [298.0, 988.75], [297.0, 1029.75], [296.0, 691.3333333333334], [317.0, 936.1764705882354], [304.0, 861.8235294117648], [307.0, 765.0], [306.0, 723.8571428571427], [305.0, 840.0], [308.0, 717.6], [309.0, 602.5], [311.0, 632.75], [310.0, 594.0], [312.0, 893.75], [313.0, 720.4615384615385], [315.0, 888.7], [314.0, 818.9333333333333], [319.0, 791.0], [318.0, 819.1666666666666], [316.0, 811.875], [334.0, 1142.0], [323.0, 1103.0], [326.0, 873.4], [325.0, 859.875], [324.0, 906.6666666666666], [327.0, 877.0], [320.0, 901.0], [322.0, 987.5], [321.0, 1179.5], [328.0, 1158.5], [329.0, 934.8], [330.0, 979.0], [331.0, 876.8571428571429], [333.0, 1056.0], [332.0, 867.6666666666666], [335.0, 877.0], [349.0, 747.4399999999999], [336.0, 865.0], [337.0, 1056.5], [339.0, 736.4285714285714], [338.0, 824.375], [342.0, 1383.0], [341.0, 743.0], [340.0, 799.0], [345.0, 781.25], [344.0, 778.6666666666666], [351.0, 647.0], [350.0, 714.7333333333333], [347.0, 717.4], [346.0, 834.3333333333334], [366.0, 680.2142857142856], [354.0, 854.4285714285714], [353.0, 695.8], [355.0, 694.75], [359.0, 669.0], [358.0, 764.1], [357.0, 682.6666666666666], [356.0, 815.0], [361.0, 799.4482758620692], [362.0, 890.1], [363.0, 785.4000000000001], [364.0, 871.625], [367.0, 677.9000000000001], [365.0, 751.3513513513512], [360.0, 787.4166666666665], [381.0, 596.5], [369.0, 772.6296296296294], [368.0, 508.0], [375.0, 565.5], [374.0, 626.4615384615385], [373.0, 548.2307692307692], [372.0, 734.1666666666666], [370.0, 920.1818181818181], [371.0, 736.3076923076924], [376.0, 768.8333333333331], [377.0, 509.0], [383.0, 706.0], [382.0, 711.0], [380.0, 655.1], [379.0, 719.875], [378.0, 713.5], [398.0, 758.0], [392.0, 1025.4], [384.0, 1515.0], [385.0, 763.5714285714287], [387.0, 817.7058823529411], [386.0, 648.5], [391.0, 823.6666666666667], [390.0, 926.0], [389.0, 1003.2857142857143], [388.0, 724.5238095238095], [395.0, 1223.25], [399.0, 1060.5], [397.0, 883.027027027027], [396.0, 891.0], [394.0, 945.7173913043476], [393.0, 883.6666666666666], [413.0, 844.1764705882354], [400.0, 849.6153846153848], [401.0, 1063.909090909091], [405.0, 1116.6666666666667], [404.0, 856.8333333333334], [407.0, 870.5], [406.0, 909.8235294117646], [409.0, 1053.8], [408.0, 848.2857142857143], [415.0, 953.8333333333333], [414.0, 842.2777777777778], [412.0, 994.8499999999999], [402.0, 843.5], [411.0, 866.3333333333334], [410.0, 936.5], [430.0, 945.8666666666666], [421.0, 843.5], [420.0, 747.8], [423.0, 891.8181818181818], [417.0, 721.25], [416.0, 828.0], [419.0, 797.6], [418.0, 854.25], [422.0, 967.6], [431.0, 888.5], [429.0, 928.0], [428.0, 961.4999999999999], [427.0, 806.6785714285713], [426.0, 787.7894736842103], [425.0, 829.1428571428571], [424.0, 842.0], [445.0, 1043.0], [432.0, 1071.5], [433.0, 1571.8333333333335], [434.0, 974.0222222222221], [439.0, 895.5294117647057], [438.0, 841.8333333333333], [437.0, 905.0], [441.0, 1285.5], [440.0, 735.8], [447.0, 980.8571428571429], [446.0, 862.0], [444.0, 807.3260869565215], [435.0, 857.6363636363636], [443.0, 702.5], [442.0, 750.0], [462.0, 951.2800000000001], [448.0, 1160.6], [452.0, 817.0], [453.0, 626.5], [455.0, 840.5384615384614], [454.0, 745.896551724138], [457.0, 892.1250000000001], [459.0, 951.9999999999999], [460.0, 987.0540540540542], [451.0, 579.6666666666665], [450.0, 807.4], [449.0, 918.090909090909], [463.0, 1029.7500000000002], [456.0, 779.0], [461.0, 1021.7037037037039], [458.0, 891.3333333333333], [467.0, 715.2558139534883], [465.0, 926.6], [464.0, 938.0], [466.0, 743.9999999999999], [469.0, 1213.2], [468.0, 837.9848484848486], [470.0, 870.6382978723404], [471.0, 1087.111111111111], [474.0, 1045.014925373134], [475.0, 1068.4074074074074], [479.0, 926.8000000000002], [473.0, 814.5], [472.0, 1017.7142857142861], [478.0, 977.3333333333334], [477.0, 982.1857142857141], [476.0, 1011.0520833333328], [495.0, 823.7142857142857], [480.0, 1045.9090909090908], [481.0, 1479.0], [483.0, 1028.967741935484], [482.0, 1145.7727272727277], [487.0, 921.695652173913], [486.0, 990.1071428571429], [485.0, 975.2068965517241], [484.0, 1076.1417322834654], [488.0, 1117.2105263157894], [492.0, 965.8888888888889], [494.0, 933.1325301204819], [493.0, 924.6179775280903], [491.0, 859.8085106382978], [490.0, 980.6944444444448], [489.0, 1057.4324324324325], [496.0, 941.9882352941177], [498.0, 958.2025862068964], [499.0, 876.0802469135803], [500.0, 1542.6115946982318], [497.0, 912.5757864632977], [1.0, 15.5]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[494.04844000000077, 1500.4449900000047]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 64449.316666666666, "minX": 1.66173162E12, "maxY": 2719673.3833333333, "series": [{"data": [[1.66173174E12, 65970.26666666666], [1.66173186E12, 180791.43333333332], [1.66173168E12, 157081.15], [1.6617318E12, 73226.86666666667], [1.66173162E12, 100064.41666666667], [1.66173192E12, 64449.316666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66173174E12, 995046.5666666667], [1.66173186E12, 2719673.3833333333], [1.66173168E12, 2316571.966666667], [1.6617318E12, 1109552.1166666667], [1.66173162E12, 1408522.9666666666], [1.66173192E12, 968966.3333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66173192E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 910.542534381139, "minX": 1.66173162E12, "maxY": 2900.932083413047, "series": [{"data": [[1.66173174E12, 2900.932083413047], [1.66173186E12, 1047.3909284989397], [1.66173168E12, 1209.8320322130025], [1.6617318E12, 2594.3924680449622], [1.66173162E12, 1407.8933639681038], [1.66173192E12, 910.542534381139]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66173192E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 910.5387033398823, "minX": 1.66173162E12, "maxY": 2900.9208915247796, "series": [{"data": [[1.66173174E12, 2900.9208915247796], [1.66173186E12, 1047.387603681795], [1.66173168E12, 1209.8278001479268], [1.6617318E12, 2594.384747362103], [1.66173162E12, 1407.8837680767674], [1.66173192E12, 910.5387033398823]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66173192E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.858546168958739E-4, "minX": 1.66173162E12, "maxY": 0.11346127855115669, "series": [{"data": [[1.66173174E12, 0.04247178113640691], [1.66173186E12, 0.004899730514821705], [1.66173168E12, 0.007560193935409712], [1.6617318E12, 0.021274770524148542], [1.66173162E12, 0.11346127855115669], [1.66173192E12, 7.858546168958739E-4]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66173192E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 14.0, "minX": 1.66173162E12, "maxY": 10487.0, "series": [{"data": [[1.66173174E12, 9955.0], [1.66173186E12, 4195.0], [1.66173168E12, 7393.0], [1.6617318E12, 10487.0], [1.66173162E12, 5265.0], [1.66173192E12, 2907.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66173174E12, 6620.000000000001], [1.66173186E12, 2194.0], [1.66173168E12, 2416.0], [1.6617318E12, 5795.0], [1.66173162E12, 3091.9000000000005], [1.66173192E12, 2044.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66173174E12, 9231.359999999999], [1.66173186E12, 3088.3600000000038], [1.66173168E12, 5195.0], [1.6617318E12, 9457.0], [1.66173162E12, 4896.99], [1.66173192E12, 2506.5499999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66173174E12, 7599.2], [1.66173186E12, 2478.1999999999994], [1.66173168E12, 2761.0], [1.6617318E12, 6299.5], [1.66173162E12, 3412.25], [1.66173192E12, 2233.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66173174E12, 1749.0], [1.66173186E12, 982.0], [1.66173168E12, 1009.0], [1.6617318E12, 1359.0], [1.66173162E12, 1111.0], [1.66173192E12, 14.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66173174E12, 3949.0], [1.66173186E12, 1344.0], [1.66173168E12, 1474.0], [1.6617318E12, 3201.0], [1.66173162E12, 1919.0], [1.66173192E12, 1228.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66173192E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 15.0, "minX": 11.0, "maxY": 9682.0, "series": [{"data": [[25.0, 5642.0], [30.0, 15.0], [51.0, 2140.0], [53.0, 2104.0], [61.0, 1122.0], [63.0, 5671.0], [71.0, 6543.0], [74.0, 6134.0], [73.0, 3868.0], [72.0, 5742.0], [79.0, 4302.0], [81.0, 7550.0], [82.0, 8131.0], [87.0, 4489.5], [89.0, 5720.0], [91.0, 4173.5], [88.0, 9682.0], [92.0, 2607.0], [93.0, 4831.5], [95.0, 3107.0], [94.0, 4229.5], [101.0, 6659.0], [100.0, 6859.5], [102.0, 4248.0], [103.0, 5805.0], [105.0, 5099.0], [107.0, 4310.0], [115.0, 4591.0], [117.0, 3940.5], [116.0, 5197.0], [119.0, 4674.0], [121.0, 5588.0], [122.0, 4322.5], [120.0, 5824.0], [126.0, 4186.0], [125.0, 4204.0], [133.0, 3073.0], [132.0, 3815.0], [134.0, 5754.5], [128.0, 6356.0], [141.0, 3997.5], [143.0, 4825.0], [138.0, 4441.0], [137.0, 1202.0], [149.0, 3748.0], [147.0, 3313.5], [144.0, 3064.0], [146.0, 5039.0], [152.0, 5003.0], [159.0, 2708.0], [155.0, 4190.0], [158.0, 6674.0], [162.0, 2514.0], [174.0, 7768.0], [177.0, 3996.0], [178.0, 4339.5], [182.0, 3109.0], [180.0, 2580.0], [188.0, 2609.0], [189.0, 3100.5], [184.0, 5431.0], [196.0, 3100.0], [206.0, 2101.0], [201.0, 2504.0], [200.0, 1281.0], [204.0, 3951.0], [208.0, 3256.0], [219.0, 2210.0], [217.0, 3164.0], [216.0, 5122.0], [225.0, 2492.0], [229.0, 2345.0], [238.0, 4386.0], [236.0, 4596.0], [235.0, 2383.0], [239.0, 2344.0], [234.0, 3080.0], [244.0, 2399.0], [241.0, 4717.5], [243.0, 2633.0], [250.0, 4182.5], [252.0, 4923.5], [269.0, 4900.5], [257.0, 6972.5], [256.0, 2171.0], [259.0, 3655.5], [271.0, 2389.0], [268.0, 2312.0], [272.0, 3206.0], [287.0, 2069.5], [275.0, 2631.0], [281.0, 3219.0], [276.0, 2420.0], [278.0, 2164.0], [280.0, 3770.0], [282.0, 2580.5], [296.0, 1936.5], [301.0, 2092.0], [299.0, 1991.0], [288.0, 2419.0], [292.0, 2259.0], [307.0, 1954.0], [311.0, 1601.0], [313.0, 2779.0], [314.0, 3222.0], [310.0, 2342.0], [317.0, 2158.0], [306.0, 2499.0], [321.0, 2354.0], [322.0, 1664.0], [329.0, 1543.5], [326.0, 1722.0], [334.0, 2402.0], [346.0, 2478.0], [336.0, 1562.5], [337.0, 1469.0], [341.0, 2371.0], [366.0, 1780.0], [362.0, 1948.0], [357.0, 1946.5], [359.0, 1735.0], [358.0, 1511.0], [364.0, 1664.5], [360.0, 1705.0], [369.0, 2269.5], [376.0, 1491.5], [374.0, 1793.0], [373.0, 1448.5], [375.0, 1639.5], [368.0, 2343.0], [383.0, 1725.0], [384.0, 1435.5], [399.0, 1300.0], [397.0, 1451.0], [387.0, 2884.0], [415.0, 1671.0], [407.0, 1198.0], [400.0, 1487.0], [409.0, 1637.0], [408.0, 1194.0], [425.0, 2188.0], [418.0, 1484.0], [416.0, 1332.0], [430.0, 1719.0], [427.0, 1601.5], [419.0, 2122.0], [431.0, 1463.0], [447.0, 1543.0], [440.0, 1446.0], [443.0, 1479.0], [437.0, 1522.0], [445.0, 1297.0], [432.0, 1391.0], [442.0, 1459.0], [450.0, 1274.0], [454.0, 1325.0], [448.0, 1682.0], [453.0, 1414.0], [463.0, 1473.0], [458.0, 1453.5], [459.0, 1172.5], [451.0, 1307.5], [449.0, 1319.5], [461.0, 1455.0], [462.0, 1304.5], [466.0, 1402.0], [477.0, 1372.0], [474.0, 1823.0], [470.0, 1274.0], [468.0, 1471.0], [472.0, 1407.0], [471.0, 2021.0], [465.0, 1268.5], [467.0, 2164.0], [475.0, 1223.0], [492.0, 1537.0], [486.0, 1229.0], [481.0, 1223.0], [494.0, 1225.0], [482.0, 1503.0], [490.0, 1344.0], [511.0, 1390.0], [508.0, 1433.0], [507.0, 1494.0], [500.0, 1506.5], [499.0, 1137.5], [498.0, 1323.0], [505.0, 1278.5], [509.0, 1177.5], [501.0, 1365.5], [540.0, 1559.0], [530.0, 1532.0], [531.0, 1340.0], [513.0, 1369.0], [532.0, 1312.0], [518.0, 1445.0], [534.0, 1161.0], [533.0, 1464.5], [535.0, 1323.0], [528.0, 1342.5], [512.0, 1213.0], [524.0, 1213.0], [520.0, 1194.5], [523.0, 1156.0], [516.0, 1354.0], [549.0, 1342.0], [544.0, 1557.5], [575.0, 1341.0], [546.0, 1339.0], [571.0, 1199.0], [568.0, 1297.5], [574.0, 1450.5], [547.0, 1250.5], [561.0, 1237.5], [566.0, 1216.0], [565.0, 1264.5], [564.0, 1226.5], [563.0, 1056.0], [573.0, 1265.0], [572.0, 1502.0], [579.0, 1198.0], [577.0, 1286.0], [583.0, 1265.0], [588.0, 1218.0], [614.0, 1334.0], [620.0, 1387.0], [626.0, 1328.0], [650.0, 1345.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[11.0, 1115.0], [25.0, 3950.5], [30.0, 18.0], [51.0, 2150.5], [53.0, 1798.0], [57.0, 4053.0], [61.0, 989.0], [62.0, 4083.0], [63.0, 3936.0], [71.0, 4240.0], [74.0, 5389.0], [73.0, 3037.0], [72.0, 3307.5], [79.0, 2604.5], [81.0, 4702.0], [82.0, 3955.0], [87.0, 2599.5], [89.0, 3055.5], [91.0, 3935.0], [88.0, 4021.0], [92.0, 3520.0], [93.0, 3630.0], [95.0, 2475.5], [94.0, 3362.0], [101.0, 4478.0], [100.0, 4513.0], [102.0, 3633.0], [103.0, 3166.0], [105.0, 1952.0], [107.0, 3763.5], [115.0, 3167.5], [117.0, 3434.0], [116.0, 4020.0], [119.0, 3932.0], [121.0, 4398.5], [122.0, 3018.0], [120.0, 4715.0], [126.0, 3381.0], [125.0, 3867.0], [133.0, 3269.5], [132.0, 3163.0], [134.0, 4300.5], [128.0, 4786.0], [141.0, 3189.0], [143.0, 4210.0], [138.0, 3904.0], [137.0, 507.5], [149.0, 3057.0], [147.0, 2520.0], [144.0, 2283.0], [146.0, 2969.0], [152.0, 3632.0], [159.0, 2313.0], [155.0, 3710.5], [158.0, 4731.5], [162.0, 2168.0], [174.0, 3482.0], [177.0, 2969.0], [178.0, 2182.5], [182.0, 2352.0], [180.0, 1957.0], [188.0, 2069.0], [189.0, 2327.0], [184.0, 3885.0], [196.0, 2338.0], [206.0, 2303.5], [201.0, 2017.0], [200.0, 945.0], [204.0, 2258.0], [208.0, 1670.0], [219.0, 1760.0], [217.0, 2225.0], [216.0, 3482.0], [225.0, 1994.0], [229.0, 1773.0], [238.0, 2636.0], [236.0, 2520.0], [235.0, 1904.0], [239.0, 1651.0], [234.0, 2358.0], [244.0, 1676.0], [241.0, 3380.0], [243.0, 2212.0], [250.0, 2914.0], [252.0, 2498.5], [269.0, 1726.0], [257.0, 4235.0], [256.0, 1739.0], [259.0, 2652.0], [271.0, 1860.0], [268.0, 1511.0], [272.0, 1999.0], [287.0, 1469.0], [275.0, 1187.0], [281.0, 2405.0], [276.0, 2029.0], [278.0, 1520.0], [280.0, 2188.0], [282.0, 1822.0], [296.0, 1440.0], [301.0, 1598.5], [299.0, 1566.5], [288.0, 1679.0], [292.0, 1750.0], [307.0, 1457.0], [311.0, 1272.0], [313.0, 2058.0], [314.0, 2106.0], [310.0, 1614.0], [317.0, 1517.0], [306.0, 1806.0], [321.0, 1703.0], [322.0, 1349.0], [329.0, 1261.0], [326.0, 1303.0], [334.0, 1609.5], [346.0, 1324.0], [336.0, 1329.5], [337.0, 994.5], [341.0, 1572.5], [366.0, 1185.0], [362.0, 1430.5], [357.0, 1384.0], [359.0, 1354.0], [358.0, 1072.5], [364.0, 1355.5], [360.0, 1145.0], [369.0, 1357.0], [376.0, 1099.0], [374.0, 1310.0], [373.0, 1087.0], [375.0, 1233.0], [368.0, 1482.5], [383.0, 1283.0], [384.0, 1085.0], [399.0, 949.0], [397.0, 1085.0], [387.0, 2447.0], [415.0, 1227.0], [407.0, 934.5], [400.0, 1090.0], [409.0, 1186.0], [408.0, 934.0], [425.0, 1334.0], [418.0, 1110.5], [416.0, 1014.0], [430.0, 934.0], [427.0, 1269.0], [419.0, 1171.0], [431.0, 1050.0], [447.0, 1129.0], [440.0, 923.5], [443.0, 1003.5], [437.0, 1082.5], [445.0, 972.0], [432.0, 1030.0], [442.0, 1114.0], [450.0, 822.5], [454.0, 1014.0], [448.0, 1168.0], [453.0, 974.0], [463.0, 1092.0], [458.0, 1127.0], [459.0, 902.0], [451.0, 993.0], [449.0, 979.0], [461.0, 976.0], [462.0, 897.0], [466.0, 988.0], [477.0, 1022.0], [474.0, 1198.0], [470.0, 890.0], [468.0, 1088.0], [472.0, 1014.0], [471.0, 1613.0], [465.0, 935.0], [467.0, 810.5], [475.0, 922.0], [492.0, 1197.0], [486.0, 924.0], [481.0, 918.0], [494.0, 949.0], [482.0, 1086.0], [490.0, 1007.0], [511.0, 961.0], [508.0, 1053.0], [507.0, 1018.0], [500.0, 960.0], [499.0, 896.0], [498.0, 923.0], [505.0, 938.0], [509.0, 889.0], [501.0, 993.0], [540.0, 1069.0], [530.0, 1100.0], [531.0, 979.0], [513.0, 938.5], [532.0, 951.0], [518.0, 1024.5], [534.0, 919.0], [533.0, 1097.0], [535.0, 872.0], [528.0, 941.5], [512.0, 805.0], [524.0, 886.0], [520.0, 898.5], [523.0, 848.0], [516.0, 977.0], [549.0, 959.5], [544.0, 1077.0], [575.0, 921.0], [546.0, 939.0], [571.0, 861.0], [568.0, 934.0], [574.0, 968.0], [547.0, 893.0], [561.0, 880.0], [566.0, 852.0], [565.0, 878.0], [564.0, 890.5], [563.0, 692.5], [573.0, 882.5], [572.0, 1053.0], [579.0, 852.0], [577.0, 887.0], [583.0, 907.0], [588.0, 891.0], [614.0, 894.0], [620.0, 914.0], [626.0, 901.0], [650.0, 903.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 650.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 15.0, "minX": 11.0, "maxY": 9682.0, "series": [{"data": [[25.0, 5642.0], [30.0, 15.0], [51.0, 2140.0], [53.0, 2104.0], [61.0, 1122.0], [63.0, 5671.0], [71.0, 6543.0], [74.0, 6134.0], [73.0, 3868.0], [72.0, 5742.0], [79.0, 4302.0], [81.0, 7550.0], [82.0, 8130.0], [87.0, 4489.5], [89.0, 5720.0], [91.0, 4173.5], [88.0, 9682.0], [92.0, 2607.0], [93.0, 4831.5], [95.0, 3107.0], [94.0, 4229.5], [101.0, 6659.0], [100.0, 6859.5], [102.0, 4248.0], [103.0, 5805.0], [105.0, 5099.0], [107.0, 4310.0], [115.0, 4591.0], [117.0, 3940.5], [116.0, 5197.0], [119.0, 4674.0], [121.0, 5588.0], [122.0, 4322.5], [120.0, 5824.0], [126.0, 4186.0], [125.0, 4204.0], [133.0, 3073.0], [132.0, 3815.0], [134.0, 5754.5], [128.0, 6356.0], [141.0, 3997.5], [143.0, 4824.0], [138.0, 4441.0], [137.0, 1202.0], [149.0, 3748.0], [147.0, 3313.5], [144.0, 3064.0], [146.0, 5039.0], [152.0, 5003.0], [159.0, 2708.0], [155.0, 4190.0], [158.0, 6674.0], [162.0, 2514.0], [174.0, 7768.0], [177.0, 3996.0], [178.0, 4339.5], [182.0, 3109.0], [180.0, 2580.0], [188.0, 2609.0], [189.0, 3100.5], [184.0, 5431.0], [196.0, 3100.0], [206.0, 2101.0], [201.0, 2504.0], [200.0, 1281.0], [204.0, 3951.0], [208.0, 3256.0], [219.0, 2210.0], [217.0, 3164.0], [216.0, 5122.0], [225.0, 2492.0], [229.0, 2345.0], [238.0, 4386.0], [236.0, 4596.0], [235.0, 2383.0], [239.0, 2344.0], [234.0, 3080.0], [244.0, 2399.0], [241.0, 4717.0], [243.0, 2633.0], [250.0, 4182.5], [252.0, 4923.5], [269.0, 4900.5], [257.0, 6972.5], [256.0, 2171.0], [259.0, 3655.5], [271.0, 2389.0], [268.0, 2312.0], [272.0, 3206.0], [287.0, 2069.0], [275.0, 2631.0], [281.0, 3219.0], [276.0, 2420.0], [278.0, 2164.0], [280.0, 3770.0], [282.0, 2580.5], [296.0, 1936.5], [301.0, 2092.0], [299.0, 1991.0], [288.0, 2419.0], [292.0, 2259.0], [307.0, 1954.0], [311.0, 1601.0], [313.0, 2779.0], [314.0, 3222.0], [310.0, 2342.0], [317.0, 2158.0], [306.0, 2499.0], [321.0, 2354.0], [322.0, 1664.0], [329.0, 1543.0], [326.0, 1722.0], [334.0, 2402.0], [346.0, 2478.0], [336.0, 1562.5], [337.0, 1469.0], [341.0, 2371.0], [366.0, 1780.0], [362.0, 1948.0], [357.0, 1946.5], [359.0, 1735.0], [358.0, 1511.0], [364.0, 1664.5], [360.0, 1705.0], [369.0, 2269.5], [376.0, 1491.5], [374.0, 1793.0], [373.0, 1448.5], [375.0, 1639.5], [368.0, 2343.0], [383.0, 1725.0], [384.0, 1435.5], [399.0, 1300.0], [397.0, 1451.0], [387.0, 2884.0], [415.0, 1671.0], [407.0, 1198.0], [400.0, 1487.0], [409.0, 1637.0], [408.0, 1194.0], [425.0, 2188.0], [418.0, 1484.0], [416.0, 1332.0], [430.0, 1719.0], [427.0, 1601.5], [419.0, 2122.0], [431.0, 1463.0], [447.0, 1543.0], [440.0, 1446.0], [443.0, 1479.0], [437.0, 1522.0], [445.0, 1297.0], [432.0, 1391.0], [442.0, 1459.0], [450.0, 1274.0], [454.0, 1325.0], [448.0, 1682.0], [453.0, 1414.0], [463.0, 1473.0], [458.0, 1453.5], [459.0, 1172.5], [451.0, 1307.5], [449.0, 1319.5], [461.0, 1455.0], [462.0, 1304.5], [466.0, 1402.0], [477.0, 1372.0], [474.0, 1823.0], [470.0, 1274.0], [468.0, 1471.0], [472.0, 1407.0], [471.0, 2021.0], [465.0, 1268.5], [467.0, 2164.0], [475.0, 1223.0], [492.0, 1537.0], [486.0, 1229.0], [481.0, 1223.0], [494.0, 1225.0], [482.0, 1503.0], [490.0, 1344.0], [511.0, 1390.0], [508.0, 1433.0], [507.0, 1494.0], [500.0, 1506.5], [499.0, 1137.5], [498.0, 1323.0], [505.0, 1278.5], [509.0, 1177.5], [501.0, 1365.5], [540.0, 1559.0], [530.0, 1532.0], [531.0, 1340.0], [513.0, 1369.0], [532.0, 1312.0], [518.0, 1445.0], [534.0, 1161.0], [533.0, 1464.5], [535.0, 1323.0], [528.0, 1342.5], [512.0, 1213.0], [524.0, 1213.0], [520.0, 1194.5], [523.0, 1156.0], [516.0, 1354.0], [549.0, 1342.0], [544.0, 1557.5], [575.0, 1341.0], [546.0, 1339.0], [571.0, 1199.0], [568.0, 1297.5], [574.0, 1450.5], [547.0, 1250.5], [561.0, 1237.5], [566.0, 1216.0], [565.0, 1264.5], [564.0, 1226.5], [563.0, 1056.0], [573.0, 1265.0], [572.0, 1502.0], [579.0, 1198.0], [577.0, 1286.0], [583.0, 1265.0], [588.0, 1218.0], [614.0, 1334.0], [620.0, 1387.0], [626.0, 1328.0], [650.0, 1345.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[11.0, 1114.5], [25.0, 3950.5], [30.0, 18.0], [51.0, 2150.5], [53.0, 1798.0], [57.0, 4053.0], [61.0, 989.0], [62.0, 4083.0], [63.0, 3936.0], [71.0, 4240.0], [74.0, 5389.0], [73.0, 3037.0], [72.0, 3307.5], [79.0, 2604.5], [81.0, 4702.0], [82.0, 3955.0], [87.0, 2599.5], [89.0, 3055.5], [91.0, 3935.0], [88.0, 4021.0], [92.0, 3520.0], [93.0, 3630.0], [95.0, 2475.5], [94.0, 3362.0], [101.0, 4478.0], [100.0, 4512.5], [102.0, 3633.0], [103.0, 3165.0], [105.0, 1952.0], [107.0, 3763.5], [115.0, 3167.5], [117.0, 3434.0], [116.0, 4020.0], [119.0, 3932.0], [121.0, 4398.5], [122.0, 3018.0], [120.0, 4715.0], [126.0, 3381.0], [125.0, 3867.0], [133.0, 3269.5], [132.0, 3163.0], [134.0, 4300.5], [128.0, 4786.0], [141.0, 3189.0], [143.0, 4210.0], [138.0, 3904.0], [137.0, 507.5], [149.0, 3057.0], [147.0, 2520.0], [144.0, 2283.0], [146.0, 2969.0], [152.0, 3632.0], [159.0, 2313.0], [155.0, 3710.5], [158.0, 4731.5], [162.0, 2168.0], [174.0, 3482.0], [177.0, 2969.0], [178.0, 2182.0], [182.0, 2352.0], [180.0, 1957.0], [188.0, 2069.0], [189.0, 2327.0], [184.0, 3885.0], [196.0, 2338.0], [206.0, 2303.5], [201.0, 2017.0], [200.0, 945.0], [204.0, 2258.0], [208.0, 1670.0], [219.0, 1760.0], [217.0, 2225.0], [216.0, 3482.0], [225.0, 1994.0], [229.0, 1773.0], [238.0, 2636.0], [236.0, 2520.0], [235.0, 1904.0], [239.0, 1651.0], [234.0, 2358.0], [244.0, 1676.0], [241.0, 3380.0], [243.0, 2212.0], [250.0, 2914.0], [252.0, 2498.5], [269.0, 1726.0], [257.0, 4235.0], [256.0, 1739.0], [259.0, 2652.0], [271.0, 1860.0], [268.0, 1511.0], [272.0, 1999.0], [287.0, 1469.0], [275.0, 1187.0], [281.0, 2405.0], [276.0, 2029.0], [278.0, 1520.0], [280.0, 2188.0], [282.0, 1822.0], [296.0, 1440.0], [301.0, 1598.5], [299.0, 1566.5], [288.0, 1679.0], [292.0, 1750.0], [307.0, 1457.0], [311.0, 1272.0], [313.0, 2058.0], [314.0, 2106.0], [310.0, 1614.0], [317.0, 1517.0], [306.0, 1806.0], [321.0, 1703.0], [322.0, 1349.0], [329.0, 1261.0], [326.0, 1303.0], [334.0, 1609.5], [346.0, 1324.0], [336.0, 1329.5], [337.0, 994.5], [341.0, 1572.5], [366.0, 1185.0], [362.0, 1430.5], [357.0, 1384.0], [359.0, 1354.0], [358.0, 1072.5], [364.0, 1355.5], [360.0, 1145.0], [369.0, 1357.0], [376.0, 1099.0], [374.0, 1310.0], [373.0, 1087.0], [375.0, 1233.0], [368.0, 1482.5], [383.0, 1283.0], [384.0, 1085.0], [399.0, 949.0], [397.0, 1085.0], [387.0, 2447.0], [415.0, 1227.0], [407.0, 934.5], [400.0, 1090.0], [409.0, 1186.0], [408.0, 934.0], [425.0, 1334.0], [418.0, 1110.5], [416.0, 1013.5], [430.0, 934.0], [427.0, 1269.0], [419.0, 1171.0], [431.0, 1050.0], [447.0, 1129.0], [440.0, 923.5], [443.0, 1003.5], [437.0, 1082.5], [445.0, 972.0], [432.0, 1030.0], [442.0, 1114.0], [450.0, 822.5], [454.0, 1014.0], [448.0, 1167.0], [453.0, 974.0], [463.0, 1092.0], [458.0, 1127.0], [459.0, 902.0], [451.0, 993.0], [449.0, 979.0], [461.0, 976.0], [462.0, 897.0], [466.0, 988.0], [477.0, 1022.0], [474.0, 1198.0], [470.0, 890.0], [468.0, 1088.0], [472.0, 1014.0], [471.0, 1613.0], [465.0, 935.0], [467.0, 810.5], [475.0, 922.0], [492.0, 1197.0], [486.0, 924.0], [481.0, 918.0], [494.0, 949.0], [482.0, 1086.0], [490.0, 1007.0], [511.0, 961.0], [508.0, 1053.0], [507.0, 1018.0], [500.0, 960.0], [499.0, 896.0], [498.0, 923.0], [505.0, 938.0], [509.0, 889.0], [501.0, 993.0], [540.0, 1069.0], [530.0, 1100.0], [531.0, 979.0], [513.0, 938.5], [532.0, 951.0], [518.0, 1024.5], [534.0, 919.0], [533.0, 1097.0], [535.0, 872.0], [528.0, 941.5], [512.0, 805.0], [524.0, 886.0], [520.0, 898.5], [523.0, 848.0], [516.0, 977.0], [549.0, 959.5], [544.0, 1077.0], [575.0, 921.0], [546.0, 939.0], [571.0, 861.0], [568.0, 934.0], [574.0, 968.0], [547.0, 893.0], [561.0, 880.0], [566.0, 852.0], [565.0, 878.0], [564.0, 890.5], [563.0, 692.5], [573.0, 882.5], [572.0, 1053.0], [579.0, 852.0], [577.0, 887.0], [583.0, 907.0], [588.0, 891.0], [614.0, 894.0], [620.0, 914.0], [626.0, 901.0], [650.0, 903.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 650.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 161.33333333333334, "minX": 1.66173162E12, "maxY": 476.21666666666664, "series": [{"data": [[1.66173174E12, 174.23333333333332], [1.66173186E12, 476.21666666666664], [1.66173168E12, 405.6333333333333], [1.6617318E12, 194.28333333333333], [1.66173162E12, 254.96666666666667], [1.66173192E12, 161.33333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66173192E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 6.733333333333333, "minX": 1.66173162E12, "maxY": 457.3333333333333, "series": [{"data": [[1.66173174E12, 6.85], [1.66173186E12, 18.883333333333333], [1.66173168E12, 17.483333333333334], [1.6617318E12, 7.483333333333333], [1.66173162E12, 12.7], [1.66173192E12, 6.733333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.66173174E12, 167.38333333333333], [1.66173186E12, 457.3333333333333], [1.66173168E12, 388.15], [1.6617318E12, 186.8], [1.66173162E12, 233.93333333333334], [1.66173192E12, 162.93333333333334]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66173192E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 6.733333333333333, "minX": 1.66173162E12, "maxY": 457.3333333333333, "series": [{"data": [[1.66173174E12, 167.38333333333333], [1.66173186E12, 457.3333333333333], [1.66173168E12, 388.15], [1.6617318E12, 186.8], [1.66173162E12, 233.93333333333334], [1.66173192E12, 162.93333333333334]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.66173174E12, 6.85], [1.66173186E12, 18.883333333333333], [1.66173168E12, 17.483333333333334], [1.6617318E12, 7.483333333333333], [1.66173162E12, 12.7], [1.66173192E12, 6.733333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66173192E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 6.733333333333333, "minX": 1.66173162E12, "maxY": 457.3333333333333, "series": [{"data": [[1.66173174E12, 6.85], [1.66173186E12, 18.883333333333333], [1.66173168E12, 17.483333333333334], [1.6617318E12, 7.483333333333333], [1.66173162E12, 12.7], [1.66173192E12, 6.733333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.66173174E12, 167.38333333333333], [1.66173186E12, 457.3333333333333], [1.66173168E12, 388.15], [1.6617318E12, 186.8], [1.66173162E12, 233.93333333333334], [1.66173192E12, 162.93333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66173192E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

