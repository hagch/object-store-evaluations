/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 375.0, "minX": 0.0, "maxY": 5818.0, "series": [{"data": [[0.0, 375.0], [0.1, 2089.0], [0.2, 2744.0], [0.3, 3055.0], [0.4, 3074.0], [0.5, 3086.0], [0.6, 3140.0], [0.7, 3155.0], [0.8, 3163.0], [0.9, 3179.0], [1.0, 3195.0], [1.1, 3203.0], [1.2, 3211.0], [1.3, 3215.0], [1.4, 3218.0], [1.5, 3221.0], [1.6, 3224.0], [1.7, 3227.0], [1.8, 3230.0], [1.9, 3232.0], [2.0, 3235.0], [2.1, 3239.0], [2.2, 3243.0], [2.3, 3247.0], [2.4, 3253.0], [2.5, 3256.0], [2.6, 3259.0], [2.7, 3262.0], [2.8, 3264.0], [2.9, 3267.0], [3.0, 3269.0], [3.1, 3271.0], [3.2, 3273.0], [3.3, 3275.0], [3.4, 3278.0], [3.5, 3280.0], [3.6, 3283.0], [3.7, 3285.0], [3.8, 3288.0], [3.9, 3291.0], [4.0, 3293.0], [4.1, 3296.0], [4.2, 3299.0], [4.3, 3301.0], [4.4, 3304.0], [4.5, 3307.0], [4.6, 3309.0], [4.7, 3312.0], [4.8, 3314.0], [4.9, 3316.0], [5.0, 3318.0], [5.1, 3319.0], [5.2, 3321.0], [5.3, 3322.0], [5.4, 3324.0], [5.5, 3325.0], [5.6, 3327.0], [5.7, 3329.0], [5.8, 3330.0], [5.9, 3331.0], [6.0, 3333.0], [6.1, 3335.0], [6.2, 3336.0], [6.3, 3338.0], [6.4, 3340.0], [6.5, 3341.0], [6.6, 3343.0], [6.7, 3344.0], [6.8, 3346.0], [6.9, 3347.0], [7.0, 3349.0], [7.1, 3350.0], [7.2, 3351.0], [7.3, 3353.0], [7.4, 3354.0], [7.5, 3356.0], [7.6, 3357.0], [7.7, 3359.0], [7.8, 3360.0], [7.9, 3362.0], [8.0, 3363.0], [8.1, 3365.0], [8.2, 3366.0], [8.3, 3367.0], [8.4, 3369.0], [8.5, 3371.0], [8.6, 3372.0], [8.7, 3373.0], [8.8, 3375.0], [8.9, 3376.0], [9.0, 3377.0], [9.1, 3378.0], [9.2, 3379.0], [9.3, 3380.0], [9.4, 3382.0], [9.5, 3383.0], [9.6, 3384.0], [9.7, 3385.0], [9.8, 3387.0], [9.9, 3388.0], [10.0, 3389.0], [10.1, 3390.0], [10.2, 3391.0], [10.3, 3392.0], [10.4, 3394.0], [10.5, 3395.0], [10.6, 3396.0], [10.7, 3397.0], [10.8, 3398.0], [10.9, 3399.0], [11.0, 3400.0], [11.1, 3401.0], [11.2, 3402.0], [11.3, 3403.0], [11.4, 3404.0], [11.5, 3405.0], [11.6, 3406.0], [11.7, 3407.0], [11.8, 3408.0], [11.9, 3409.0], [12.0, 3410.0], [12.1, 3411.0], [12.2, 3412.0], [12.3, 3412.0], [12.4, 3413.0], [12.5, 3414.0], [12.6, 3415.0], [12.7, 3415.0], [12.8, 3416.0], [12.9, 3417.0], [13.0, 3418.0], [13.1, 3419.0], [13.2, 3419.0], [13.3, 3420.0], [13.4, 3421.0], [13.5, 3422.0], [13.6, 3422.0], [13.7, 3423.0], [13.8, 3424.0], [13.9, 3425.0], [14.0, 3426.0], [14.1, 3427.0], [14.2, 3427.0], [14.3, 3428.0], [14.4, 3429.0], [14.5, 3429.0], [14.6, 3430.0], [14.7, 3430.0], [14.8, 3431.0], [14.9, 3432.0], [15.0, 3432.0], [15.1, 3433.0], [15.2, 3433.0], [15.3, 3434.0], [15.4, 3435.0], [15.5, 3435.0], [15.6, 3436.0], [15.7, 3437.0], [15.8, 3437.0], [15.9, 3438.0], [16.0, 3438.0], [16.1, 3439.0], [16.2, 3440.0], [16.3, 3440.0], [16.4, 3441.0], [16.5, 3441.0], [16.6, 3442.0], [16.7, 3442.0], [16.8, 3443.0], [16.9, 3443.0], [17.0, 3444.0], [17.1, 3444.0], [17.2, 3445.0], [17.3, 3445.0], [17.4, 3446.0], [17.5, 3446.0], [17.6, 3447.0], [17.7, 3448.0], [17.8, 3448.0], [17.9, 3449.0], [18.0, 3449.0], [18.1, 3449.0], [18.2, 3450.0], [18.3, 3450.0], [18.4, 3451.0], [18.5, 3451.0], [18.6, 3452.0], [18.7, 3452.0], [18.8, 3453.0], [18.9, 3453.0], [19.0, 3454.0], [19.1, 3454.0], [19.2, 3455.0], [19.3, 3455.0], [19.4, 3456.0], [19.5, 3456.0], [19.6, 3457.0], [19.7, 3457.0], [19.8, 3458.0], [19.9, 3459.0], [20.0, 3459.0], [20.1, 3460.0], [20.2, 3460.0], [20.3, 3461.0], [20.4, 3461.0], [20.5, 3462.0], [20.6, 3462.0], [20.7, 3463.0], [20.8, 3463.0], [20.9, 3464.0], [21.0, 3464.0], [21.1, 3465.0], [21.2, 3465.0], [21.3, 3466.0], [21.4, 3466.0], [21.5, 3467.0], [21.6, 3467.0], [21.7, 3468.0], [21.8, 3468.0], [21.9, 3469.0], [22.0, 3469.0], [22.1, 3470.0], [22.2, 3470.0], [22.3, 3470.0], [22.4, 3471.0], [22.5, 3471.0], [22.6, 3472.0], [22.7, 3472.0], [22.8, 3473.0], [22.9, 3473.0], [23.0, 3474.0], [23.1, 3474.0], [23.2, 3475.0], [23.3, 3475.0], [23.4, 3475.0], [23.5, 3476.0], [23.6, 3476.0], [23.7, 3477.0], [23.8, 3477.0], [23.9, 3478.0], [24.0, 3478.0], [24.1, 3479.0], [24.2, 3479.0], [24.3, 3479.0], [24.4, 3480.0], [24.5, 3481.0], [24.6, 3481.0], [24.7, 3482.0], [24.8, 3482.0], [24.9, 3483.0], [25.0, 3483.0], [25.1, 3484.0], [25.2, 3484.0], [25.3, 3485.0], [25.4, 3485.0], [25.5, 3486.0], [25.6, 3486.0], [25.7, 3486.0], [25.8, 3487.0], [25.9, 3487.0], [26.0, 3488.0], [26.1, 3488.0], [26.2, 3489.0], [26.3, 3489.0], [26.4, 3490.0], [26.5, 3490.0], [26.6, 3490.0], [26.7, 3491.0], [26.8, 3491.0], [26.9, 3492.0], [27.0, 3492.0], [27.1, 3493.0], [27.2, 3493.0], [27.3, 3493.0], [27.4, 3494.0], [27.5, 3494.0], [27.6, 3495.0], [27.7, 3495.0], [27.8, 3495.0], [27.9, 3496.0], [28.0, 3496.0], [28.1, 3497.0], [28.2, 3497.0], [28.3, 3497.0], [28.4, 3498.0], [28.5, 3498.0], [28.6, 3499.0], [28.7, 3499.0], [28.8, 3499.0], [28.9, 3500.0], [29.0, 3500.0], [29.1, 3500.0], [29.2, 3501.0], [29.3, 3501.0], [29.4, 3502.0], [29.5, 3502.0], [29.6, 3502.0], [29.7, 3503.0], [29.8, 3503.0], [29.9, 3504.0], [30.0, 3504.0], [30.1, 3504.0], [30.2, 3505.0], [30.3, 3505.0], [30.4, 3505.0], [30.5, 3506.0], [30.6, 3506.0], [30.7, 3507.0], [30.8, 3507.0], [30.9, 3507.0], [31.0, 3508.0], [31.1, 3508.0], [31.2, 3509.0], [31.3, 3509.0], [31.4, 3509.0], [31.5, 3510.0], [31.6, 3510.0], [31.7, 3511.0], [31.8, 3511.0], [31.9, 3511.0], [32.0, 3512.0], [32.1, 3512.0], [32.2, 3513.0], [32.3, 3513.0], [32.4, 3514.0], [32.5, 3514.0], [32.6, 3515.0], [32.7, 3515.0], [32.8, 3516.0], [32.9, 3516.0], [33.0, 3517.0], [33.1, 3517.0], [33.2, 3518.0], [33.3, 3518.0], [33.4, 3519.0], [33.5, 3519.0], [33.6, 3519.0], [33.7, 3520.0], [33.8, 3520.0], [33.9, 3521.0], [34.0, 3521.0], [34.1, 3522.0], [34.2, 3522.0], [34.3, 3522.0], [34.4, 3523.0], [34.5, 3523.0], [34.6, 3524.0], [34.7, 3524.0], [34.8, 3524.0], [34.9, 3525.0], [35.0, 3525.0], [35.1, 3526.0], [35.2, 3526.0], [35.3, 3527.0], [35.4, 3527.0], [35.5, 3527.0], [35.6, 3528.0], [35.7, 3528.0], [35.8, 3529.0], [35.9, 3529.0], [36.0, 3530.0], [36.1, 3530.0], [36.2, 3530.0], [36.3, 3531.0], [36.4, 3531.0], [36.5, 3531.0], [36.6, 3532.0], [36.7, 3532.0], [36.8, 3533.0], [36.9, 3533.0], [37.0, 3534.0], [37.1, 3534.0], [37.2, 3535.0], [37.3, 3535.0], [37.4, 3536.0], [37.5, 3536.0], [37.6, 3537.0], [37.7, 3537.0], [37.8, 3538.0], [37.9, 3538.0], [38.0, 3539.0], [38.1, 3539.0], [38.2, 3540.0], [38.3, 3540.0], [38.4, 3541.0], [38.5, 3541.0], [38.6, 3542.0], [38.7, 3542.0], [38.8, 3543.0], [38.9, 3543.0], [39.0, 3543.0], [39.1, 3544.0], [39.2, 3544.0], [39.3, 3545.0], [39.4, 3545.0], [39.5, 3546.0], [39.6, 3546.0], [39.7, 3547.0], [39.8, 3547.0], [39.9, 3548.0], [40.0, 3548.0], [40.1, 3548.0], [40.2, 3549.0], [40.3, 3550.0], [40.4, 3550.0], [40.5, 3550.0], [40.6, 3551.0], [40.7, 3551.0], [40.8, 3552.0], [40.9, 3552.0], [41.0, 3553.0], [41.1, 3553.0], [41.2, 3554.0], [41.3, 3554.0], [41.4, 3554.0], [41.5, 3555.0], [41.6, 3555.0], [41.7, 3556.0], [41.8, 3556.0], [41.9, 3557.0], [42.0, 3557.0], [42.1, 3557.0], [42.2, 3558.0], [42.3, 3558.0], [42.4, 3559.0], [42.5, 3559.0], [42.6, 3559.0], [42.7, 3560.0], [42.8, 3560.0], [42.9, 3561.0], [43.0, 3561.0], [43.1, 3562.0], [43.2, 3562.0], [43.3, 3562.0], [43.4, 3563.0], [43.5, 3563.0], [43.6, 3564.0], [43.7, 3564.0], [43.8, 3565.0], [43.9, 3565.0], [44.0, 3565.0], [44.1, 3566.0], [44.2, 3566.0], [44.3, 3567.0], [44.4, 3567.0], [44.5, 3568.0], [44.6, 3568.0], [44.7, 3568.0], [44.8, 3569.0], [44.9, 3569.0], [45.0, 3570.0], [45.1, 3570.0], [45.2, 3570.0], [45.3, 3571.0], [45.4, 3571.0], [45.5, 3571.0], [45.6, 3572.0], [45.7, 3572.0], [45.8, 3572.0], [45.9, 3573.0], [46.0, 3573.0], [46.1, 3573.0], [46.2, 3574.0], [46.3, 3574.0], [46.4, 3575.0], [46.5, 3575.0], [46.6, 3575.0], [46.7, 3576.0], [46.8, 3576.0], [46.9, 3577.0], [47.0, 3577.0], [47.1, 3577.0], [47.2, 3578.0], [47.3, 3578.0], [47.4, 3578.0], [47.5, 3579.0], [47.6, 3579.0], [47.7, 3580.0], [47.8, 3580.0], [47.9, 3581.0], [48.0, 3581.0], [48.1, 3581.0], [48.2, 3582.0], [48.3, 3582.0], [48.4, 3583.0], [48.5, 3583.0], [48.6, 3583.0], [48.7, 3584.0], [48.8, 3584.0], [48.9, 3585.0], [49.0, 3585.0], [49.1, 3586.0], [49.2, 3586.0], [49.3, 3586.0], [49.4, 3587.0], [49.5, 3587.0], [49.6, 3588.0], [49.7, 3588.0], [49.8, 3588.0], [49.9, 3589.0], [50.0, 3589.0], [50.1, 3590.0], [50.2, 3590.0], [50.3, 3590.0], [50.4, 3591.0], [50.5, 3591.0], [50.6, 3592.0], [50.7, 3592.0], [50.8, 3593.0], [50.9, 3593.0], [51.0, 3593.0], [51.1, 3594.0], [51.2, 3594.0], [51.3, 3595.0], [51.4, 3595.0], [51.5, 3596.0], [51.6, 3596.0], [51.7, 3597.0], [51.8, 3597.0], [51.9, 3598.0], [52.0, 3598.0], [52.1, 3598.0], [52.2, 3599.0], [52.3, 3599.0], [52.4, 3600.0], [52.5, 3600.0], [52.6, 3601.0], [52.7, 3601.0], [52.8, 3601.0], [52.9, 3602.0], [53.0, 3602.0], [53.1, 3603.0], [53.2, 3603.0], [53.3, 3603.0], [53.4, 3604.0], [53.5, 3604.0], [53.6, 3605.0], [53.7, 3605.0], [53.8, 3606.0], [53.9, 3606.0], [54.0, 3607.0], [54.1, 3607.0], [54.2, 3608.0], [54.3, 3608.0], [54.4, 3608.0], [54.5, 3609.0], [54.6, 3609.0], [54.7, 3610.0], [54.8, 3610.0], [54.9, 3610.0], [55.0, 3611.0], [55.1, 3611.0], [55.2, 3612.0], [55.3, 3612.0], [55.4, 3613.0], [55.5, 3613.0], [55.6, 3613.0], [55.7, 3614.0], [55.8, 3614.0], [55.9, 3615.0], [56.0, 3615.0], [56.1, 3616.0], [56.2, 3616.0], [56.3, 3616.0], [56.4, 3617.0], [56.5, 3617.0], [56.6, 3618.0], [56.7, 3618.0], [56.8, 3619.0], [56.9, 3619.0], [57.0, 3619.0], [57.1, 3620.0], [57.2, 3620.0], [57.3, 3621.0], [57.4, 3621.0], [57.5, 3622.0], [57.6, 3622.0], [57.7, 3622.0], [57.8, 3623.0], [57.9, 3623.0], [58.0, 3624.0], [58.1, 3624.0], [58.2, 3625.0], [58.3, 3625.0], [58.4, 3625.0], [58.5, 3626.0], [58.6, 3626.0], [58.7, 3626.0], [58.8, 3627.0], [58.9, 3627.0], [59.0, 3628.0], [59.1, 3628.0], [59.2, 3628.0], [59.3, 3629.0], [59.4, 3629.0], [59.5, 3630.0], [59.6, 3630.0], [59.7, 3630.0], [59.8, 3631.0], [59.9, 3631.0], [60.0, 3632.0], [60.1, 3632.0], [60.2, 3632.0], [60.3, 3633.0], [60.4, 3633.0], [60.5, 3633.0], [60.6, 3634.0], [60.7, 3634.0], [60.8, 3634.0], [60.9, 3635.0], [61.0, 3635.0], [61.1, 3635.0], [61.2, 3636.0], [61.3, 3636.0], [61.4, 3637.0], [61.5, 3637.0], [61.6, 3637.0], [61.7, 3638.0], [61.8, 3638.0], [61.9, 3639.0], [62.0, 3639.0], [62.1, 3639.0], [62.2, 3640.0], [62.3, 3640.0], [62.4, 3640.0], [62.5, 3641.0], [62.6, 3641.0], [62.7, 3642.0], [62.8, 3642.0], [62.9, 3642.0], [63.0, 3643.0], [63.1, 3643.0], [63.2, 3644.0], [63.3, 3644.0], [63.4, 3644.0], [63.5, 3645.0], [63.6, 3645.0], [63.7, 3646.0], [63.8, 3646.0], [63.9, 3647.0], [64.0, 3647.0], [64.1, 3647.0], [64.2, 3648.0], [64.3, 3648.0], [64.4, 3649.0], [64.5, 3649.0], [64.6, 3650.0], [64.7, 3650.0], [64.8, 3650.0], [64.9, 3651.0], [65.0, 3651.0], [65.1, 3652.0], [65.2, 3652.0], [65.3, 3652.0], [65.4, 3653.0], [65.5, 3653.0], [65.6, 3653.0], [65.7, 3654.0], [65.8, 3654.0], [65.9, 3655.0], [66.0, 3655.0], [66.1, 3655.0], [66.2, 3656.0], [66.3, 3656.0], [66.4, 3657.0], [66.5, 3657.0], [66.6, 3657.0], [66.7, 3658.0], [66.8, 3658.0], [66.9, 3658.0], [67.0, 3659.0], [67.1, 3659.0], [67.2, 3660.0], [67.3, 3660.0], [67.4, 3660.0], [67.5, 3661.0], [67.6, 3661.0], [67.7, 3662.0], [67.8, 3662.0], [67.9, 3663.0], [68.0, 3663.0], [68.1, 3663.0], [68.2, 3664.0], [68.3, 3664.0], [68.4, 3665.0], [68.5, 3665.0], [68.6, 3665.0], [68.7, 3666.0], [68.8, 3666.0], [68.9, 3667.0], [69.0, 3667.0], [69.1, 3667.0], [69.2, 3668.0], [69.3, 3668.0], [69.4, 3669.0], [69.5, 3669.0], [69.6, 3670.0], [69.7, 3670.0], [69.8, 3670.0], [69.9, 3671.0], [70.0, 3671.0], [70.1, 3672.0], [70.2, 3672.0], [70.3, 3673.0], [70.4, 3673.0], [70.5, 3673.0], [70.6, 3674.0], [70.7, 3674.0], [70.8, 3675.0], [70.9, 3675.0], [71.0, 3676.0], [71.1, 3676.0], [71.2, 3676.0], [71.3, 3677.0], [71.4, 3677.0], [71.5, 3678.0], [71.6, 3678.0], [71.7, 3679.0], [71.8, 3679.0], [71.9, 3679.0], [72.0, 3680.0], [72.1, 3680.0], [72.2, 3681.0], [72.3, 3681.0], [72.4, 3682.0], [72.5, 3682.0], [72.6, 3683.0], [72.7, 3683.0], [72.8, 3684.0], [72.9, 3684.0], [73.0, 3685.0], [73.1, 3685.0], [73.2, 3686.0], [73.3, 3686.0], [73.4, 3686.0], [73.5, 3687.0], [73.6, 3687.0], [73.7, 3688.0], [73.8, 3688.0], [73.9, 3689.0], [74.0, 3689.0], [74.1, 3690.0], [74.2, 3691.0], [74.3, 3691.0], [74.4, 3691.0], [74.5, 3692.0], [74.6, 3692.0], [74.7, 3693.0], [74.8, 3693.0], [74.9, 3694.0], [75.0, 3694.0], [75.1, 3695.0], [75.2, 3695.0], [75.3, 3696.0], [75.4, 3697.0], [75.5, 3697.0], [75.6, 3698.0], [75.7, 3698.0], [75.8, 3699.0], [75.9, 3699.0], [76.0, 3700.0], [76.1, 3700.0], [76.2, 3701.0], [76.3, 3701.0], [76.4, 3702.0], [76.5, 3702.0], [76.6, 3703.0], [76.7, 3703.0], [76.8, 3704.0], [76.9, 3704.0], [77.0, 3705.0], [77.1, 3705.0], [77.2, 3706.0], [77.3, 3706.0], [77.4, 3707.0], [77.5, 3708.0], [77.6, 3708.0], [77.7, 3709.0], [77.8, 3709.0], [77.9, 3710.0], [78.0, 3711.0], [78.1, 3711.0], [78.2, 3712.0], [78.3, 3713.0], [78.4, 3713.0], [78.5, 3714.0], [78.6, 3715.0], [78.7, 3715.0], [78.8, 3716.0], [78.9, 3717.0], [79.0, 3717.0], [79.1, 3718.0], [79.2, 3718.0], [79.3, 3719.0], [79.4, 3720.0], [79.5, 3721.0], [79.6, 3721.0], [79.7, 3722.0], [79.8, 3723.0], [79.9, 3724.0], [80.0, 3725.0], [80.1, 3725.0], [80.2, 3726.0], [80.3, 3727.0], [80.4, 3727.0], [80.5, 3728.0], [80.6, 3729.0], [80.7, 3730.0], [80.8, 3730.0], [80.9, 3731.0], [81.0, 3732.0], [81.1, 3733.0], [81.2, 3733.0], [81.3, 3734.0], [81.4, 3735.0], [81.5, 3735.0], [81.6, 3736.0], [81.7, 3737.0], [81.8, 3737.0], [81.9, 3738.0], [82.0, 3738.0], [82.1, 3739.0], [82.2, 3739.0], [82.3, 3740.0], [82.4, 3741.0], [82.5, 3741.0], [82.6, 3742.0], [82.7, 3743.0], [82.8, 3743.0], [82.9, 3744.0], [83.0, 3745.0], [83.1, 3745.0], [83.2, 3746.0], [83.3, 3747.0], [83.4, 3747.0], [83.5, 3748.0], [83.6, 3749.0], [83.7, 3749.0], [83.8, 3750.0], [83.9, 3751.0], [84.0, 3752.0], [84.1, 3752.0], [84.2, 3753.0], [84.3, 3754.0], [84.4, 3755.0], [84.5, 3756.0], [84.6, 3757.0], [84.7, 3758.0], [84.8, 3759.0], [84.9, 3759.0], [85.0, 3760.0], [85.1, 3761.0], [85.2, 3762.0], [85.3, 3763.0], [85.4, 3764.0], [85.5, 3764.0], [85.6, 3765.0], [85.7, 3766.0], [85.8, 3767.0], [85.9, 3768.0], [86.0, 3769.0], [86.1, 3769.0], [86.2, 3771.0], [86.3, 3771.0], [86.4, 3772.0], [86.5, 3773.0], [86.6, 3775.0], [86.7, 3776.0], [86.8, 3777.0], [86.9, 3778.0], [87.0, 3779.0], [87.1, 3780.0], [87.2, 3781.0], [87.3, 3783.0], [87.4, 3784.0], [87.5, 3785.0], [87.6, 3786.0], [87.7, 3788.0], [87.8, 3789.0], [87.9, 3791.0], [88.0, 3792.0], [88.1, 3793.0], [88.2, 3794.0], [88.3, 3796.0], [88.4, 3797.0], [88.5, 3799.0], [88.6, 3800.0], [88.7, 3801.0], [88.8, 3802.0], [88.9, 3803.0], [89.0, 3805.0], [89.1, 3806.0], [89.2, 3807.0], [89.3, 3809.0], [89.4, 3810.0], [89.5, 3811.0], [89.6, 3812.0], [89.7, 3814.0], [89.8, 3815.0], [89.9, 3816.0], [90.0, 3818.0], [90.1, 3819.0], [90.2, 3821.0], [90.3, 3822.0], [90.4, 3823.0], [90.5, 3825.0], [90.6, 3827.0], [90.7, 3828.0], [90.8, 3830.0], [90.9, 3832.0], [91.0, 3835.0], [91.1, 3837.0], [91.2, 3839.0], [91.3, 3842.0], [91.4, 3844.0], [91.5, 3846.0], [91.6, 3849.0], [91.7, 3852.0], [91.8, 3854.0], [91.9, 3856.0], [92.0, 3859.0], [92.1, 3862.0], [92.2, 3866.0], [92.3, 3869.0], [92.4, 3871.0], [92.5, 3874.0], [92.6, 3877.0], [92.7, 3879.0], [92.8, 3881.0], [92.9, 3883.0], [93.0, 3885.0], [93.1, 3888.0], [93.2, 3890.0], [93.3, 3893.0], [93.4, 3896.0], [93.5, 3899.0], [93.6, 3901.0], [93.7, 3904.0], [93.8, 3908.0], [93.9, 3911.0], [94.0, 3915.0], [94.1, 3918.0], [94.2, 3922.0], [94.3, 3926.0], [94.4, 3930.0], [94.5, 3935.0], [94.6, 3940.0], [94.7, 3945.0], [94.8, 3955.0], [94.9, 3967.0], [95.0, 3978.0], [95.1, 3986.0], [95.2, 3992.0], [95.3, 3997.0], [95.4, 4003.0], [95.5, 4010.0], [95.6, 4020.0], [95.7, 4030.0], [95.8, 4039.0], [95.9, 4048.0], [96.0, 4058.0], [96.1, 4069.0], [96.2, 4083.0], [96.3, 4090.0], [96.4, 4094.0], [96.5, 4099.0], [96.6, 4106.0], [96.7, 4115.0], [96.8, 4123.0], [96.9, 4143.0], [97.0, 4171.0], [97.1, 4183.0], [97.2, 4191.0], [97.3, 4199.0], [97.4, 4208.0], [97.5, 4224.0], [97.6, 4239.0], [97.7, 4260.0], [97.8, 4306.0], [97.9, 4373.0], [98.0, 4460.0], [98.1, 4547.0], [98.2, 4574.0], [98.3, 4582.0], [98.4, 4592.0], [98.5, 4620.0], [98.6, 4649.0], [98.7, 4705.0], [98.8, 4793.0], [98.9, 4883.0], [99.0, 5015.0], [99.1, 5160.0], [99.2, 5399.0], [99.3, 5593.0], [99.4, 5629.0], [99.5, 5675.0], [99.6, 5704.0], [99.7, 5718.0], [99.8, 5735.0], [99.9, 5766.0], [100.0, 5818.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 23655.0, "series": [{"data": [[600.0, 4.0], [700.0, 5.0], [800.0, 4.0], [900.0, 4.0], [1000.0, 5.0], [1100.0, 4.0], [1200.0, 5.0], [1300.0, 5.0], [1400.0, 4.0], [1500.0, 8.0], [1600.0, 8.0], [1700.0, 7.0], [1800.0, 4.0], [1900.0, 9.0], [2000.0, 17.0], [2100.0, 15.0], [2200.0, 12.0], [2300.0, 11.0], [2400.0, 17.0], [2500.0, 18.0], [2600.0, 15.0], [2700.0, 21.0], [2800.0, 15.0], [2900.0, 23.0], [3000.0, 299.0], [3100.0, 494.0], [3200.0, 3173.0], [3300.0, 6758.0], [3400.0, 17870.0], [3500.0, 23470.0], [3600.0, 23655.0], [3700.0, 12607.0], [3800.0, 4940.0], [3900.0, 1838.0], [4000.0, 1156.0], [4100.0, 794.0], [4200.0, 479.0], [4300.0, 150.0], [4400.0, 121.0], [4500.0, 374.0], [4600.0, 269.0], [4700.0, 111.0], [4800.0, 102.0], [4900.0, 76.0], [5000.0, 82.0], [5100.0, 64.0], [5200.0, 39.0], [5300.0, 31.0], [5400.0, 34.0], [5500.0, 74.0], [5600.0, 272.0], [5700.0, 391.0], [5800.0, 29.0], [300.0, 1.0], [400.0, 3.0], [500.0, 4.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 99952.0, "series": [{"data": [[0.0, 4.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 44.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 99952.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 482.9670063694262, "minX": 1.66047972E12, "maxY": 500.0, "series": [{"data": [[1.66047996E12, 500.0], [1.66048026E12, 500.0], [1.6604802E12, 500.0], [1.6604799E12, 500.0], [1.66047984E12, 500.0], [1.66048044E12, 482.9670063694262], [1.66048014E12, 500.0], [1.66048008E12, 500.0], [1.66047978E12, 500.0], [1.66047972E12, 492.24688057040953], [1.66048038E12, 500.0], [1.66048032E12, 500.0], [1.66048002E12, 500.0]], "isOverall": false, "label": "Thread Group Create Type", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66048044E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1766.0, "minX": 1.0, "maxY": 3624.1888850765167, "series": [{"data": [[2.0, 2911.0], [3.0, 2876.0], [4.0, 2962.0], [5.0, 2962.0], [6.0, 2962.0], [7.0, 2964.0], [8.0, 2992.0], [9.0, 2993.0], [10.0, 3016.0], [11.0, 2996.0], [12.0, 3012.0], [13.0, 3012.0], [14.0, 3020.0], [15.0, 3020.0], [16.0, 3028.0], [17.0, 3064.0], [18.0, 3029.0], [19.0, 3078.0], [20.0, 3008.0], [21.0, 3022.0], [22.0, 3061.0], [23.0, 3087.0], [24.0, 3055.0], [25.0, 3080.0], [26.0, 3100.0], [27.0, 3099.0], [28.0, 3049.0], [29.0, 3034.0], [30.0, 3085.0], [31.0, 3051.0], [33.0, 3073.0], [32.0, 3095.0], [35.0, 3079.0], [34.0, 3072.0], [37.0, 3094.0], [36.0, 3080.0], [39.0, 3096.0], [38.0, 3093.0], [41.0, 3090.0], [40.0, 3126.0], [43.0, 3127.0], [42.0, 3104.0], [45.0, 3100.0], [44.0, 3126.0], [47.0, 3095.0], [46.0, 3121.0], [49.0, 3111.0], [48.0, 3060.0], [51.0, 3113.0], [50.0, 3111.0], [53.0, 3123.0], [52.0, 3120.0], [55.0, 3122.0], [54.0, 3121.0], [57.0, 3131.0], [56.0, 3131.0], [59.0, 3137.0], [58.0, 3138.0], [61.0, 3088.0], [60.0, 3138.0], [63.0, 3123.0], [62.0, 3159.0], [67.0, 3140.0], [66.0, 3129.0], [65.0, 3146.0], [64.0, 3122.0], [71.0, 3149.0], [70.0, 3150.0], [69.0, 3101.0], [68.0, 3153.0], [75.0, 3145.0], [74.0, 3164.0], [73.0, 3142.0], [72.0, 3164.0], [79.0, 3162.0], [78.0, 3160.0], [77.0, 3151.0], [76.0, 3150.0], [83.0, 3150.0], [82.0, 3149.0], [81.0, 3089.0], [80.0, 3150.0], [87.0, 3135.0], [86.0, 3163.0], [85.0, 3163.0], [84.0, 3152.0], [91.0, 3156.0], [90.0, 3155.0], [89.0, 3156.0], [88.0, 3155.0], [95.0, 3155.0], [94.0, 3155.0], [93.0, 3157.0], [92.0, 3157.0], [99.0, 3160.0], [98.0, 3148.0], [97.0, 3160.0], [96.0, 3154.0], [103.0, 3147.0], [102.0, 3167.0], [101.0, 3140.0], [100.0, 3160.0], [107.0, 3158.0], [106.0, 3147.0], [105.0, 3158.0], [104.0, 3173.0], [111.0, 3165.0], [110.0, 3165.0], [109.0, 3164.0], [108.0, 3166.0], [115.0, 3154.0], [114.0, 3156.0], [113.0, 3157.0], [112.0, 3130.0], [119.0, 3151.0], [118.0, 3151.0], [117.0, 3151.0], [116.0, 3153.0], [123.0, 3152.0], [122.0, 3147.0], [121.0, 3150.0], [120.0, 3150.0], [127.0, 3118.0], [126.0, 3144.0], [125.0, 3144.0], [124.0, 3170.0], [135.0, 3149.0], [134.0, 3149.0], [133.0, 3134.0], [132.0, 3157.0], [131.0, 3159.0], [130.0, 3134.0], [129.0, 3160.0], [128.0, 3161.0], [143.0, 3156.0], [142.0, 3140.0], [141.0, 3163.0], [140.0, 3164.0], [139.0, 3146.0], [138.0, 3145.0], [137.0, 3146.0], [136.0, 3147.0], [148.0, 1766.0], [151.0, 3149.0], [150.0, 3138.0], [149.0, 3158.0], [147.0, 3146.0], [146.0, 3161.0], [145.0, 3154.0], [144.0, 3155.0], [159.0, 3150.0], [158.0, 3140.0], [157.0, 3140.0], [156.0, 3178.0], [155.0, 3170.0], [154.0, 3146.0], [153.0, 3147.0], [152.0, 3148.0], [160.0, 1785.0], [167.0, 3160.0], [166.0, 3160.0], [165.0, 3159.0], [164.0, 3161.0], [163.0, 3161.0], [162.0, 3161.0], [161.0, 3163.0], [168.0, 1780.5], [175.0, 1815.5], [174.0, 3145.0], [173.0, 3147.0], [172.0, 3149.0], [171.0, 3137.0], [170.0, 3155.0], [169.0, 3159.0], [181.0, 1831.0], [183.0, 3154.0], [182.0, 3156.0], [180.0, 3150.0], [179.0, 3150.0], [178.0, 3150.0], [177.0, 3132.0], [176.0, 3151.0], [186.0, 1848.0], [190.0, 1856.0], [191.0, 3157.0], [189.0, 3163.0], [188.0, 3158.0], [187.0, 3158.0], [185.0, 3160.0], [184.0, 3154.0], [194.0, 1871.0], [198.0, 1878.5], [199.0, 3180.0], [197.0, 3174.0], [196.0, 3165.0], [195.0, 3164.0], [193.0, 3171.0], [192.0, 3163.0], [205.0, 1903.0], [207.0, 3182.0], [206.0, 3179.0], [204.0, 3120.0], [203.0, 3174.0], [202.0, 3188.0], [201.0, 3182.0], [200.0, 3183.0], [210.0, 1913.0], [215.0, 3188.0], [214.0, 3190.0], [213.0, 3190.0], [212.0, 3189.0], [211.0, 3189.0], [209.0, 3196.0], [208.0, 3183.0], [219.0, 1937.5], [222.0, 1955.5], [223.0, 3192.0], [221.0, 3209.0], [220.0, 3202.0], [218.0, 3196.0], [217.0, 3191.0], [216.0, 3203.0], [231.0, 3219.0], [230.0, 3218.0], [229.0, 3178.0], [228.0, 3209.0], [227.0, 3209.0], [226.0, 3211.0], [225.0, 3211.0], [224.0, 3205.0], [232.0, 1970.5], [239.0, 3208.0], [238.0, 3208.0], [237.0, 3208.0], [236.0, 3208.0], [235.0, 3179.0], [234.0, 3179.0], [233.0, 3220.0], [242.0, 1961.0], [247.0, 3199.0], [246.0, 3197.0], [245.0, 3230.0], [244.0, 3223.0], [243.0, 3207.0], [241.0, 3207.0], [240.0, 3207.0], [252.0, 1996.5], [255.0, 3221.0], [254.0, 3214.0], [253.0, 3217.0], [251.0, 3217.0], [250.0, 3218.0], [249.0, 3219.0], [248.0, 3219.0], [270.0, 3238.0], [258.0, 2012.0], [257.0, 3203.0], [256.0, 3222.0], [259.0, 3218.0], [263.0, 3227.0], [262.0, 3226.0], [261.0, 3228.0], [260.0, 3219.0], [271.0, 1999.0], [269.0, 3237.0], [268.0, 3232.0], [267.0, 3184.0], [266.0, 3229.0], [265.0, 3228.0], [264.0, 3229.0], [287.0, 3253.0], [281.0, 2051.5], [286.0, 2046.5], [285.0, 3252.0], [284.0, 3253.0], [275.0, 3238.0], [274.0, 3233.0], [273.0, 3232.0], [272.0, 3233.0], [283.0, 3246.0], [282.0, 3247.0], [280.0, 3249.0], [279.0, 3247.0], [278.0, 3247.0], [277.0, 3219.0], [276.0, 3254.0], [302.0, 3275.0], [296.0, 2087.5], [299.0, 2077.5], [303.0, 3273.0], [301.0, 3274.0], [300.0, 3273.0], [298.0, 3272.0], [297.0, 3274.0], [295.0, 3268.0], [289.0, 3261.0], [288.0, 3253.0], [291.0, 3241.0], [290.0, 3261.0], [294.0, 3266.0], [293.0, 3260.0], [292.0, 3259.0], [319.0, 3275.0], [314.0, 2117.0], [318.0, 3276.0], [317.0, 3278.0], [316.0, 3279.0], [307.0, 3282.0], [306.0, 3273.0], [305.0, 3273.0], [304.0, 3274.0], [315.0, 3279.0], [313.0, 3261.0], [312.0, 3288.0], [311.0, 3287.0], [310.0, 3288.0], [309.0, 3282.0], [308.0, 3281.0], [334.0, 3299.0], [324.0, 2109.0], [326.0, 3281.0], [325.0, 3282.0], [327.0, 2141.5], [333.0, 2147.0], [335.0, 3282.0], [332.0, 3295.0], [323.0, 3283.0], [322.0, 3284.0], [321.0, 3284.0], [320.0, 3275.0], [331.0, 3296.0], [330.0, 3297.0], [329.0, 3295.0], [328.0, 3296.0], [351.0, 3325.0], [341.0, 2159.0], [340.0, 3296.0], [343.0, 3296.0], [337.0, 3301.0], [336.0, 3293.0], [339.0, 3309.0], [338.0, 3302.0], [342.0, 3301.0], [346.0, 2189.0], [348.0, 2195.0], [350.0, 3324.0], [349.0, 3322.0], [347.0, 3307.0], [345.0, 3299.0], [344.0, 3297.0], [366.0, 2214.0], [367.0, 3343.0], [365.0, 3342.0], [364.0, 3336.0], [363.0, 3349.0], [362.0, 3342.0], [361.0, 3341.0], [360.0, 3332.0], [359.0, 3332.0], [353.0, 3326.0], [352.0, 3326.0], [355.0, 3326.0], [354.0, 3329.0], [358.0, 3332.0], [357.0, 3332.0], [356.0, 3329.0], [383.0, 3339.0], [376.0, 2229.5], [382.0, 2234.5], [381.0, 3333.0], [380.0, 3346.0], [371.0, 3348.0], [370.0, 3341.0], [369.0, 3336.0], [368.0, 3349.0], [379.0, 3311.0], [378.0, 3345.0], [377.0, 3345.0], [375.0, 3344.0], [374.0, 3338.0], [373.0, 3326.0], [372.0, 3348.0], [398.0, 3333.0], [390.0, 2260.0], [389.0, 3337.0], [388.0, 3318.0], [391.0, 3334.0], [385.0, 3345.0], [384.0, 3338.0], [387.0, 3343.0], [386.0, 3343.0], [396.0, 2257.5], [399.0, 3332.0], [397.0, 3333.0], [395.0, 3321.0], [394.0, 3341.0], [393.0, 3341.0], [392.0, 3334.0], [414.0, 3287.0], [406.0, 2282.5], [405.0, 3327.0], [404.0, 3360.0], [407.0, 3320.0], [401.0, 3332.0], [400.0, 3331.0], [403.0, 3331.0], [402.0, 3331.0], [412.0, 2285.5], [415.0, 3335.0], [413.0, 3340.0], [411.0, 3342.0], [410.0, 3341.0], [409.0, 3341.0], [408.0, 3321.0], [431.0, 3340.0], [416.0, 2290.0], [423.0, 3344.0], [422.0, 3316.0], [421.0, 3350.0], [420.0, 3350.0], [424.0, 2305.0], [430.0, 3320.5], [429.0, 3342.5], [428.0, 3336.5], [419.0, 3342.0], [418.0, 3334.0], [417.0, 3333.0], [427.0, 3348.0], [426.0, 3297.0], [425.0, 3340.0], [444.0, 2677.6666666666665], [433.0, 2289.5], [435.0, 2323.0], [434.0, 3331.0], [438.0, 2331.0], [437.0, 3348.0], [436.0, 3346.0], [439.0, 3334.8], [432.0, 3319.0], [447.0, 3327.5], [441.0, 3341.0], [440.0, 3335.0], [446.0, 3330.0], [445.0, 3331.25], [443.0, 3324.0], [442.0, 3341.0], [462.0, 3323.0], [448.0, 2679.3333333333335], [451.0, 2348.5], [450.0, 3298.0], [449.0, 3349.0], [455.0, 3142.7], [454.0, 3318.0], [453.0, 3340.0], [452.0, 3316.75], [463.0, 3323.0], [457.0, 3336.6], [456.0, 3333.0], [461.0, 3317.333333333333], [460.0, 3319.333333333333], [459.0, 3323.375], [458.0, 3329.1666666666665], [479.0, 3343.0], [469.0, 3183.538461538461], [468.0, 3328.6666666666665], [470.0, 3331.0], [477.0, 3156.0], [478.0, 3344.0], [476.0, 3346.875], [467.0, 3325.12], [466.0, 3325.5], [465.0, 3320.8749999999995], [464.0, 3326.8], [471.0, 3332.666666666667], [475.0, 3341.5], [474.0, 3347.4], [473.0, 3339.227272727273], [472.0, 3335.6666666666665], [494.0, 3344.75], [485.0, 3264.88], [484.0, 3352.137931034483], [487.0, 3347.0], [481.0, 3352.25], [480.0, 3345.6666666666665], [483.0, 3354.75], [482.0, 3350.1428571428573], [486.0, 3333.75], [492.0, 3190.7500000000005], [495.0, 3342.0], [493.0, 3348.6], [491.0, 3347.0], [490.0, 3341.3333333333335], [489.0, 3343.3333333333335], [488.0, 3342.125], [500.0, 3624.1888850765167], [499.0, 3347.642857142857], [498.0, 3352.0], [497.0, 3346.9090909090905], [496.0, 3347.7999999999997], [1.0, 2902.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[498.5759199999978, 3619.8543300000024]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 46862.2, "minX": 1.66047972E12, "maxY": 813436.7666666667, "series": [{"data": [[1.66047996E12, 344658.5333333333], [1.66048026E12, 337683.5], [1.6604802E12, 349545.23333333334], [1.6604799E12, 353387.76666666666], [1.66047984E12, 347498.6666666667], [1.66048044E12, 327868.3333333333], [1.66048014E12, 356937.93333333335], [1.66048008E12, 336138.13333333336], [1.66047978E12, 327701.26666666666], [1.66047972E12, 46862.2], [1.66048038E12, 354599.0], [1.66048032E12, 352260.06666666665], [1.66048002E12, 341526.0333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66047996E12, 785452.8666666667], [1.66048026E12, 769557.25], [1.6604802E12, 796589.3166666667], [1.6604799E12, 805346.1833333333], [1.66047984E12, 791925.3333333334], [1.66048044E12, 747189.1666666666], [1.66048014E12, 813436.7666666667], [1.66048008E12, 766035.4666666667], [1.66047978E12, 746808.4333333333], [1.66047972E12, 106795.7], [1.66048038E12, 808106.5], [1.66048032E12, 802776.2333333333], [1.66048002E12, 778314.1166666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66048044E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3489.8308280254864, "minX": 1.66047972E12, "maxY": 3958.348484848488, "series": [{"data": [[1.66047996E12, 3637.9247455162376], [1.66048026E12, 3712.498577612861], [1.6604802E12, 3579.3112677739177], [1.6604799E12, 3548.4917858409126], [1.66047984E12, 3602.729447115381], [1.66048044E12, 3489.8308280254864], [1.66048014E12, 3518.934589281533], [1.66048008E12, 3724.768016898601], [1.66047978E12, 3841.061560030589], [1.66047972E12, 3958.348484848488], [1.66048038E12, 3531.6434628975344], [1.66048032E12, 3557.4937159117844], [1.66048002E12, 3667.0248257307057]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66048044E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3489.8282802547674, "minX": 1.66047972E12, "maxY": 3958.3262032085513, "series": [{"data": [[1.66047996E12, 3637.9214735821474], [1.66048026E12, 3712.4936301793477], [1.6604802E12, 3579.3069661847276], [1.6604799E12, 3548.487885592723], [1.66047984E12, 3602.726322115387], [1.66048044E12, 3489.8282802547674], [1.66048014E12, 3518.9311958811113], [1.66048008E12, 3724.763667992058], [1.66047978E12, 3841.053912821821], [1.66047972E12, 3958.3262032085513], [1.66048038E12, 3531.640753828021], [1.66048032E12, 3557.4908702869297], [1.66048002E12, 3667.022502140147]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66048044E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.004280298397945457, "minX": 1.66047972E12, "maxY": 6.76381461675579, "series": [{"data": [[1.66047996E12, 0.015269025690741634], [1.66048026E12, 0.013110698824984637], [1.6604802E12, 0.012187836061656125], [1.6604799E12, 0.011937123271480918], [1.66047984E12, 0.009975961538461545], [1.66048044E12, 0.009681528662420419], [1.66048014E12, 0.011701380762930133], [1.66048008E12, 0.008325049701789254], [1.66047978E12, 0.015166964058118787], [1.66047972E12, 6.76381461675579], [1.66048038E12, 0.010365135453474682], [1.66048032E12, 0.01114536400284561], [1.66048002E12, 0.004280298397945457]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66048044E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 375.0, "minX": 1.66047972E12, "maxY": 5818.0, "series": [{"data": [[1.66047996E12, 4159.0], [1.66048026E12, 5818.0], [1.6604802E12, 3801.0], [1.6604799E12, 4235.0], [1.66047984E12, 3959.0], [1.66048044E12, 4679.0], [1.66048014E12, 3794.0], [1.66048008E12, 5733.0], [1.66047978E12, 4277.0], [1.66047972E12, 5224.0], [1.66048038E12, 3717.0], [1.66048032E12, 3947.0], [1.66048002E12, 3886.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66047996E12, 3849.0], [1.66048026E12, 3770.0], [1.6604802E12, 3728.0], [1.6604799E12, 3817.0], [1.66047984E12, 3759.0], [1.66048044E12, 3673.0], [1.66048014E12, 3697.3], [1.66048008E12, 3767.0], [1.66047978E12, 4093.0], [1.66047972E12, 4972.8], [1.66048038E12, 3642.0], [1.66048032E12, 3724.0], [1.66048002E12, 3799.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66047996E12, 4109.0], [1.66048026E12, 5774.14], [1.6604802E12, 3769.0], [1.6604799E12, 4207.0], [1.66047984E12, 3885.0], [1.66048044E12, 4622.49], [1.66048014E12, 3773.0], [1.66048008E12, 5696.51], [1.66047978E12, 4243.0], [1.66047972E12, 5195.77], [1.66048038E12, 3690.0], [1.66048032E12, 3909.0], [1.66048002E12, 3850.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66047996E12, 3930.3499999999995], [1.66048026E12, 5396.899999999999], [1.6604802E12, 3744.0], [1.6604799E12, 4062.0], [1.66047984E12, 3813.0], [1.66048044E12, 4554.0], [1.66048014E12, 3746.0], [1.66048008E12, 5368.399999999994], [1.66047978E12, 4172.0], [1.66047972E12, 5079.85], [1.66048038E12, 3659.0], [1.66048032E12, 3866.0], [1.66048002E12, 3817.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66047996E12, 3317.0], [1.66048026E12, 3368.0], [1.6604802E12, 3287.0], [1.6604799E12, 3023.0], [1.66047984E12, 3229.0], [1.66048044E12, 2876.0], [1.66048014E12, 3156.0], [1.66048008E12, 3254.0], [1.66047978E12, 3417.0], [1.66047972E12, 375.0], [1.66048038E12, 3323.0], [1.66048032E12, 3280.0], [1.66048002E12, 3391.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66047996E12, 3613.0], [1.66048026E12, 3601.0], [1.6604802E12, 3593.0], [1.6604799E12, 3546.0], [1.66047984E12, 3616.0], [1.66048044E12, 3413.0], [1.66048014E12, 3533.0], [1.66048008E12, 3629.0], [1.66047978E12, 3823.0], [1.66047972E12, 4400.5], [1.66048038E12, 3524.0], [1.66048032E12, 3552.0], [1.66048002E12, 3678.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66048044E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 573.0, "minX": 14.0, "maxY": 5746.0, "series": [{"data": [[14.0, 573.0], [47.0, 3285.5], [46.0, 4818.0], [49.0, 4422.0], [54.0, 4116.5], [64.0, 3519.5], [69.0, 3603.0], [81.0, 2119.0], [88.0, 4046.0], [94.0, 5746.0], [98.0, 2710.5], [97.0, 4066.0], [100.0, 3388.5], [106.0, 4981.5], [114.0, 4644.0], [115.0, 4024.0], [113.0, 3710.5], [112.0, 3981.5], [118.0, 3792.5], [119.0, 4044.0], [117.0, 3818.5], [116.0, 3608.0], [122.0, 4028.0], [121.0, 3915.0], [120.0, 3929.5], [123.0, 3685.5], [126.0, 3871.5], [124.0, 3861.0], [127.0, 3669.0], [125.0, 3745.0], [128.0, 3713.0], [132.0, 3674.0], [135.0, 3662.5], [130.0, 3639.0], [129.0, 3735.0], [131.0, 3663.0], [134.0, 3649.0], [133.0, 3670.0], [137.0, 3613.0], [140.0, 3620.0], [138.0, 3609.0], [136.0, 3682.0], [141.0, 3601.0], [139.0, 3601.0], [142.0, 3582.0], [143.0, 3575.0], [147.0, 3485.0], [149.0, 3586.0], [145.0, 3533.0], [144.0, 3510.0], [150.0, 3534.0], [146.0, 3453.0], [148.0, 3515.0], [151.0, 3400.0], [155.0, 3354.0], [154.0, 3383.0], [152.0, 3531.0], [156.0, 3314.0], [158.0, 3289.0], [153.0, 3392.5], [157.0, 3424.0], [159.0, 3406.0], [161.0, 3260.0], [163.0, 3224.0], [164.0, 3085.0], [160.0, 3270.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 164.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 573.0, "minX": 14.0, "maxY": 5746.0, "series": [{"data": [[14.0, 573.0], [47.0, 3285.5], [46.0, 4818.0], [49.0, 4422.0], [54.0, 4116.5], [64.0, 3519.5], [69.0, 3603.0], [81.0, 2119.0], [88.0, 4046.0], [94.0, 5746.0], [98.0, 2710.5], [97.0, 4066.0], [100.0, 3388.5], [106.0, 4981.5], [114.0, 4644.0], [115.0, 4024.0], [113.0, 3710.5], [112.0, 3981.5], [118.0, 3792.5], [119.0, 4044.0], [117.0, 3818.5], [116.0, 3608.0], [122.0, 4028.0], [121.0, 3915.0], [120.0, 3929.5], [123.0, 3685.5], [126.0, 3871.5], [124.0, 3861.0], [127.0, 3669.0], [125.0, 3745.0], [128.0, 3713.0], [132.0, 3674.0], [135.0, 3662.5], [130.0, 3639.0], [129.0, 3735.0], [131.0, 3663.0], [134.0, 3649.0], [133.0, 3670.0], [137.0, 3613.0], [140.0, 3620.0], [138.0, 3609.0], [136.0, 3682.0], [141.0, 3601.0], [139.0, 3601.0], [142.0, 3582.0], [143.0, 3575.0], [147.0, 3485.0], [149.0, 3586.0], [145.0, 3533.0], [144.0, 3510.0], [150.0, 3534.0], [146.0, 3453.0], [148.0, 3515.0], [151.0, 3400.0], [155.0, 3354.0], [154.0, 3383.0], [152.0, 3531.0], [156.0, 3314.0], [158.0, 3289.0], [153.0, 3392.5], [157.0, 3424.0], [159.0, 3406.0], [161.0, 3260.0], [163.0, 3224.0], [164.0, 3085.0], [160.0, 3270.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 164.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 27.033333333333335, "minX": 1.66047972E12, "maxY": 142.43333333333334, "series": [{"data": [[1.66047996E12, 137.53333333333333], [1.66048026E12, 134.75], [1.6604802E12, 139.48333333333332], [1.6604799E12, 141.01666666666668], [1.66047984E12, 138.66666666666666], [1.66048044E12, 122.5], [1.66048014E12, 142.43333333333334], [1.66048008E12, 134.13333333333333], [1.66047978E12, 130.76666666666668], [1.66047972E12, 27.033333333333335], [1.66048038E12, 141.5], [1.66048032E12, 140.56666666666666], [1.66048002E12, 136.28333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66048044E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 18.7, "minX": 1.66047972E12, "maxY": 142.43333333333334, "series": [{"data": [[1.66047996E12, 137.53333333333333], [1.66048026E12, 134.75], [1.6604802E12, 139.48333333333332], [1.6604799E12, 141.01666666666668], [1.66047984E12, 138.66666666666666], [1.66048044E12, 130.83333333333334], [1.66048014E12, 142.43333333333334], [1.66048008E12, 134.13333333333333], [1.66047978E12, 130.76666666666668], [1.66047972E12, 18.7], [1.66048038E12, 141.5], [1.66048032E12, 140.56666666666666], [1.66048002E12, 136.28333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66048044E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 18.7, "minX": 1.66047972E12, "maxY": 142.43333333333334, "series": [{"data": [[1.66047996E12, 137.53333333333333], [1.66048026E12, 134.75], [1.6604802E12, 139.48333333333332], [1.6604799E12, 141.01666666666668], [1.66047984E12, 138.66666666666666], [1.66048044E12, 130.83333333333334], [1.66048014E12, 142.43333333333334], [1.66048008E12, 134.13333333333333], [1.66047978E12, 130.76666666666668], [1.66047972E12, 18.7], [1.66048038E12, 141.5], [1.66048032E12, 140.56666666666666], [1.66048002E12, 136.28333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66048044E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 18.7, "minX": 1.66047972E12, "maxY": 142.43333333333334, "series": [{"data": [[1.66047996E12, 137.53333333333333], [1.66048026E12, 134.75], [1.6604802E12, 139.48333333333332], [1.6604799E12, 141.01666666666668], [1.66047984E12, 138.66666666666666], [1.66048044E12, 130.83333333333334], [1.66048014E12, 142.43333333333334], [1.66048008E12, 134.13333333333333], [1.66047978E12, 130.76666666666668], [1.66047972E12, 18.7], [1.66048038E12, 141.5], [1.66048032E12, 140.56666666666666], [1.66048002E12, 136.28333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66048044E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

