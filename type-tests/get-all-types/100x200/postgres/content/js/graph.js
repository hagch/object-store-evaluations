/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2207.0, "minX": 0.0, "maxY": 31965.0, "series": [{"data": [[0.0, 2207.0], [0.1, 9202.0], [0.2, 12983.0], [0.3, 18171.0], [0.4, 21172.0], [0.5, 24285.0], [0.6, 25661.0], [0.7, 25766.0], [0.8, 25824.0], [0.9, 25869.0], [1.0, 25903.0], [1.1, 25938.0], [1.2, 25956.0], [1.3, 25983.0], [1.4, 25998.0], [1.5, 26015.0], [1.6, 26027.0], [1.7, 26038.0], [1.8, 26060.0], [1.9, 26071.0], [2.0, 26087.0], [2.1, 26097.0], [2.2, 26104.0], [2.3, 26116.0], [2.4, 26124.0], [2.5, 26132.0], [2.6, 26140.0], [2.7, 26149.0], [2.8, 26159.0], [2.9, 26166.0], [3.0, 26175.0], [3.1, 26183.0], [3.2, 26191.0], [3.3, 26196.0], [3.4, 26206.0], [3.5, 26213.0], [3.6, 26218.0], [3.7, 26224.0], [3.8, 26228.0], [3.9, 26235.0], [4.0, 26240.0], [4.1, 26244.0], [4.2, 26256.0], [4.3, 26263.0], [4.4, 26269.0], [4.5, 26276.0], [4.6, 26281.0], [4.7, 26287.0], [4.8, 26291.0], [4.9, 26295.0], [5.0, 26301.0], [5.1, 26304.0], [5.2, 26309.0], [5.3, 26316.0], [5.4, 26325.0], [5.5, 26333.0], [5.6, 26338.0], [5.7, 26343.0], [5.8, 26349.0], [5.9, 26354.0], [6.0, 26359.0], [6.1, 26363.0], [6.2, 26367.0], [6.3, 26372.0], [6.4, 26377.0], [6.5, 26381.0], [6.6, 26387.0], [6.7, 26391.0], [6.8, 26396.0], [6.9, 26399.0], [7.0, 26404.0], [7.1, 26409.0], [7.2, 26411.0], [7.3, 26414.0], [7.4, 26418.0], [7.5, 26421.0], [7.6, 26425.0], [7.7, 26430.0], [7.8, 26434.0], [7.9, 26438.0], [8.0, 26441.0], [8.1, 26443.0], [8.2, 26446.0], [8.3, 26449.0], [8.4, 26452.0], [8.5, 26454.0], [8.6, 26458.0], [8.7, 26461.0], [8.8, 26464.0], [8.9, 26469.0], [9.0, 26472.0], [9.1, 26478.0], [9.2, 26480.0], [9.3, 26483.0], [9.4, 26486.0], [9.5, 26489.0], [9.6, 26492.0], [9.7, 26494.0], [9.8, 26496.0], [9.9, 26499.0], [10.0, 26503.0], [10.1, 26506.0], [10.2, 26508.0], [10.3, 26512.0], [10.4, 26515.0], [10.5, 26518.0], [10.6, 26520.0], [10.7, 26523.0], [10.8, 26526.0], [10.9, 26529.0], [11.0, 26532.0], [11.1, 26535.0], [11.2, 26539.0], [11.3, 26541.0], [11.4, 26544.0], [11.5, 26547.0], [11.6, 26550.0], [11.7, 26554.0], [11.8, 26556.0], [11.9, 26559.0], [12.0, 26562.0], [12.1, 26564.0], [12.2, 26568.0], [12.3, 26571.0], [12.4, 26576.0], [12.5, 26578.0], [12.6, 26580.0], [12.7, 26582.0], [12.8, 26585.0], [12.9, 26588.0], [13.0, 26590.0], [13.1, 26593.0], [13.2, 26596.0], [13.3, 26601.0], [13.4, 26604.0], [13.5, 26607.0], [13.6, 26609.0], [13.7, 26611.0], [13.8, 26613.0], [13.9, 26616.0], [14.0, 26619.0], [14.1, 26622.0], [14.2, 26625.0], [14.3, 26628.0], [14.4, 26630.0], [14.5, 26632.0], [14.6, 26634.0], [14.7, 26637.0], [14.8, 26639.0], [14.9, 26641.0], [15.0, 26644.0], [15.1, 26646.0], [15.2, 26648.0], [15.3, 26650.0], [15.4, 26653.0], [15.5, 26655.0], [15.6, 26658.0], [15.7, 26661.0], [15.8, 26663.0], [15.9, 26665.0], [16.0, 26667.0], [16.1, 26669.0], [16.2, 26672.0], [16.3, 26674.0], [16.4, 26676.0], [16.5, 26678.0], [16.6, 26680.0], [16.7, 26682.0], [16.8, 26685.0], [16.9, 26688.0], [17.0, 26691.0], [17.1, 26693.0], [17.2, 26695.0], [17.3, 26698.0], [17.4, 26699.0], [17.5, 26702.0], [17.6, 26703.0], [17.7, 26706.0], [17.8, 26707.0], [17.9, 26710.0], [18.0, 26712.0], [18.1, 26714.0], [18.2, 26715.0], [18.3, 26717.0], [18.4, 26719.0], [18.5, 26721.0], [18.6, 26724.0], [18.7, 26726.0], [18.8, 26728.0], [18.9, 26731.0], [19.0, 26734.0], [19.1, 26736.0], [19.2, 26739.0], [19.3, 26741.0], [19.4, 26745.0], [19.5, 26747.0], [19.6, 26749.0], [19.7, 26752.0], [19.8, 26755.0], [19.9, 26757.0], [20.0, 26759.0], [20.1, 26762.0], [20.2, 26765.0], [20.3, 26768.0], [20.4, 26770.0], [20.5, 26771.0], [20.6, 26773.0], [20.7, 26776.0], [20.8, 26777.0], [20.9, 26780.0], [21.0, 26782.0], [21.1, 26784.0], [21.2, 26786.0], [21.3, 26788.0], [21.4, 26790.0], [21.5, 26793.0], [21.6, 26796.0], [21.7, 26798.0], [21.8, 26801.0], [21.9, 26803.0], [22.0, 26806.0], [22.1, 26808.0], [22.2, 26809.0], [22.3, 26811.0], [22.4, 26813.0], [22.5, 26814.0], [22.6, 26817.0], [22.7, 26818.0], [22.8, 26820.0], [22.9, 26822.0], [23.0, 26825.0], [23.1, 26826.0], [23.2, 26828.0], [23.3, 26830.0], [23.4, 26833.0], [23.5, 26835.0], [23.6, 26837.0], [23.7, 26840.0], [23.8, 26841.0], [23.9, 26843.0], [24.0, 26845.0], [24.1, 26847.0], [24.2, 26849.0], [24.3, 26852.0], [24.4, 26854.0], [24.5, 26856.0], [24.6, 26858.0], [24.7, 26860.0], [24.8, 26861.0], [24.9, 26863.0], [25.0, 26864.0], [25.1, 26867.0], [25.2, 26868.0], [25.3, 26869.0], [25.4, 26872.0], [25.5, 26874.0], [25.6, 26875.0], [25.7, 26879.0], [25.8, 26880.0], [25.9, 26882.0], [26.0, 26884.0], [26.1, 26886.0], [26.2, 26888.0], [26.3, 26890.0], [26.4, 26893.0], [26.5, 26895.0], [26.6, 26897.0], [26.7, 26900.0], [26.8, 26901.0], [26.9, 26903.0], [27.0, 26905.0], [27.1, 26906.0], [27.2, 26908.0], [27.3, 26910.0], [27.4, 26911.0], [27.5, 26914.0], [27.6, 26916.0], [27.7, 26918.0], [27.8, 26920.0], [27.9, 26922.0], [28.0, 26924.0], [28.1, 26926.0], [28.2, 26928.0], [28.3, 26930.0], [28.4, 26933.0], [28.5, 26935.0], [28.6, 26937.0], [28.7, 26938.0], [28.8, 26940.0], [28.9, 26941.0], [29.0, 26943.0], [29.1, 26945.0], [29.2, 26948.0], [29.3, 26949.0], [29.4, 26951.0], [29.5, 26953.0], [29.6, 26955.0], [29.7, 26956.0], [29.8, 26958.0], [29.9, 26960.0], [30.0, 26962.0], [30.1, 26964.0], [30.2, 26966.0], [30.3, 26967.0], [30.4, 26970.0], [30.5, 26972.0], [30.6, 26974.0], [30.7, 26976.0], [30.8, 26978.0], [30.9, 26980.0], [31.0, 26983.0], [31.1, 26984.0], [31.2, 26987.0], [31.3, 26990.0], [31.4, 26991.0], [31.5, 26993.0], [31.6, 26995.0], [31.7, 26997.0], [31.8, 26999.0], [31.9, 27001.0], [32.0, 27003.0], [32.1, 27005.0], [32.2, 27008.0], [32.3, 27009.0], [32.4, 27010.0], [32.5, 27013.0], [32.6, 27014.0], [32.7, 27016.0], [32.8, 27018.0], [32.9, 27020.0], [33.0, 27022.0], [33.1, 27024.0], [33.2, 27027.0], [33.3, 27029.0], [33.4, 27031.0], [33.5, 27032.0], [33.6, 27034.0], [33.7, 27036.0], [33.8, 27038.0], [33.9, 27040.0], [34.0, 27041.0], [34.1, 27043.0], [34.2, 27045.0], [34.3, 27047.0], [34.4, 27049.0], [34.5, 27051.0], [34.6, 27052.0], [34.7, 27054.0], [34.8, 27055.0], [34.9, 27057.0], [35.0, 27059.0], [35.1, 27062.0], [35.2, 27063.0], [35.3, 27065.0], [35.4, 27067.0], [35.5, 27069.0], [35.6, 27070.0], [35.7, 27072.0], [35.8, 27074.0], [35.9, 27076.0], [36.0, 27078.0], [36.1, 27080.0], [36.2, 27081.0], [36.3, 27084.0], [36.4, 27085.0], [36.5, 27087.0], [36.6, 27089.0], [36.7, 27091.0], [36.8, 27092.0], [36.9, 27093.0], [37.0, 27095.0], [37.1, 27097.0], [37.2, 27099.0], [37.3, 27100.0], [37.4, 27102.0], [37.5, 27104.0], [37.6, 27106.0], [37.7, 27107.0], [37.8, 27110.0], [37.9, 27111.0], [38.0, 27114.0], [38.1, 27115.0], [38.2, 27118.0], [38.3, 27119.0], [38.4, 27122.0], [38.5, 27124.0], [38.6, 27125.0], [38.7, 27127.0], [38.8, 27128.0], [38.9, 27130.0], [39.0, 27133.0], [39.1, 27136.0], [39.2, 27137.0], [39.3, 27139.0], [39.4, 27141.0], [39.5, 27143.0], [39.6, 27145.0], [39.7, 27147.0], [39.8, 27148.0], [39.9, 27150.0], [40.0, 27151.0], [40.1, 27154.0], [40.2, 27156.0], [40.3, 27157.0], [40.4, 27159.0], [40.5, 27160.0], [40.6, 27162.0], [40.7, 27164.0], [40.8, 27166.0], [40.9, 27168.0], [41.0, 27170.0], [41.1, 27172.0], [41.2, 27174.0], [41.3, 27177.0], [41.4, 27179.0], [41.5, 27181.0], [41.6, 27183.0], [41.7, 27185.0], [41.8, 27188.0], [41.9, 27189.0], [42.0, 27191.0], [42.1, 27193.0], [42.2, 27195.0], [42.3, 27198.0], [42.4, 27200.0], [42.5, 27202.0], [42.6, 27204.0], [42.7, 27205.0], [42.8, 27207.0], [42.9, 27209.0], [43.0, 27212.0], [43.1, 27213.0], [43.2, 27215.0], [43.3, 27217.0], [43.4, 27219.0], [43.5, 27221.0], [43.6, 27223.0], [43.7, 27225.0], [43.8, 27226.0], [43.9, 27229.0], [44.0, 27230.0], [44.1, 27233.0], [44.2, 27235.0], [44.3, 27237.0], [44.4, 27239.0], [44.5, 27241.0], [44.6, 27242.0], [44.7, 27244.0], [44.8, 27246.0], [44.9, 27248.0], [45.0, 27251.0], [45.1, 27253.0], [45.2, 27255.0], [45.3, 27256.0], [45.4, 27258.0], [45.5, 27260.0], [45.6, 27262.0], [45.7, 27264.0], [45.8, 27266.0], [45.9, 27269.0], [46.0, 27271.0], [46.1, 27273.0], [46.2, 27275.0], [46.3, 27277.0], [46.4, 27279.0], [46.5, 27281.0], [46.6, 27285.0], [46.7, 27286.0], [46.8, 27289.0], [46.9, 27291.0], [47.0, 27293.0], [47.1, 27295.0], [47.2, 27297.0], [47.3, 27300.0], [47.4, 27303.0], [47.5, 27305.0], [47.6, 27307.0], [47.7, 27310.0], [47.8, 27312.0], [47.9, 27315.0], [48.0, 27317.0], [48.1, 27319.0], [48.2, 27321.0], [48.3, 27324.0], [48.4, 27326.0], [48.5, 27329.0], [48.6, 27332.0], [48.7, 27335.0], [48.8, 27338.0], [48.9, 27340.0], [49.0, 27342.0], [49.1, 27344.0], [49.2, 27347.0], [49.3, 27350.0], [49.4, 27352.0], [49.5, 27354.0], [49.6, 27355.0], [49.7, 27357.0], [49.8, 27359.0], [49.9, 27362.0], [50.0, 27365.0], [50.1, 27368.0], [50.2, 27371.0], [50.3, 27372.0], [50.4, 27375.0], [50.5, 27378.0], [50.6, 27380.0], [50.7, 27383.0], [50.8, 27386.0], [50.9, 27388.0], [51.0, 27390.0], [51.1, 27392.0], [51.2, 27394.0], [51.3, 27397.0], [51.4, 27399.0], [51.5, 27401.0], [51.6, 27404.0], [51.7, 27406.0], [51.8, 27410.0], [51.9, 27411.0], [52.0, 27414.0], [52.1, 27418.0], [52.2, 27420.0], [52.3, 27423.0], [52.4, 27426.0], [52.5, 27429.0], [52.6, 27431.0], [52.7, 27433.0], [52.8, 27436.0], [52.9, 27439.0], [53.0, 27441.0], [53.1, 27444.0], [53.2, 27445.0], [53.3, 27447.0], [53.4, 27450.0], [53.5, 27452.0], [53.6, 27455.0], [53.7, 27458.0], [53.8, 27460.0], [53.9, 27462.0], [54.0, 27466.0], [54.1, 27468.0], [54.2, 27471.0], [54.3, 27473.0], [54.4, 27476.0], [54.5, 27478.0], [54.6, 27483.0], [54.7, 27485.0], [54.8, 27489.0], [54.9, 27493.0], [55.0, 27495.0], [55.1, 27499.0], [55.2, 27501.0], [55.3, 27504.0], [55.4, 27506.0], [55.5, 27508.0], [55.6, 27511.0], [55.7, 27513.0], [55.8, 27516.0], [55.9, 27518.0], [56.0, 27522.0], [56.1, 27524.0], [56.2, 27527.0], [56.3, 27531.0], [56.4, 27534.0], [56.5, 27538.0], [56.6, 27542.0], [56.7, 27547.0], [56.8, 27550.0], [56.9, 27552.0], [57.0, 27555.0], [57.1, 27559.0], [57.2, 27562.0], [57.3, 27566.0], [57.4, 27569.0], [57.5, 27573.0], [57.6, 27575.0], [57.7, 27579.0], [57.8, 27582.0], [57.9, 27585.0], [58.0, 27588.0], [58.1, 27590.0], [58.2, 27593.0], [58.3, 27598.0], [58.4, 27601.0], [58.5, 27604.0], [58.6, 27606.0], [58.7, 27610.0], [58.8, 27613.0], [58.9, 27616.0], [59.0, 27619.0], [59.1, 27624.0], [59.2, 27629.0], [59.3, 27632.0], [59.4, 27636.0], [59.5, 27640.0], [59.6, 27643.0], [59.7, 27648.0], [59.8, 27652.0], [59.9, 27655.0], [60.0, 27661.0], [60.1, 27664.0], [60.2, 27667.0], [60.3, 27674.0], [60.4, 27679.0], [60.5, 27684.0], [60.6, 27689.0], [60.7, 27693.0], [60.8, 27698.0], [60.9, 27704.0], [61.0, 27710.0], [61.1, 27715.0], [61.2, 27720.0], [61.3, 27725.0], [61.4, 27728.0], [61.5, 27734.0], [61.6, 27738.0], [61.7, 27744.0], [61.8, 27749.0], [61.9, 27753.0], [62.0, 27758.0], [62.1, 27763.0], [62.2, 27770.0], [62.3, 27774.0], [62.4, 27780.0], [62.5, 27788.0], [62.6, 27795.0], [62.7, 27800.0], [62.8, 27808.0], [62.9, 27815.0], [63.0, 27823.0], [63.1, 27829.0], [63.2, 27835.0], [63.3, 27845.0], [63.4, 27851.0], [63.5, 27858.0], [63.6, 27864.0], [63.7, 27871.0], [63.8, 27879.0], [63.9, 27887.0], [64.0, 27894.0], [64.1, 27904.0], [64.2, 27915.0], [64.3, 27925.0], [64.4, 27938.0], [64.5, 27947.0], [64.6, 27959.0], [64.7, 27972.0], [64.8, 27984.0], [64.9, 27994.0], [65.0, 28003.0], [65.1, 28015.0], [65.2, 28024.0], [65.3, 28040.0], [65.4, 28056.0], [65.5, 28068.0], [65.6, 28081.0], [65.7, 28093.0], [65.8, 28109.0], [65.9, 28124.0], [66.0, 28141.0], [66.1, 28154.0], [66.2, 28166.0], [66.3, 28176.0], [66.4, 28183.0], [66.5, 28191.0], [66.6, 28202.0], [66.7, 28217.0], [66.8, 28228.0], [66.9, 28242.0], [67.0, 28253.0], [67.1, 28262.0], [67.2, 28270.0], [67.3, 28279.0], [67.4, 28287.0], [67.5, 28298.0], [67.6, 28308.0], [67.7, 28319.0], [67.8, 28327.0], [67.9, 28334.0], [68.0, 28344.0], [68.1, 28352.0], [68.2, 28356.0], [68.3, 28362.0], [68.4, 28368.0], [68.5, 28379.0], [68.6, 28383.0], [68.7, 28389.0], [68.8, 28396.0], [68.9, 28403.0], [69.0, 28410.0], [69.1, 28419.0], [69.2, 28425.0], [69.3, 28432.0], [69.4, 28438.0], [69.5, 28444.0], [69.6, 28448.0], [69.7, 28456.0], [69.8, 28463.0], [69.9, 28469.0], [70.0, 28475.0], [70.1, 28483.0], [70.2, 28490.0], [70.3, 28495.0], [70.4, 28503.0], [70.5, 28506.0], [70.6, 28511.0], [70.7, 28516.0], [70.8, 28521.0], [70.9, 28526.0], [71.0, 28530.0], [71.1, 28536.0], [71.2, 28542.0], [71.3, 28546.0], [71.4, 28551.0], [71.5, 28557.0], [71.6, 28560.0], [71.7, 28564.0], [71.8, 28573.0], [71.9, 28579.0], [72.0, 28584.0], [72.1, 28591.0], [72.2, 28595.0], [72.3, 28601.0], [72.4, 28608.0], [72.5, 28612.0], [72.6, 28616.0], [72.7, 28623.0], [72.8, 28630.0], [72.9, 28634.0], [73.0, 28637.0], [73.1, 28643.0], [73.2, 28646.0], [73.3, 28650.0], [73.4, 28653.0], [73.5, 28659.0], [73.6, 28662.0], [73.7, 28666.0], [73.8, 28670.0], [73.9, 28674.0], [74.0, 28677.0], [74.1, 28680.0], [74.2, 28685.0], [74.3, 28690.0], [74.4, 28693.0], [74.5, 28697.0], [74.6, 28701.0], [74.7, 28705.0], [74.8, 28709.0], [74.9, 28716.0], [75.0, 28719.0], [75.1, 28724.0], [75.2, 28728.0], [75.3, 28732.0], [75.4, 28736.0], [75.5, 28740.0], [75.6, 28744.0], [75.7, 28748.0], [75.8, 28751.0], [75.9, 28756.0], [76.0, 28761.0], [76.1, 28766.0], [76.2, 28770.0], [76.3, 28772.0], [76.4, 28775.0], [76.5, 28778.0], [76.6, 28781.0], [76.7, 28785.0], [76.8, 28791.0], [76.9, 28795.0], [77.0, 28799.0], [77.1, 28803.0], [77.2, 28808.0], [77.3, 28812.0], [77.4, 28815.0], [77.5, 28818.0], [77.6, 28821.0], [77.7, 28825.0], [77.8, 28828.0], [77.9, 28833.0], [78.0, 28837.0], [78.1, 28841.0], [78.2, 28843.0], [78.3, 28847.0], [78.4, 28851.0], [78.5, 28854.0], [78.6, 28856.0], [78.7, 28859.0], [78.8, 28862.0], [78.9, 28868.0], [79.0, 28872.0], [79.1, 28876.0], [79.2, 28879.0], [79.3, 28882.0], [79.4, 28887.0], [79.5, 28891.0], [79.6, 28893.0], [79.7, 28897.0], [79.8, 28901.0], [79.9, 28904.0], [80.0, 28909.0], [80.1, 28911.0], [80.2, 28914.0], [80.3, 28918.0], [80.4, 28920.0], [80.5, 28924.0], [80.6, 28929.0], [80.7, 28932.0], [80.8, 28936.0], [80.9, 28939.0], [81.0, 28943.0], [81.1, 28948.0], [81.2, 28951.0], [81.3, 28954.0], [81.4, 28959.0], [81.5, 28961.0], [81.6, 28965.0], [81.7, 28969.0], [81.8, 28972.0], [81.9, 28975.0], [82.0, 28979.0], [82.1, 28982.0], [82.2, 28986.0], [82.3, 28990.0], [82.4, 28994.0], [82.5, 28998.0], [82.6, 29001.0], [82.7, 29005.0], [82.8, 29009.0], [82.9, 29012.0], [83.0, 29015.0], [83.1, 29020.0], [83.2, 29024.0], [83.3, 29027.0], [83.4, 29032.0], [83.5, 29035.0], [83.6, 29039.0], [83.7, 29042.0], [83.8, 29046.0], [83.9, 29049.0], [84.0, 29054.0], [84.1, 29057.0], [84.2, 29060.0], [84.3, 29063.0], [84.4, 29065.0], [84.5, 29070.0], [84.6, 29073.0], [84.7, 29075.0], [84.8, 29078.0], [84.9, 29083.0], [85.0, 29085.0], [85.1, 29088.0], [85.2, 29091.0], [85.3, 29094.0], [85.4, 29100.0], [85.5, 29105.0], [85.6, 29108.0], [85.7, 29111.0], [85.8, 29114.0], [85.9, 29117.0], [86.0, 29120.0], [86.1, 29123.0], [86.2, 29126.0], [86.3, 29129.0], [86.4, 29134.0], [86.5, 29137.0], [86.6, 29141.0], [86.7, 29144.0], [86.8, 29148.0], [86.9, 29150.0], [87.0, 29154.0], [87.1, 29158.0], [87.2, 29162.0], [87.3, 29166.0], [87.4, 29169.0], [87.5, 29174.0], [87.6, 29178.0], [87.7, 29183.0], [87.8, 29187.0], [87.9, 29190.0], [88.0, 29196.0], [88.1, 29200.0], [88.2, 29202.0], [88.3, 29206.0], [88.4, 29209.0], [88.5, 29213.0], [88.6, 29215.0], [88.7, 29219.0], [88.8, 29225.0], [88.9, 29230.0], [89.0, 29233.0], [89.1, 29237.0], [89.2, 29240.0], [89.3, 29243.0], [89.4, 29246.0], [89.5, 29251.0], [89.6, 29255.0], [89.7, 29259.0], [89.8, 29264.0], [89.9, 29268.0], [90.0, 29271.0], [90.1, 29275.0], [90.2, 29278.0], [90.3, 29281.0], [90.4, 29285.0], [90.5, 29289.0], [90.6, 29293.0], [90.7, 29296.0], [90.8, 29301.0], [90.9, 29306.0], [91.0, 29311.0], [91.1, 29314.0], [91.2, 29318.0], [91.3, 29321.0], [91.4, 29327.0], [91.5, 29329.0], [91.6, 29335.0], [91.7, 29339.0], [91.8, 29342.0], [91.9, 29347.0], [92.0, 29351.0], [92.1, 29356.0], [92.2, 29364.0], [92.3, 29368.0], [92.4, 29373.0], [92.5, 29378.0], [92.6, 29384.0], [92.7, 29388.0], [92.8, 29395.0], [92.9, 29401.0], [93.0, 29406.0], [93.1, 29412.0], [93.2, 29416.0], [93.3, 29420.0], [93.4, 29425.0], [93.5, 29429.0], [93.6, 29434.0], [93.7, 29440.0], [93.8, 29445.0], [93.9, 29452.0], [94.0, 29458.0], [94.1, 29465.0], [94.2, 29472.0], [94.3, 29479.0], [94.4, 29483.0], [94.5, 29487.0], [94.6, 29494.0], [94.7, 29501.0], [94.8, 29508.0], [94.9, 29512.0], [95.0, 29519.0], [95.1, 29526.0], [95.2, 29533.0], [95.3, 29538.0], [95.4, 29546.0], [95.5, 29557.0], [95.6, 29564.0], [95.7, 29574.0], [95.8, 29580.0], [95.9, 29587.0], [96.0, 29594.0], [96.1, 29604.0], [96.2, 29610.0], [96.3, 29617.0], [96.4, 29621.0], [96.5, 29629.0], [96.6, 29636.0], [96.7, 29642.0], [96.8, 29651.0], [96.9, 29660.0], [97.0, 29669.0], [97.1, 29676.0], [97.2, 29690.0], [97.3, 29698.0], [97.4, 29710.0], [97.5, 29719.0], [97.6, 29733.0], [97.7, 29742.0], [97.8, 29753.0], [97.9, 29762.0], [98.0, 29776.0], [98.1, 29788.0], [98.2, 29798.0], [98.3, 29812.0], [98.4, 29826.0], [98.5, 29840.0], [98.6, 29856.0], [98.7, 29868.0], [98.8, 29884.0], [98.9, 29900.0], [99.0, 29915.0], [99.1, 29941.0], [99.2, 29965.0], [99.3, 29992.0], [99.4, 30025.0], [99.5, 30049.0], [99.6, 30084.0], [99.7, 30145.0], [99.8, 30227.0], [99.9, 30367.0], [100.0, 31965.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2200.0, "maxY": 1080.0, "series": [{"data": [[2200.0, 1.0], [2400.0, 1.0], [2600.0, 1.0], [2800.0, 1.0], [3900.0, 1.0], [4200.0, 1.0], [4300.0, 1.0], [4400.0, 1.0], [7000.0, 3.0], [7200.0, 2.0], [7300.0, 2.0], [7400.0, 3.0], [7500.0, 1.0], [9200.0, 1.0], [9700.0, 2.0], [9800.0, 1.0], [9900.0, 2.0], [10000.0, 1.0], [10100.0, 2.0], [10200.0, 1.0], [10300.0, 2.0], [10700.0, 1.0], [12400.0, 2.0], [12500.0, 1.0], [12700.0, 2.0], [12800.0, 1.0], [12900.0, 2.0], [13000.0, 1.0], [13100.0, 1.0], [13300.0, 1.0], [14300.0, 1.0], [15100.0, 1.0], [15200.0, 2.0], [15400.0, 2.0], [15500.0, 2.0], [15700.0, 2.0], [15800.0, 1.0], [16500.0, 1.0], [17000.0, 1.0], [17900.0, 1.0], [18000.0, 2.0], [18100.0, 1.0], [18200.0, 1.0], [18300.0, 1.0], [18400.0, 1.0], [18500.0, 2.0], [18600.0, 1.0], [19000.0, 3.0], [19200.0, 2.0], [18700.0, 1.0], [20600.0, 2.0], [20700.0, 1.0], [20900.0, 2.0], [21000.0, 1.0], [21100.0, 2.0], [21200.0, 2.0], [21400.0, 1.0], [21900.0, 2.0], [22100.0, 1.0], [23200.0, 1.0], [23300.0, 2.0], [23400.0, 1.0], [23500.0, 2.0], [23600.0, 2.0], [23700.0, 1.0], [24200.0, 2.0], [24000.0, 1.0], [24300.0, 2.0], [23900.0, 1.0], [24100.0, 1.0], [24400.0, 1.0], [25500.0, 2.0], [24700.0, 4.0], [24900.0, 2.0], [24600.0, 5.0], [24800.0, 2.0], [25800.0, 46.0], [25900.0, 86.0], [26000.0, 149.0], [26100.0, 236.0], [25600.0, 6.0], [25700.0, 27.0], [26200.0, 329.0], [26300.0, 384.0], [26400.0, 600.0], [26600.0, 827.0], [26500.0, 674.0], [27400.0, 737.0], [27200.0, 979.0], [27000.0, 1080.0], [26900.0, 1027.0], [27600.0, 491.0], [27500.0, 652.0], [27300.0, 826.0], [27100.0, 1034.0], [26800.0, 991.0], [26700.0, 866.0], [28500.0, 379.0], [28600.0, 461.0], [27800.0, 273.0], [28100.0, 169.0], [27700.0, 374.0], [28000.0, 160.0], [27900.0, 177.0], [28200.0, 188.0], [28400.0, 301.0], [28300.0, 263.0], [28800.0, 552.0], [28700.0, 492.0], [28900.0, 555.0], [29000.0, 570.0], [29100.0, 538.0], [29600.0, 250.0], [29300.0, 425.0], [29200.0, 535.0], [29400.0, 358.0], [29500.0, 276.0], [29900.0, 83.0], [30200.0, 19.0], [30300.0, 11.0], [30400.0, 3.0], [30000.0, 62.0], [30100.0, 32.0], [29700.0, 179.0], [29800.0, 138.0], [30500.0, 3.0], [30600.0, 1.0], [30700.0, 1.0], [31200.0, 2.0], [31300.0, 2.0], [31500.0, 1.0], [31700.0, 1.0], [31900.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 31900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 20000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 20000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 20000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 45.21568627450981, "minX": 1.66050684E12, "maxY": 100.0, "series": [{"data": [[1.6605084E12, 100.0], [1.66051002E12, 100.0], [1.66051224E12, 100.0], [1.6605072E12, 100.0], [1.66050942E12, 100.0], [1.66051164E12, 100.0], [1.66050702E12, 100.0], [1.66051122E12, 100.0], [1.6605096E12, 100.0], [1.660509E12, 100.0], [1.66051062E12, 100.0], [1.66050762E12, 100.0], [1.66050858E12, 100.0], [1.6605108E12, 100.0], [1.66050804E12, 100.0], [1.6605102E12, 100.0], [1.66051182E12, 100.0], [1.66050684E12, 100.0], [1.66050978E12, 100.0], [1.660512E12, 100.0], [1.66050918E12, 100.0], [1.66050744E12, 100.0], [1.6605114E12, 100.0], [1.66050906E12, 100.0], [1.66051128E12, 100.0], [1.66050756E12, 100.0], [1.6605123E12, 97.89041095890407], [1.66050846E12, 100.0], [1.66051068E12, 100.0], [1.66050816E12, 100.0], [1.66050864E12, 100.0], [1.66050798E12, 100.0], [1.66051026E12, 100.0], [1.66050696E12, 100.0], [1.66050966E12, 100.0], [1.66051188E12, 100.0], [1.66050984E12, 100.0], [1.66051146E12, 100.0], [1.66051086E12, 100.0], [1.66050738E12, 100.0], [1.66050924E12, 100.0], [1.66050882E12, 100.0], [1.66051104E12, 100.0], [1.6605078E12, 100.0], [1.66051206E12, 100.0], [1.66050822E12, 100.0], [1.66051044E12, 100.0], [1.66051194E12, 100.0], [1.66051032E12, 100.0], [1.6605069E12, 100.0], [1.66050972E12, 100.0], [1.66051134E12, 100.0], [1.66050732E12, 100.0], [1.6605093E12, 100.0], [1.66051152E12, 100.0], [1.6605087E12, 100.0], [1.66051092E12, 100.0], [1.66050792E12, 100.0], [1.66050888E12, 100.0], [1.6605105E12, 100.0], [1.66050774E12, 100.0], [1.66050828E12, 100.0], [1.6605099E12, 100.0], [1.66051212E12, 100.0], [1.66051008E12, 100.0], [1.6605117E12, 100.0], [1.6605111E12, 100.0], [1.66050714E12, 100.0], [1.66050948E12, 100.0], [1.66051098E12, 100.0], [1.66050726E12, 100.0], [1.66050936E12, 100.0], [1.66050876E12, 100.0], [1.66051038E12, 100.0], [1.66050786E12, 100.0], [1.66051218E12, 100.0], [1.66050834E12, 100.0], [1.66051056E12, 100.0], [1.66050996E12, 100.0], [1.66051158E12, 100.0], [1.66050708E12, 100.0], [1.66050954E12, 100.0], [1.66051176E12, 100.0], [1.66050894E12, 100.0], [1.66051116E12, 100.0], [1.66050768E12, 100.0], [1.66050912E12, 100.0], [1.66051074E12, 100.0], [1.6605075E12, 100.0], [1.66050852E12, 100.0], [1.6605081E12, 100.0], [1.66051014E12, 100.0], [1.66051236E12, 45.21568627450981]], "isOverall": false, "label": "Thread Group Create Type", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66051236E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3941.0, "minX": 1.0, "maxY": 29534.0, "series": [{"data": [[2.0, 7037.0], [3.0, 3941.0], [4.0, 9202.0], [5.0, 14355.0], [6.0, 17068.0], [7.0, 19203.0], [8.0, 16583.0], [9.0, 19003.0], [10.0, 18711.0], [11.0, 10744.0], [12.0, 19013.0], [13.0, 13381.0], [14.0, 21489.0], [15.0, 21958.0], [16.0, 22175.0], [17.0, 24967.0], [18.0, 24722.5], [19.0, 19256.0], [20.0, 24266.0], [21.0, 24340.0], [22.0, 21906.0], [23.0, 19042.0], [24.0, 24675.0], [25.0, 24674.0], [26.0, 24742.0], [27.0, 26947.0], [28.0, 24668.0], [29.0, 24446.0], [30.0, 24160.0], [31.0, 25294.0], [33.0, 24765.0], [32.0, 24366.0], [35.0, 27271.0], [34.0, 24844.0], [37.0, 26843.0], [36.0, 24638.0], [39.0, 24004.0], [38.0, 26997.0], [41.0, 24920.0], [40.0, 26812.0], [43.0, 24752.0], [42.0, 27416.5], [45.0, 26855.0], [44.0, 27136.0], [47.0, 26778.0], [46.0, 26715.0], [49.0, 29020.0], [48.0, 24285.0], [51.0, 28466.0], [50.0, 27214.0], [53.0, 26882.0], [52.0, 26817.0], [55.0, 26530.0], [54.0, 26957.0], [57.0, 29091.0], [56.0, 28078.5], [59.0, 27138.0], [58.0, 27136.0], [61.0, 27123.0], [60.0, 28200.5], [63.0, 28913.0], [62.0, 26917.0], [67.0, 26920.0], [66.0, 28001.0], [65.0, 29534.0], [64.0, 28382.666666666668], [71.0, 27330.0], [70.0, 29179.0], [69.0, 26571.0], [68.0, 29214.0], [75.0, 26906.0], [74.0, 27986.5], [73.0, 27247.0], [72.0, 29346.0], [79.0, 26977.0], [78.0, 26971.0], [77.0, 28946.0], [76.0, 28274.333333333332], [83.0, 27670.5], [82.0, 28664.0], [81.0, 28763.5], [80.0, 29008.0], [87.0, 27105.333333333332], [86.0, 28914.0], [85.0, 26785.0], [84.0, 26704.0], [91.0, 28601.0], [90.0, 28736.0], [89.0, 27791.000000000004], [88.0, 27900.5], [95.0, 26963.5], [94.0, 27787.8], [93.0, 27039.0], [92.0, 27005.2], [99.0, 27235.5], [98.0, 27159.5], [97.0, 27811.25], [96.0, 28174.0], [100.0, 27658.20814639314], [1.0, 9960.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[99.69750000000002, 27643.77370000003]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 323.0, "minX": 1.66050684E12, "maxY": 9083155.2, "series": [{"data": [[1.6605084E12, 9042605.4], [1.66051002E12, 8920956.0], [1.66051224E12, 9002055.6], [1.6605072E12, 8880406.2], [1.66050942E12, 8758756.8], [1.66051164E12, 9083155.2], [1.66050702E12, 8637107.4], [1.66051122E12, 8920956.0], [1.6605096E12, 8799306.6], [1.660509E12, 8596557.6], [1.66051062E12, 8556007.8], [1.66050762E12, 8880406.2], [1.66050858E12, 8961505.8], [1.6605108E12, 8637107.4], [1.66050804E12, 8677657.2], [1.6605102E12, 8677657.2], [1.66051182E12, 8961505.8], [1.66050684E12, 7785561.6], [1.66050978E12, 8880406.2], [1.660512E12, 8799306.6], [1.66050918E12, 8718207.0], [1.66050744E12, 8799306.6], [1.6605114E12, 8677657.2], [1.66050906E12, 9042605.4], [1.66051128E12, 8799306.6], [1.66050756E12, 8556007.8], [1.6605123E12, 8880406.2], [1.66050846E12, 8596557.6], [1.66051068E12, 8758756.8], [1.66050816E12, 8596557.6], [1.66050864E12, 8799306.6], [1.66050798E12, 8677657.2], [1.66051026E12, 8880406.2], [1.66050696E12, 8920956.0], [1.66050966E12, 8718207.0], [1.66051188E12, 8799306.6], [1.66050984E12, 8718207.0], [1.66051146E12, 8961505.8], [1.66051086E12, 8799306.6], [1.66050738E12, 8637107.4], [1.66050924E12, 8799306.6], [1.66050882E12, 9002055.6], [1.66051104E12, 8596557.6], [1.6605078E12, 8677657.2], [1.66051206E12, 8920956.0], [1.66050822E12, 8880406.2], [1.66051044E12, 8880406.2], [1.66051194E12, 8556007.8], [1.66051032E12, 8718207.0], [1.6605069E12, 8637107.4], [1.66050972E12, 8677657.2], [1.66051134E12, 8758756.8], [1.66050732E12, 8961505.8], [1.6605093E12, 8920956.0], [1.66051152E12, 8637107.4], [1.6605087E12, 8677657.2], [1.66051092E12, 8677657.2], [1.66050792E12, 9042605.4], [1.66050888E12, 8758756.8], [1.6605105E12, 9002055.6], [1.66050774E12, 8839856.4], [1.66050828E12, 8799306.6], [1.6605099E12, 8718207.0], [1.66051212E12, 8718207.0], [1.66051008E12, 8637107.4], [1.6605117E12, 8596557.6], [1.6605111E12, 8718207.0], [1.66050714E12, 8637107.4], [1.66050948E12, 8718207.0], [1.66051098E12, 9002055.6], [1.66050726E12, 8677657.2], [1.66050936E12, 8677657.2], [1.66050876E12, 8718207.0], [1.66051038E12, 8637107.4], [1.66050786E12, 8718207.0], [1.66051218E12, 8596557.6], [1.66050834E12, 8637107.4], [1.66051056E12, 8637107.4], [1.66050996E12, 8677657.2], [1.66051158E12, 8677657.2], [1.66050708E12, 9002055.6], [1.66050954E12, 8920956.0], [1.66051176E12, 8758756.8], [1.66050894E12, 8799306.6], [1.66051116E12, 8799306.6], [1.66050768E12, 8758756.8], [1.66050912E12, 8718207.0], [1.66051074E12, 8961505.8], [1.6605075E12, 9002055.6], [1.66050852E12, 8677657.2], [1.6605081E12, 8920956.0], [1.66051014E12, 8920956.0], [1.66051236E12, 4136079.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6605084E12, 706.1666666666666], [1.66051002E12, 696.6666666666666], [1.66051224E12, 703.0], [1.6605072E12, 693.5], [1.66050942E12, 684.0], [1.66051164E12, 709.3333333333334], [1.66050702E12, 674.5], [1.66051122E12, 696.6666666666666], [1.6605096E12, 687.1666666666666], [1.660509E12, 671.3333333333334], [1.66051062E12, 668.1666666666666], [1.66050762E12, 693.5], [1.66050858E12, 699.8333333333334], [1.6605108E12, 674.5], [1.66050804E12, 677.6666666666666], [1.6605102E12, 677.6666666666666], [1.66051182E12, 699.8333333333334], [1.66050684E12, 608.0], [1.66050978E12, 693.5], [1.660512E12, 687.1666666666666], [1.66050918E12, 680.8333333333334], [1.66050744E12, 687.1666666666666], [1.6605114E12, 677.6666666666666], [1.66050906E12, 706.1666666666666], [1.66051128E12, 687.1666666666666], [1.66050756E12, 668.1666666666666], [1.6605123E12, 693.5], [1.66050846E12, 671.3333333333334], [1.66051068E12, 684.0], [1.66050816E12, 671.3333333333334], [1.66050864E12, 687.1666666666666], [1.66050798E12, 677.6666666666666], [1.66051026E12, 693.5], [1.66050696E12, 696.6666666666666], [1.66050966E12, 680.8333333333334], [1.66051188E12, 687.1666666666666], [1.66050984E12, 680.8333333333334], [1.66051146E12, 699.8333333333334], [1.66051086E12, 687.1666666666666], [1.66050738E12, 674.5], [1.66050924E12, 687.1666666666666], [1.66050882E12, 703.0], [1.66051104E12, 671.3333333333334], [1.6605078E12, 677.6666666666666], [1.66051206E12, 696.6666666666666], [1.66050822E12, 693.5], [1.66051044E12, 693.5], [1.66051194E12, 668.1666666666666], [1.66051032E12, 680.8333333333334], [1.6605069E12, 674.5], [1.66050972E12, 677.6666666666666], [1.66051134E12, 684.0], [1.66050732E12, 699.8333333333334], [1.6605093E12, 696.6666666666666], [1.66051152E12, 674.5], [1.6605087E12, 677.6666666666666], [1.66051092E12, 677.6666666666666], [1.66050792E12, 706.1666666666666], [1.66050888E12, 684.0], [1.6605105E12, 703.0], [1.66050774E12, 690.3333333333334], [1.66050828E12, 687.1666666666666], [1.6605099E12, 680.8333333333334], [1.66051212E12, 680.8333333333334], [1.66051008E12, 674.5], [1.6605117E12, 671.3333333333334], [1.6605111E12, 680.8333333333334], [1.66050714E12, 674.5], [1.66050948E12, 680.8333333333334], [1.66051098E12, 703.0], [1.66050726E12, 677.6666666666666], [1.66050936E12, 677.6666666666666], [1.66050876E12, 680.8333333333334], [1.66051038E12, 674.5], [1.66050786E12, 680.8333333333334], [1.66051218E12, 671.3333333333334], [1.66050834E12, 674.5], [1.66051056E12, 674.5], [1.66050996E12, 677.6666666666666], [1.66051158E12, 677.6666666666666], [1.66050708E12, 703.0], [1.66050954E12, 696.6666666666666], [1.66051176E12, 684.0], [1.66050894E12, 687.1666666666666], [1.66051116E12, 687.1666666666666], [1.66050768E12, 684.0], [1.66050912E12, 680.8333333333334], [1.66051074E12, 699.8333333333334], [1.6605075E12, 703.0], [1.66050852E12, 677.6666666666666], [1.6605081E12, 696.6666666666666], [1.66051014E12, 696.6666666666666], [1.66051236E12, 323.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66051236E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 22667.432291666664, "minX": 1.66050684E12, "maxY": 28047.789719626187, "series": [{"data": [[1.6605084E12, 27749.55605381167], [1.66051002E12, 27952.709090909095], [1.66051224E12, 27687.189189189194], [1.6605072E12, 27638.036529680372], [1.66050942E12, 27729.416666666664], [1.66051164E12, 27553.15625000001], [1.66050702E12, 27749.652582159608], [1.66051122E12, 27703.790909090894], [1.6605096E12, 27583.60368663596], [1.660509E12, 27829.207547169823], [1.66051062E12, 27908.857819905217], [1.66050762E12, 27518.95433789955], [1.66050858E12, 27748.20814479639], [1.6605108E12, 27762.6807511737], [1.66050804E12, 27684.317757009347], [1.6605102E12, 27573.906542056087], [1.66051182E12, 27738.289592760168], [1.66050684E12, 22667.432291666664], [1.66050978E12, 27885.474885844756], [1.660512E12, 27782.870967741932], [1.66050918E12, 27548.641860465104], [1.66050744E12, 27894.663594470047], [1.6605114E12, 27617.691588785045], [1.66050906E12, 27573.385650224212], [1.66051128E12, 27476.631336405528], [1.66050756E12, 27776.345971563987], [1.6605123E12, 27436.22831050229], [1.66050846E12, 27643.55188679245], [1.66051068E12, 27869.754629629628], [1.66050816E12, 27748.23113207548], [1.66050864E12, 27675.92165898618], [1.66050798E12, 27764.775700934584], [1.66051026E12, 27842.155251141558], [1.66050696E12, 27515.87727272727], [1.66050966E12, 27820.204651162785], [1.66051188E12, 27801.89400921658], [1.66050984E12, 27591.79534883721], [1.66051146E12, 27875.809954751134], [1.66051086E12, 27789.25806451611], [1.66050738E12, 27536.164319248826], [1.66050924E12, 27834.60829493089], [1.66050882E12, 27533.9009009009], [1.66051104E12, 27791.764150943414], [1.6605078E12, 27604.90654205608], [1.66051206E12, 27783.58181818182], [1.66050822E12, 27781.826484018253], [1.66051044E12, 27726.584474885836], [1.66051194E12, 27647.270142180092], [1.66051032E12, 27833.841860465105], [1.6605069E12, 27714.366197183088], [1.66050972E12, 27758.686915887836], [1.66051134E12, 27646.333333333332], [1.66050732E12, 27769.04977375564], [1.6605093E12, 27473.5909090909], [1.66051152E12, 27621.497652582162], [1.6605087E12, 27505.523364485973], [1.66051092E12, 27804.859813084127], [1.66050792E12, 27485.569506726446], [1.66050888E12, 27807.45833333333], [1.6605105E12, 27445.55855855856], [1.66050774E12, 27848.412844036688], [1.66050828E12, 27696.907834101377], [1.6605099E12, 27912.0511627907], [1.66051212E12, 27917.186046511626], [1.66051008E12, 27427.53051643191], [1.6605117E12, 27677.679245283027], [1.6605111E12, 27692.883720930244], [1.66050714E12, 27598.469483568064], [1.66050948E12, 27657.18139534885], [1.66051098E12, 27747.229729729734], [1.66050726E12, 27643.672897196255], [1.66050936E12, 27837.878504672903], [1.66050876E12, 27791.883720930236], [1.66051038E12, 27612.45539906104], [1.66050786E12, 27825.77209302325], [1.66051218E12, 27721.88679245283], [1.66050834E12, 27631.004694835687], [1.66051056E12, 27978.375586854454], [1.66050996E12, 27630.425233644863], [1.66051158E12, 27821.313084112157], [1.66050708E12, 27615.52252252252], [1.66050954E12, 27711.71818181818], [1.66051176E12, 27605.77777777777], [1.66050894E12, 27547.49769585253], [1.66051116E12, 27827.737327188934], [1.66050768E12, 27630.995370370358], [1.66050912E12, 27797.2046511628], [1.66051074E12, 27492.814479638004], [1.6605075E12, 27528.558558558565], [1.66050852E12, 28047.789719626187], [1.6605081E12, 27850.509090909083], [1.66051014E12, 27850.031818181815], [1.66051236E12, 24892.970588235294]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66051236E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 22664.546874999993, "minX": 1.66050684E12, "maxY": 28045.593457943927, "series": [{"data": [[1.6605084E12, 27747.14798206279], [1.66051002E12, 27950.645454545458], [1.66051224E12, 27684.945945945947], [1.6605072E12, 27635.789954337906], [1.66050942E12, 27726.185185185193], [1.66051164E12, 27550.736607142873], [1.66050702E12, 27747.197183098582], [1.66051122E12, 27701.41818181818], [1.6605096E12, 27581.55299539171], [1.660509E12, 27826.51886792454], [1.66051062E12, 27906.23696682464], [1.66050762E12, 27516.80821917809], [1.66050858E12, 27744.84162895927], [1.6605108E12, 27760.436619718315], [1.66050804E12, 27680.883177570093], [1.6605102E12, 27571.23831775702], [1.66051182E12, 27735.542986425342], [1.66050684E12, 22664.546874999993], [1.66050978E12, 27883.150684931505], [1.660512E12, 27780.96313364056], [1.66050918E12, 27546.353488372122], [1.66050744E12, 27892.354838709685], [1.6605114E12, 27615.82242990655], [1.66050906E12, 27571.336322869953], [1.66051128E12, 27474.612903225814], [1.66050756E12, 27773.56398104265], [1.6605123E12, 27434.337899543385], [1.66050846E12, 27641.358490566043], [1.66051068E12, 27867.712962962956], [1.66050816E12, 27746.108490566017], [1.66050864E12, 27673.806451612912], [1.66050798E12, 27762.40186915888], [1.66051026E12, 27839.84474885843], [1.66050696E12, 27513.62272727271], [1.66050966E12, 27816.883720930222], [1.66051188E12, 27799.760368663592], [1.66050984E12, 27589.87441860465], [1.66051146E12, 27873.357466063346], [1.66051086E12, 27786.414746543778], [1.66050738E12, 27534.206572769952], [1.66050924E12, 27832.299539170497], [1.66050882E12, 27531.828828828835], [1.66051104E12, 27789.764150943396], [1.6605078E12, 27602.845794392513], [1.66051206E12, 27781.509090909105], [1.66050822E12, 27779.42009132419], [1.66051044E12, 27724.63926940638], [1.66051194E12, 27645.042654028435], [1.66051032E12, 27831.72093023255], [1.6605069E12, 27712.098591549293], [1.66050972E12, 27756.644859813077], [1.66051134E12, 27644.15740740742], [1.66050732E12, 27766.787330316743], [1.6605093E12, 27471.32272727273], [1.66051152E12, 27619.333333333332], [1.6605087E12, 27502.91588785046], [1.66051092E12, 27802.850467289703], [1.66050792E12, 27483.587443946206], [1.66050888E12, 27804.875], [1.6605105E12, 27443.09909909909], [1.66050774E12, 27846.206422018342], [1.66050828E12, 27694.732718894], [1.6605099E12, 27910.26046511628], [1.66051212E12, 27915.162790697665], [1.66051008E12, 27425.4131455399], [1.6605117E12, 27675.36320754718], [1.6605111E12, 27690.320930232538], [1.66050714E12, 27595.81690140844], [1.66050948E12, 27654.665116279062], [1.66051098E12, 27745.058558558572], [1.66050726E12, 27641.38785046731], [1.66050936E12, 27834.57476635513], [1.66050876E12, 27789.674418604653], [1.66051038E12, 27610.427230046942], [1.66050786E12, 27823.711627906985], [1.66051218E12, 27718.707547169823], [1.66050834E12, 27629.126760563362], [1.66051056E12, 27975.877934272292], [1.66050996E12, 27627.579439252335], [1.66051158E12, 27818.514018691592], [1.66050708E12, 27612.490990991], [1.66050954E12, 27709.386363636364], [1.66051176E12, 27603.787037037033], [1.66050894E12, 27545.38248847927], [1.66051116E12, 27825.585253456225], [1.66050768E12, 27627.45833333333], [1.66050912E12, 27794.87441860465], [1.66051074E12, 27490.579185520357], [1.6605075E12, 27526.53153153154], [1.66050852E12, 28045.593457943927], [1.6605081E12, 27848.55454545455], [1.66051014E12, 27848.104545454553], [1.66051236E12, 24890.980392156856]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66051236E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.018433179723502318, "minX": 1.66050684E12, "maxY": 0.16901408450704228, "series": [{"data": [[1.6605084E12, 0.06726457399103142], [1.66051002E12, 0.05454545454545454], [1.66051224E12, 0.08558558558558561], [1.6605072E12, 0.06392694063926943], [1.66050942E12, 0.07407407407407406], [1.66051164E12, 0.0625], [1.66050702E12, 0.14553990610328632], [1.66051122E12, 0.054545454545454515], [1.6605096E12, 0.05069124423963137], [1.660509E12, 0.09433962264150944], [1.66051062E12, 0.042654028436018954], [1.66050762E12, 0.022831050228310504], [1.66050858E12, 0.09502262443438911], [1.6605108E12, 0.03286384976525821], [1.66050804E12, 0.03271028037383177], [1.6605102E12, 0.046728971962616814], [1.66051182E12, 0.06787330316742082], [1.66050684E12, 0.1510416666666666], [1.66050978E12, 0.022831050228310515], [1.660512E12, 0.0829493087557604], [1.66050918E12, 0.037209302325581395], [1.66050744E12, 0.07834101382488477], [1.6605114E12, 0.06542056074766357], [1.66050906E12, 0.0852017937219731], [1.66051128E12, 0.06912442396313365], [1.66050756E12, 0.14218009478672983], [1.6605123E12, 0.11415525114155257], [1.66050846E12, 0.05660377358490565], [1.66051068E12, 0.05555555555555561], [1.66050816E12, 0.10849056603773587], [1.66050864E12, 0.07834101382488477], [1.66050798E12, 0.09345794392523364], [1.66051026E12, 0.059360730593607386], [1.66050696E12, 0.03181818181818182], [1.66050966E12, 0.055813953488372106], [1.66051188E12, 0.06912442396313366], [1.66050984E12, 0.051162790697674425], [1.66051146E12, 0.04072398190045251], [1.66051086E12, 0.032258064516129004], [1.66050738E12, 0.061032863849765244], [1.66050924E12, 0.06912442396313367], [1.66050882E12, 0.08108108108108111], [1.66051104E12, 0.04245283018867925], [1.6605078E12, 0.046728971962616835], [1.66051206E12, 0.04545454545454544], [1.66050822E12, 0.03652968036529681], [1.66051044E12, 0.03196347031963471], [1.66051194E12, 0.04265402843601895], [1.66051032E12, 0.1209302325581395], [1.6605069E12, 0.16901408450704228], [1.66050972E12, 0.07943925233644858], [1.66051134E12, 0.08333333333333331], [1.66050732E12, 0.14479638009049772], [1.6605093E12, 0.05454545454545454], [1.66051152E12, 0.03286384976525822], [1.6605087E12, 0.028037383177570083], [1.66051092E12, 0.07009345794392523], [1.66050792E12, 0.10762331838565033], [1.66050888E12, 0.060185185185185175], [1.6605105E12, 0.0630630630630631], [1.66050774E12, 0.1605504587155963], [1.66050828E12, 0.027649769585253454], [1.6605099E12, 0.09302325581395346], [1.66051212E12, 0.05581395348837208], [1.66051008E12, 0.0985915492957746], [1.6605117E12, 0.03773584905660379], [1.6605111E12, 0.060465116279069794], [1.66050714E12, 0.03286384976525822], [1.66050948E12, 0.08372093023255815], [1.66051098E12, 0.10360360360360363], [1.66050726E12, 0.16822429906542055], [1.66050936E12, 0.03738317757009349], [1.66050876E12, 0.07906976744186045], [1.66051038E12, 0.061032863849765286], [1.66050786E12, 0.04651162790697674], [1.66051218E12, 0.051886792452830205], [1.66050834E12, 0.09389671361502344], [1.66051056E12, 0.08920187793427231], [1.66050996E12, 0.060747663551401876], [1.66051158E12, 0.07943925233644863], [1.66050708E12, 0.11711711711711709], [1.66050954E12, 0.03181818181818182], [1.66051176E12, 0.04166666666666666], [1.66050894E12, 0.018433179723502318], [1.66051116E12, 0.07834101382488477], [1.66050768E12, 0.0925925925925926], [1.66050912E12, 0.023255813953488375], [1.66051074E12, 0.08597285067873302], [1.6605075E12, 0.11711711711711709], [1.66050852E12, 0.06074766355140188], [1.6605081E12, 0.08181818181818187], [1.66051014E12, 0.0772727272727273], [1.66051236E12, 0.05882352941176472]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66051236E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2207.0, "minX": 1.66050684E12, "maxY": 31965.0, "series": [{"data": [[1.6605084E12, 30072.0], [1.66051002E12, 30124.0], [1.66051224E12, 29839.0], [1.6605072E12, 29810.0], [1.66050942E12, 29905.0], [1.66051164E12, 30102.0], [1.66050702E12, 29854.0], [1.66051122E12, 30248.0], [1.6605096E12, 29762.0], [1.660509E12, 30120.0], [1.66051062E12, 29727.0], [1.66050762E12, 29466.0], [1.66050858E12, 30270.0], [1.6605108E12, 30309.0], [1.66050804E12, 29897.0], [1.6605102E12, 29844.0], [1.66051182E12, 30065.0], [1.66050684E12, 31502.0], [1.66050978E12, 29684.0], [1.660512E12, 30368.0], [1.66050918E12, 29319.0], [1.66050744E12, 30031.0], [1.6605114E12, 29751.0], [1.66050906E12, 29672.0], [1.66051128E12, 29489.0], [1.66050756E12, 29635.0], [1.6605123E12, 29140.0], [1.66050846E12, 29584.0], [1.66051068E12, 30047.0], [1.66050816E12, 29807.0], [1.66050864E12, 29710.0], [1.66050798E12, 30082.0], [1.66051026E12, 29990.0], [1.66050696E12, 29801.0], [1.66050966E12, 29730.0], [1.66051188E12, 30640.0], [1.66050984E12, 29674.0], [1.66051146E12, 29942.0], [1.66051086E12, 30502.0], [1.66050738E12, 29747.0], [1.66050924E12, 29965.0], [1.66050882E12, 29600.0], [1.66051104E12, 30241.0], [1.6605078E12, 29904.0], [1.66051206E12, 29679.0], [1.66050822E12, 30025.0], [1.66051044E12, 29340.0], [1.66051194E12, 29639.0], [1.66051032E12, 30278.0], [1.6605069E12, 29643.0], [1.66050972E12, 30183.0], [1.66051134E12, 30048.0], [1.66050732E12, 29819.0], [1.6605093E12, 29228.0], [1.66051152E12, 29574.0], [1.6605087E12, 29605.0], [1.66051092E12, 30005.0], [1.66050792E12, 31794.0], [1.66050888E12, 29641.0], [1.6605105E12, 29805.0], [1.66050774E12, 29316.0], [1.66050828E12, 29860.0], [1.6605099E12, 30267.0], [1.66051212E12, 30005.0], [1.66051008E12, 29415.0], [1.6605117E12, 29945.0], [1.6605111E12, 29887.0], [1.66050714E12, 29717.0], [1.66050948E12, 29949.0], [1.66051098E12, 29793.0], [1.66050726E12, 29632.0], [1.66050936E12, 29932.0], [1.66050876E12, 30304.0], [1.66051038E12, 29816.0], [1.66050786E12, 30216.0], [1.66051218E12, 29707.0], [1.66050834E12, 29693.0], [1.66051056E12, 30440.0], [1.66050996E12, 29627.0], [1.66051158E12, 30123.0], [1.66050708E12, 30164.0], [1.66050954E12, 30164.0], [1.66051176E12, 29970.0], [1.66050894E12, 30762.0], [1.66051116E12, 30067.0], [1.66050768E12, 30575.0], [1.66050912E12, 30246.0], [1.66051074E12, 30061.0], [1.6605075E12, 29638.0], [1.66050852E12, 30316.0], [1.6605081E12, 31965.0], [1.66051014E12, 30097.0], [1.66051236E12, 29603.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6605084E12, 29399.2], [1.66051002E12, 29520.0], [1.66051224E12, 29254.5], [1.6605072E12, 29424.0], [1.66050942E12, 29371.0], [1.66051164E12, 29059.0], [1.66050702E12, 29338.4], [1.66051122E12, 29403.2], [1.6605096E12, 29020.0], [1.660509E12, 29431.6], [1.66051062E12, 29123.8], [1.66050762E12, 28949.0], [1.66050858E12, 29267.6], [1.6605108E12, 29075.8], [1.66050804E12, 29359.0], [1.6605102E12, 28953.5], [1.66051182E12, 29260.2], [1.66050684E12, 29713.0], [1.66050978E12, 29282.0], [1.660512E12, 29652.2], [1.66050918E12, 28966.4], [1.66050744E12, 29580.0], [1.6605114E12, 29337.5], [1.66050906E12, 29166.2], [1.66051128E12, 28888.2], [1.66050756E12, 29308.2], [1.6605123E12, 28601.0], [1.66050846E12, 29248.2], [1.66051068E12, 29569.5], [1.66050816E12, 29239.1], [1.66050864E12, 29125.6], [1.66050798E12, 29335.5], [1.66051026E12, 29362.0], [1.66050696E12, 28976.7], [1.66050966E12, 29213.2], [1.66051188E12, 29672.600000000002], [1.66050984E12, 29349.6], [1.66051146E12, 29425.6], [1.66051086E12, 29520.2], [1.66050738E12, 29087.2], [1.66050924E12, 29578.6], [1.66050882E12, 29106.8], [1.66051104E12, 29279.4], [1.6605078E12, 29143.5], [1.66051206E12, 29315.8], [1.66050822E12, 29429.0], [1.66051044E12, 29004.0], [1.66051194E12, 29160.0], [1.66051032E12, 29757.6], [1.6605069E12, 29266.8], [1.66050972E12, 29322.0], [1.66051134E12, 29113.9], [1.66050732E12, 29334.600000000002], [1.6605093E12, 28860.2], [1.66051152E12, 29035.0], [1.6605087E12, 29056.0], [1.66051092E12, 29542.5], [1.66050792E12, 29146.8], [1.66050888E12, 29148.6], [1.6605105E12, 28931.5], [1.66050774E12, 28890.4], [1.66050828E12, 29440.0], [1.6605099E12, 29772.8], [1.66051212E12, 29646.8], [1.66051008E12, 29053.2], [1.6605117E12, 29071.0], [1.6605111E12, 29269.2], [1.66050714E12, 29148.6], [1.66050948E12, 29359.8], [1.66051098E12, 29287.2], [1.66050726E12, 29166.5], [1.66050936E12, 29492.0], [1.66050876E12, 29534.0], [1.66051038E12, 29286.4], [1.66050786E12, 29633.8], [1.66051218E12, 29000.0], [1.66050834E12, 29194.4], [1.66051056E12, 29468.2], [1.66050996E12, 29119.0], [1.66051158E12, 29647.0], [1.66050708E12, 29041.100000000002], [1.66050954E12, 29276.0], [1.66051176E12, 29478.4], [1.66050894E12, 28579.0], [1.66051116E12, 29391.0], [1.66050768E12, 28762.4], [1.66050912E12, 29461.4], [1.66051074E12, 28660.0], [1.6605075E12, 29235.6], [1.66050852E12, 29593.5], [1.6605081E12, 29426.7], [1.66051014E12, 29424.9], [1.66051236E12, 29083.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6605084E12, 30036.88], [1.66051002E12, 30122.16], [1.66051224E12, 29807.11], [1.6605072E12, 29752.8], [1.66050942E12, 29862.61], [1.66051164E12, 30085.0], [1.66050702E12, 29736.86], [1.66051122E12, 30074.7], [1.6605096E12, 29692.8], [1.660509E12, 30048.74], [1.66051062E12, 29696.399999999998], [1.66050762E12, 29419.600000000002], [1.66050858E12, 30186.12], [1.6605108E12, 30065.1], [1.66050804E12, 29839.4], [1.6605102E12, 29746.85], [1.66051182E12, 30029.920000000002], [1.66050684E12, 31367.149999999998], [1.66050978E12, 29678.8], [1.660512E12, 30195.0], [1.66050918E12, 29293.56], [1.66050744E12, 29952.28], [1.6605114E12, 29733.1], [1.66050906E12, 29628.92], [1.66051128E12, 29458.719999999998], [1.66050756E12, 29628.32], [1.6605123E12, 29012.8], [1.66050846E12, 29580.92], [1.66051068E12, 30011.48], [1.66050816E12, 29792.14], [1.66050864E12, 29699.0], [1.66050798E12, 29971.05], [1.66051026E12, 29868.2], [1.66050696E12, 29743.53], [1.66050966E12, 29667.12], [1.66051188E12, 30490.52], [1.66050984E12, 29642.44], [1.66051146E12, 29906.0], [1.66051086E12, 30404.5], [1.66050738E12, 29731.0], [1.66050924E12, 29846.0], [1.66050882E12, 29431.49], [1.66051104E12, 29944.57], [1.6605078E12, 29883.7], [1.66051206E12, 29665.27], [1.66050822E12, 29989.0], [1.66051044E12, 29320.8], [1.66051194E12, 29612.48], [1.66051032E12, 30165.2], [1.6605069E12, 29636.92], [1.66050972E12, 29869.7], [1.66051134E12, 29892.73], [1.66050732E12, 29785.88], [1.6605093E12, 29165.01], [1.66051152E12, 29398.06], [1.6605087E12, 29509.649999999998], [1.66051092E12, 29957.5], [1.66050792E12, 29749.36], [1.66050888E12, 29548.839999999997], [1.6605105E12, 29542.27], [1.66050774E12, 29194.31], [1.66050828E12, 29835.5], [1.6605099E12, 30251.92], [1.66051212E12, 29943.4], [1.66051008E12, 29278.72], [1.6605117E12, 29842.6], [1.6605111E12, 29529.64], [1.66050714E12, 29541.399999999998], [1.66050948E12, 29884.64], [1.66051098E12, 29670.77], [1.66050726E12, 29623.9], [1.66050936E12, 29794.9], [1.66050876E12, 29899.08], [1.66051038E12, 29702.32], [1.66050786E12, 30169.44], [1.66051218E12, 29568.98], [1.66050834E12, 29617.219999999998], [1.66051056E12, 30289.3], [1.66050996E12, 29618.85], [1.66051158E12, 30050.25], [1.66050708E12, 29940.72], [1.66050954E12, 30157.38], [1.66051176E12, 29919.899999999998], [1.66050894E12, 29964.1], [1.66051116E12, 29887.88], [1.66050768E12, 29222.75], [1.66050912E12, 30157.0], [1.66051074E12, 29951.5], [1.6605075E12, 29623.58], [1.66050852E12, 30226.0], [1.6605081E12, 31037.90999999999], [1.66051014E12, 30000.03], [1.66051236E12, 29601.74]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6605084E12, 29742.399999999998], [1.66051002E12, 29788.7], [1.66051224E12, 29446.65], [1.6605072E12, 29553.0], [1.66050942E12, 29591.35], [1.66051164E12, 29641.25], [1.66050702E12, 29538.399999999998], [1.66051122E12, 29690.899999999998], [1.6605096E12, 29245.9], [1.660509E12, 29610.35], [1.66051062E12, 29270.8], [1.66050762E12, 29112.0], [1.66050858E12, 29392.199999999997], [1.6605108E12, 29286.4], [1.66050804E12, 29560.75], [1.6605102E12, 29230.5], [1.66051182E12, 29652.6], [1.66050684E12, 30124.7], [1.66050978E12, 29493.0], [1.660512E12, 29845.0], [1.66050918E12, 29123.0], [1.66050744E12, 29741.8], [1.6605114E12, 29539.25], [1.66050906E12, 29291.0], [1.66051128E12, 29054.0], [1.66050756E12, 29442.2], [1.6605123E12, 28766.0], [1.66050846E12, 29344.7], [1.66051068E12, 29721.3], [1.66050816E12, 29376.25], [1.66050864E12, 29325.7], [1.66050798E12, 29624.25], [1.66051026E12, 29556.0], [1.66050696E12, 29135.1], [1.66050966E12, 29337.2], [1.66051188E12, 30165.3], [1.66050984E12, 29437.2], [1.66051146E12, 29708.0], [1.66051086E12, 29907.4], [1.66050738E12, 29355.8], [1.66050924E12, 29660.5], [1.66050882E12, 29201.4], [1.66051104E12, 29529.55], [1.6605078E12, 29379.5], [1.66051206E12, 29479.85], [1.66050822E12, 29593.0], [1.66051044E12, 29119.0], [1.66051194E12, 29316.8], [1.66051032E12, 30034.4], [1.6605069E12, 29482.3], [1.66050972E12, 29564.5], [1.66051134E12, 29578.9], [1.66050732E12, 29499.0], [1.6605093E12, 28965.95], [1.66051152E12, 29178.6], [1.6605087E12, 29208.25], [1.66051092E12, 29656.75], [1.66050792E12, 29373.2], [1.66050888E12, 29220.55], [1.6605105E12, 29108.6], [1.66050774E12, 28990.2], [1.66050828E12, 29631.5], [1.6605099E12, 30019.0], [1.66051212E12, 29848.6], [1.66051008E12, 29193.399999999998], [1.6605117E12, 29464.7], [1.6605111E12, 29344.2], [1.66050714E12, 29263.2], [1.66050948E12, 29578.2], [1.66051098E12, 29433.55], [1.66050726E12, 29245.75], [1.66050936E12, 29659.0], [1.66050876E12, 29818.2], [1.66051038E12, 29392.6], [1.66050786E12, 30002.2], [1.66051218E12, 29361.35], [1.66050834E12, 29327.6], [1.66051056E12, 29768.4], [1.66050996E12, 29204.0], [1.66051158E12, 29806.25], [1.66050708E12, 29541.65], [1.66050954E12, 29756.649999999998], [1.66051176E12, 29667.5], [1.66050894E12, 29037.2], [1.66051116E12, 29590.4], [1.66050768E12, 28859.65], [1.66050912E12, 29802.2], [1.66051074E12, 29195.499999999996], [1.6605075E12, 29392.3], [1.66050852E12, 29841.75], [1.6605081E12, 29609.25], [1.66051014E12, 29669.4], [1.66051236E12, 29213.25]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6605084E12, 26098.0], [1.66051002E12, 26284.0], [1.66051224E12, 26010.0], [1.6605072E12, 26295.0], [1.66050942E12, 25686.0], [1.66051164E12, 26225.0], [1.66050702E12, 26140.0], [1.66051122E12, 26281.0], [1.6605096E12, 25701.0], [1.660509E12, 26243.0], [1.66051062E12, 25788.0], [1.66050762E12, 25753.0], [1.66050858E12, 26173.0], [1.6605108E12, 25740.0], [1.66050804E12, 26234.0], [1.6605102E12, 25845.0], [1.66051182E12, 26102.0], [1.66050684E12, 2207.0], [1.66050978E12, 26035.0], [1.660512E12, 26546.0], [1.66050918E12, 25849.0], [1.66050744E12, 26192.0], [1.6605114E12, 26269.0], [1.66050906E12, 26123.0], [1.66051128E12, 25707.0], [1.66050756E12, 26180.0], [1.6605123E12, 25723.0], [1.66050846E12, 26195.0], [1.66051068E12, 26623.0], [1.66050816E12, 25927.0], [1.66050864E12, 25720.0], [1.66050798E12, 26334.0], [1.66051026E12, 26075.0], [1.66050696E12, 25657.0], [1.66050966E12, 26038.0], [1.66051188E12, 26492.0], [1.66050984E12, 26309.0], [1.66051146E12, 25981.0], [1.66051086E12, 26752.0], [1.66050738E12, 26051.0], [1.66050924E12, 26292.0], [1.66050882E12, 25874.0], [1.66051104E12, 26142.0], [1.6605078E12, 25941.0], [1.66051206E12, 26305.0], [1.66050822E12, 26427.0], [1.66051044E12, 25824.0], [1.66051194E12, 26023.0], [1.66051032E12, 26400.0], [1.6605069E12, 26086.0], [1.66050972E12, 26376.0], [1.66051134E12, 25718.0], [1.66050732E12, 25889.0], [1.6605093E12, 25906.0], [1.66051152E12, 25834.0], [1.6605087E12, 25876.0], [1.66051092E12, 26473.0], [1.66050792E12, 25938.0], [1.66050888E12, 26098.0], [1.6605105E12, 25730.0], [1.66050774E12, 25794.0], [1.66050828E12, 26288.0], [1.6605099E12, 26483.0], [1.66051212E12, 26686.0], [1.66051008E12, 26089.0], [1.6605117E12, 25661.0], [1.6605111E12, 26085.0], [1.66050714E12, 25869.0], [1.66050948E12, 26159.0], [1.66051098E12, 26307.0], [1.66050726E12, 25671.0], [1.66050936E12, 26443.0], [1.66050876E12, 26205.0], [1.66051038E12, 26131.0], [1.66050786E12, 26597.0], [1.66051218E12, 26029.0], [1.66050834E12, 26152.0], [1.66051056E12, 26446.0], [1.66050996E12, 26130.0], [1.66051158E12, 26596.0], [1.66050708E12, 25835.0], [1.66050954E12, 26167.0], [1.66051176E12, 26496.0], [1.66050894E12, 25558.0], [1.66051116E12, 26296.0], [1.66050768E12, 25840.0], [1.66050912E12, 26355.0], [1.66051074E12, 25688.0], [1.6605075E12, 26287.0], [1.66050852E12, 26212.0], [1.6605081E12, 26188.0], [1.66051014E12, 25880.0], [1.66051236E12, 3941.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6605084E12, 27536.0], [1.66051002E12, 27455.0], [1.66051224E12, 27292.5], [1.6605072E12, 27183.0], [1.66050942E12, 27458.5], [1.66051164E12, 27341.0], [1.66050702E12, 27231.0], [1.66051122E12, 27291.5], [1.6605096E12, 27350.0], [1.660509E12, 27472.0], [1.66051062E12, 28257.0], [1.66050762E12, 27114.0], [1.66050858E12, 27410.0], [1.6605108E12, 27921.0], [1.66050804E12, 27176.0], [1.6605102E12, 27257.0], [1.66051182E12, 27333.0], [1.66050684E12, 27203.5], [1.66050978E12, 27451.0], [1.660512E12, 27400.0], [1.66050918E12, 27021.0], [1.66050744E12, 27482.0], [1.6605114E12, 27344.5], [1.66050906E12, 27139.0], [1.66051128E12, 27072.0], [1.66050756E12, 27382.0], [1.6605123E12, 28085.0], [1.66050846E12, 27090.5], [1.66051068E12, 27592.5], [1.66050816E12, 27185.0], [1.66050864E12, 27540.0], [1.66050798E12, 27317.0], [1.66051026E12, 27443.0], [1.66050696E12, 27198.5], [1.66050966E12, 27300.0], [1.66051188E12, 27495.0], [1.66050984E12, 27105.0], [1.66051146E12, 27482.0], [1.66051086E12, 27588.0], [1.66050738E12, 27045.0], [1.66050924E12, 27376.0], [1.66050882E12, 26914.5], [1.66051104E12, 27405.5], [1.6605078E12, 27436.5], [1.66051206E12, 27153.5], [1.66050822E12, 27367.0], [1.66051044E12, 28380.0], [1.66051194E12, 27202.0], [1.66051032E12, 27435.0], [1.6605069E12, 27238.0], [1.66050972E12, 27520.5], [1.66051134E12, 27426.5], [1.66050732E12, 27285.0], [1.6605093E12, 26829.0], [1.66051152E12, 27147.0], [1.6605087E12, 26992.0], [1.66051092E12, 27421.0], [1.66050792E12, 27039.0], [1.66050888E12, 28357.5], [1.6605105E12, 27138.0], [1.66050774E12, 28414.5], [1.66050828E12, 27255.0], [1.6605099E12, 27533.0], [1.66051212E12, 27395.0], [1.66051008E12, 26923.0], [1.6605117E12, 27577.0], [1.6605111E12, 27283.0], [1.66050714E12, 27100.0], [1.66050948E12, 27216.0], [1.66051098E12, 27319.0], [1.66050726E12, 27234.5], [1.66050936E12, 27230.5], [1.66050876E12, 27533.0], [1.66051038E12, 27213.0], [1.66050786E12, 27485.0], [1.66051218E12, 27588.0], [1.66050834E12, 27029.0], [1.66051056E12, 27635.0], [1.66050996E12, 26961.5], [1.66051158E12, 27455.5], [1.66050708E12, 27464.0], [1.66050954E12, 27598.0], [1.66051176E12, 27179.5], [1.66050894E12, 27577.0], [1.66051116E12, 27410.0], [1.66050768E12, 28182.0], [1.66050912E12, 27535.0], [1.66051074E12, 27549.0], [1.6605075E12, 27121.0], [1.66050852E12, 27602.5], [1.6605081E12, 27300.0], [1.66051014E12, 27578.5], [1.66051236E12, 26846.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66051236E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27271.0, "minX": 1.0, "maxY": 27492.0, "series": [{"data": [[4.0, 27316.0], [2.0, 27492.0], [8.0, 27379.0], [1.0, 27442.5], [9.0, 27271.0], [10.0, 27417.5], [5.0, 27392.5], [3.0, 27408.0], [6.0, 27308.5], [7.0, 27336.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 10.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27269.0, "minX": 1.0, "maxY": 27490.0, "series": [{"data": [[4.0, 27314.0], [2.0, 27490.0], [8.0, 27377.5], [1.0, 27440.0], [9.0, 27269.0], [10.0, 27414.0], [5.0, 27389.5], [3.0, 27404.0], [6.0, 27306.5], [7.0, 27334.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 10.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.66050684E12, "maxY": 4.866666666666666, "series": [{"data": [[1.6605084E12, 3.716666666666667], [1.66051002E12, 3.6666666666666665], [1.66051224E12, 3.7], [1.6605072E12, 3.65], [1.66050942E12, 3.6], [1.66051164E12, 3.7333333333333334], [1.66050702E12, 3.55], [1.66051122E12, 3.6666666666666665], [1.6605096E12, 3.6166666666666667], [1.660509E12, 3.533333333333333], [1.66051062E12, 3.5166666666666666], [1.66050762E12, 3.65], [1.66050858E12, 3.683333333333333], [1.6605108E12, 3.55], [1.66050804E12, 3.566666666666667], [1.6605102E12, 3.566666666666667], [1.66051182E12, 3.683333333333333], [1.66050684E12, 4.866666666666666], [1.66050978E12, 3.65], [1.660512E12, 3.6166666666666667], [1.66050918E12, 3.5833333333333335], [1.66050744E12, 3.6166666666666667], [1.6605114E12, 3.566666666666667], [1.66050906E12, 3.716666666666667], [1.66051128E12, 3.6166666666666667], [1.66050756E12, 3.5166666666666666], [1.6605123E12, 3.3666666666666667], [1.66050846E12, 3.533333333333333], [1.66051068E12, 3.6], [1.66050816E12, 3.533333333333333], [1.66050864E12, 3.6166666666666667], [1.66050798E12, 3.566666666666667], [1.66051026E12, 3.65], [1.66050696E12, 3.6666666666666665], [1.66050966E12, 3.5833333333333335], [1.66051188E12, 3.6166666666666667], [1.66050984E12, 3.5833333333333335], [1.66051146E12, 3.683333333333333], [1.66051086E12, 3.6166666666666667], [1.66050738E12, 3.55], [1.66050924E12, 3.6166666666666667], [1.66050882E12, 3.7], [1.66051104E12, 3.533333333333333], [1.6605078E12, 3.566666666666667], [1.66051206E12, 3.6666666666666665], [1.66050822E12, 3.65], [1.66051044E12, 3.65], [1.66051194E12, 3.5166666666666666], [1.66051032E12, 3.5833333333333335], [1.6605069E12, 3.55], [1.66050972E12, 3.566666666666667], [1.66051134E12, 3.6], [1.66050732E12, 3.683333333333333], [1.6605093E12, 3.6666666666666665], [1.66051152E12, 3.55], [1.6605087E12, 3.566666666666667], [1.66051092E12, 3.566666666666667], [1.66050792E12, 3.716666666666667], [1.66050888E12, 3.6], [1.6605105E12, 3.7], [1.66050774E12, 3.6333333333333333], [1.66050828E12, 3.6166666666666667], [1.6605099E12, 3.5833333333333335], [1.66051212E12, 3.5833333333333335], [1.66051008E12, 3.55], [1.6605117E12, 3.533333333333333], [1.6605111E12, 3.5833333333333335], [1.66050714E12, 3.55], [1.66050948E12, 3.5833333333333335], [1.66051098E12, 3.7], [1.66050726E12, 3.566666666666667], [1.66050936E12, 3.566666666666667], [1.66050876E12, 3.5833333333333335], [1.66051038E12, 3.55], [1.66050786E12, 3.5833333333333335], [1.66051218E12, 3.533333333333333], [1.66050834E12, 3.55], [1.66051056E12, 3.55], [1.66050996E12, 3.566666666666667], [1.66051158E12, 3.566666666666667], [1.66050708E12, 3.7], [1.66050954E12, 3.6666666666666665], [1.66051176E12, 3.6], [1.66050894E12, 3.6166666666666667], [1.66051116E12, 3.6166666666666667], [1.66050768E12, 3.6], [1.66050912E12, 3.5833333333333335], [1.66051074E12, 3.683333333333333], [1.6605075E12, 3.7], [1.66050852E12, 3.566666666666667], [1.6605081E12, 3.6666666666666665], [1.66051014E12, 3.6666666666666665], [1.66051236E12, 0.31666666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66051236E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.7, "minX": 1.66050684E12, "maxY": 3.7333333333333334, "series": [{"data": [[1.6605084E12, 3.716666666666667], [1.66051002E12, 3.6666666666666665], [1.66051224E12, 3.7], [1.6605072E12, 3.65], [1.66050942E12, 3.6], [1.66051164E12, 3.7333333333333334], [1.66050702E12, 3.55], [1.66051122E12, 3.6666666666666665], [1.6605096E12, 3.6166666666666667], [1.660509E12, 3.533333333333333], [1.66051062E12, 3.5166666666666666], [1.66050762E12, 3.65], [1.66050858E12, 3.683333333333333], [1.6605108E12, 3.55], [1.66050804E12, 3.566666666666667], [1.6605102E12, 3.566666666666667], [1.66051182E12, 3.683333333333333], [1.66050684E12, 3.2], [1.66050978E12, 3.65], [1.660512E12, 3.6166666666666667], [1.66050918E12, 3.5833333333333335], [1.66050744E12, 3.6166666666666667], [1.6605114E12, 3.566666666666667], [1.66050906E12, 3.716666666666667], [1.66051128E12, 3.6166666666666667], [1.66050756E12, 3.5166666666666666], [1.6605123E12, 3.65], [1.66050846E12, 3.533333333333333], [1.66051068E12, 3.6], [1.66050816E12, 3.533333333333333], [1.66050864E12, 3.6166666666666667], [1.66050798E12, 3.566666666666667], [1.66051026E12, 3.65], [1.66050696E12, 3.6666666666666665], [1.66050966E12, 3.5833333333333335], [1.66051188E12, 3.6166666666666667], [1.66050984E12, 3.5833333333333335], [1.66051146E12, 3.683333333333333], [1.66051086E12, 3.6166666666666667], [1.66050738E12, 3.55], [1.66050924E12, 3.6166666666666667], [1.66050882E12, 3.7], [1.66051104E12, 3.533333333333333], [1.6605078E12, 3.566666666666667], [1.66051206E12, 3.6666666666666665], [1.66050822E12, 3.65], [1.66051044E12, 3.65], [1.66051194E12, 3.5166666666666666], [1.66051032E12, 3.5833333333333335], [1.6605069E12, 3.55], [1.66050972E12, 3.566666666666667], [1.66051134E12, 3.6], [1.66050732E12, 3.683333333333333], [1.6605093E12, 3.6666666666666665], [1.66051152E12, 3.55], [1.6605087E12, 3.566666666666667], [1.66051092E12, 3.566666666666667], [1.66050792E12, 3.716666666666667], [1.66050888E12, 3.6], [1.6605105E12, 3.7], [1.66050774E12, 3.6333333333333333], [1.66050828E12, 3.6166666666666667], [1.6605099E12, 3.5833333333333335], [1.66051212E12, 3.5833333333333335], [1.66051008E12, 3.55], [1.6605117E12, 3.533333333333333], [1.6605111E12, 3.5833333333333335], [1.66050714E12, 3.55], [1.66050948E12, 3.5833333333333335], [1.66051098E12, 3.7], [1.66050726E12, 3.566666666666667], [1.66050936E12, 3.566666666666667], [1.66050876E12, 3.5833333333333335], [1.66051038E12, 3.55], [1.66050786E12, 3.5833333333333335], [1.66051218E12, 3.533333333333333], [1.66050834E12, 3.55], [1.66051056E12, 3.55], [1.66050996E12, 3.566666666666667], [1.66051158E12, 3.566666666666667], [1.66050708E12, 3.7], [1.66050954E12, 3.6666666666666665], [1.66051176E12, 3.6], [1.66050894E12, 3.6166666666666667], [1.66051116E12, 3.6166666666666667], [1.66050768E12, 3.6], [1.66050912E12, 3.5833333333333335], [1.66051074E12, 3.683333333333333], [1.6605075E12, 3.7], [1.66050852E12, 3.566666666666667], [1.6605081E12, 3.6666666666666665], [1.66051014E12, 3.6666666666666665], [1.66051236E12, 1.7]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66051236E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.7, "minX": 1.66050684E12, "maxY": 3.7333333333333334, "series": [{"data": [[1.6605084E12, 3.716666666666667], [1.66051002E12, 3.6666666666666665], [1.66051224E12, 3.7], [1.6605072E12, 3.65], [1.66050942E12, 3.6], [1.66051164E12, 3.7333333333333334], [1.66050702E12, 3.55], [1.66051122E12, 3.6666666666666665], [1.6605096E12, 3.6166666666666667], [1.660509E12, 3.533333333333333], [1.66051062E12, 3.5166666666666666], [1.66050762E12, 3.65], [1.66050858E12, 3.683333333333333], [1.6605108E12, 3.55], [1.66050804E12, 3.566666666666667], [1.6605102E12, 3.566666666666667], [1.66051182E12, 3.683333333333333], [1.66050684E12, 3.2], [1.66050978E12, 3.65], [1.660512E12, 3.6166666666666667], [1.66050918E12, 3.5833333333333335], [1.66050744E12, 3.6166666666666667], [1.6605114E12, 3.566666666666667], [1.66050906E12, 3.716666666666667], [1.66051128E12, 3.6166666666666667], [1.66050756E12, 3.5166666666666666], [1.6605123E12, 3.65], [1.66050846E12, 3.533333333333333], [1.66051068E12, 3.6], [1.66050816E12, 3.533333333333333], [1.66050864E12, 3.6166666666666667], [1.66050798E12, 3.566666666666667], [1.66051026E12, 3.65], [1.66050696E12, 3.6666666666666665], [1.66050966E12, 3.5833333333333335], [1.66051188E12, 3.6166666666666667], [1.66050984E12, 3.5833333333333335], [1.66051146E12, 3.683333333333333], [1.66051086E12, 3.6166666666666667], [1.66050738E12, 3.55], [1.66050924E12, 3.6166666666666667], [1.66050882E12, 3.7], [1.66051104E12, 3.533333333333333], [1.6605078E12, 3.566666666666667], [1.66051206E12, 3.6666666666666665], [1.66050822E12, 3.65], [1.66051044E12, 3.65], [1.66051194E12, 3.5166666666666666], [1.66051032E12, 3.5833333333333335], [1.6605069E12, 3.55], [1.66050972E12, 3.566666666666667], [1.66051134E12, 3.6], [1.66050732E12, 3.683333333333333], [1.6605093E12, 3.6666666666666665], [1.66051152E12, 3.55], [1.6605087E12, 3.566666666666667], [1.66051092E12, 3.566666666666667], [1.66050792E12, 3.716666666666667], [1.66050888E12, 3.6], [1.6605105E12, 3.7], [1.66050774E12, 3.6333333333333333], [1.66050828E12, 3.6166666666666667], [1.6605099E12, 3.5833333333333335], [1.66051212E12, 3.5833333333333335], [1.66051008E12, 3.55], [1.6605117E12, 3.533333333333333], [1.6605111E12, 3.5833333333333335], [1.66050714E12, 3.55], [1.66050948E12, 3.5833333333333335], [1.66051098E12, 3.7], [1.66050726E12, 3.566666666666667], [1.66050936E12, 3.566666666666667], [1.66050876E12, 3.5833333333333335], [1.66051038E12, 3.55], [1.66050786E12, 3.5833333333333335], [1.66051218E12, 3.533333333333333], [1.66050834E12, 3.55], [1.66051056E12, 3.55], [1.66050996E12, 3.566666666666667], [1.66051158E12, 3.566666666666667], [1.66050708E12, 3.7], [1.66050954E12, 3.6666666666666665], [1.66051176E12, 3.6], [1.66050894E12, 3.6166666666666667], [1.66051116E12, 3.6166666666666667], [1.66050768E12, 3.6], [1.66050912E12, 3.5833333333333335], [1.66051074E12, 3.683333333333333], [1.6605075E12, 3.7], [1.66050852E12, 3.566666666666667], [1.6605081E12, 3.6666666666666665], [1.66051014E12, 3.6666666666666665], [1.66051236E12, 1.7]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66051236E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.7, "minX": 1.66050684E12, "maxY": 3.7333333333333334, "series": [{"data": [[1.6605084E12, 3.716666666666667], [1.66051002E12, 3.6666666666666665], [1.66051224E12, 3.7], [1.6605072E12, 3.65], [1.66050942E12, 3.6], [1.66051164E12, 3.7333333333333334], [1.66050702E12, 3.55], [1.66051122E12, 3.6666666666666665], [1.6605096E12, 3.6166666666666667], [1.660509E12, 3.533333333333333], [1.66051062E12, 3.5166666666666666], [1.66050762E12, 3.65], [1.66050858E12, 3.683333333333333], [1.6605108E12, 3.55], [1.66050804E12, 3.566666666666667], [1.6605102E12, 3.566666666666667], [1.66051182E12, 3.683333333333333], [1.66050684E12, 3.2], [1.66050978E12, 3.65], [1.660512E12, 3.6166666666666667], [1.66050918E12, 3.5833333333333335], [1.66050744E12, 3.6166666666666667], [1.6605114E12, 3.566666666666667], [1.66050906E12, 3.716666666666667], [1.66051128E12, 3.6166666666666667], [1.66050756E12, 3.5166666666666666], [1.6605123E12, 3.65], [1.66050846E12, 3.533333333333333], [1.66051068E12, 3.6], [1.66050816E12, 3.533333333333333], [1.66050864E12, 3.6166666666666667], [1.66050798E12, 3.566666666666667], [1.66051026E12, 3.65], [1.66050696E12, 3.6666666666666665], [1.66050966E12, 3.5833333333333335], [1.66051188E12, 3.6166666666666667], [1.66050984E12, 3.5833333333333335], [1.66051146E12, 3.683333333333333], [1.66051086E12, 3.6166666666666667], [1.66050738E12, 3.55], [1.66050924E12, 3.6166666666666667], [1.66050882E12, 3.7], [1.66051104E12, 3.533333333333333], [1.6605078E12, 3.566666666666667], [1.66051206E12, 3.6666666666666665], [1.66050822E12, 3.65], [1.66051044E12, 3.65], [1.66051194E12, 3.5166666666666666], [1.66051032E12, 3.5833333333333335], [1.6605069E12, 3.55], [1.66050972E12, 3.566666666666667], [1.66051134E12, 3.6], [1.66050732E12, 3.683333333333333], [1.6605093E12, 3.6666666666666665], [1.66051152E12, 3.55], [1.6605087E12, 3.566666666666667], [1.66051092E12, 3.566666666666667], [1.66050792E12, 3.716666666666667], [1.66050888E12, 3.6], [1.6605105E12, 3.7], [1.66050774E12, 3.6333333333333333], [1.66050828E12, 3.6166666666666667], [1.6605099E12, 3.5833333333333335], [1.66051212E12, 3.5833333333333335], [1.66051008E12, 3.55], [1.6605117E12, 3.533333333333333], [1.6605111E12, 3.5833333333333335], [1.66050714E12, 3.55], [1.66050948E12, 3.5833333333333335], [1.66051098E12, 3.7], [1.66050726E12, 3.566666666666667], [1.66050936E12, 3.566666666666667], [1.66050876E12, 3.5833333333333335], [1.66051038E12, 3.55], [1.66050786E12, 3.5833333333333335], [1.66051218E12, 3.533333333333333], [1.66050834E12, 3.55], [1.66051056E12, 3.55], [1.66050996E12, 3.566666666666667], [1.66051158E12, 3.566666666666667], [1.66050708E12, 3.7], [1.66050954E12, 3.6666666666666665], [1.66051176E12, 3.6], [1.66050894E12, 3.6166666666666667], [1.66051116E12, 3.6166666666666667], [1.66050768E12, 3.6], [1.66050912E12, 3.5833333333333335], [1.66051074E12, 3.683333333333333], [1.6605075E12, 3.7], [1.66050852E12, 3.566666666666667], [1.6605081E12, 3.6666666666666665], [1.66051014E12, 3.6666666666666665], [1.66051236E12, 1.7]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66051236E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

