/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 260.0, "minX": 0.0, "maxY": 32616.0, "series": [{"data": [[0.0, 260.0], [0.1, 2237.0], [0.2, 3250.0], [0.3, 3930.0], [0.4, 4390.0], [0.5, 4784.0], [0.6, 4893.0], [0.7, 4964.0], [0.8, 5021.0], [0.9, 5053.0], [1.0, 5084.0], [1.1, 5111.0], [1.2, 5140.0], [1.3, 5155.0], [1.4, 5177.0], [1.5, 5201.0], [1.6, 5214.0], [1.7, 5228.0], [1.8, 5239.0], [1.9, 5249.0], [2.0, 5259.0], [2.1, 5275.0], [2.2, 5286.0], [2.3, 5296.0], [2.4, 5307.0], [2.5, 5317.0], [2.6, 5327.0], [2.7, 5338.0], [2.8, 5347.0], [2.9, 5356.0], [3.0, 5364.0], [3.1, 5375.0], [3.2, 5381.0], [3.3, 5388.0], [3.4, 5396.0], [3.5, 5404.0], [3.6, 5408.0], [3.7, 5414.0], [3.8, 5422.0], [3.9, 5427.0], [4.0, 5436.0], [4.1, 5443.0], [4.2, 5447.0], [4.3, 5455.0], [4.4, 5461.0], [4.5, 5467.0], [4.6, 5474.0], [4.7, 5479.0], [4.8, 5485.0], [4.9, 5490.0], [5.0, 5496.0], [5.1, 5500.0], [5.2, 5504.0], [5.3, 5509.0], [5.4, 5512.0], [5.5, 5518.0], [5.6, 5522.0], [5.7, 5525.0], [5.8, 5529.0], [5.9, 5533.0], [6.0, 5538.0], [6.1, 5541.0], [6.2, 5547.0], [6.3, 5550.0], [6.4, 5555.0], [6.5, 5561.0], [6.6, 5566.0], [6.7, 5568.0], [6.8, 5573.0], [6.9, 5577.0], [7.0, 5579.0], [7.1, 5581.0], [7.2, 5584.0], [7.3, 5588.0], [7.4, 5593.0], [7.5, 5598.0], [7.6, 5602.0], [7.7, 5605.0], [7.8, 5609.0], [7.9, 5614.0], [8.0, 5617.0], [8.1, 5621.0], [8.2, 5624.0], [8.3, 5627.0], [8.4, 5631.0], [8.5, 5634.0], [8.6, 5637.0], [8.7, 5640.0], [8.8, 5642.0], [8.9, 5645.0], [9.0, 5649.0], [9.1, 5653.0], [9.2, 5657.0], [9.3, 5660.0], [9.4, 5664.0], [9.5, 5668.0], [9.6, 5671.0], [9.7, 5675.0], [9.8, 5677.0], [9.9, 5679.0], [10.0, 5681.0], [10.1, 5683.0], [10.2, 5687.0], [10.3, 5689.0], [10.4, 5691.0], [10.5, 5695.0], [10.6, 5697.0], [10.7, 5700.0], [10.8, 5702.0], [10.9, 5706.0], [11.0, 5708.0], [11.1, 5710.0], [11.2, 5713.0], [11.3, 5715.0], [11.4, 5718.0], [11.5, 5722.0], [11.6, 5725.0], [11.7, 5728.0], [11.8, 5731.0], [11.9, 5734.0], [12.0, 5736.0], [12.1, 5738.0], [12.2, 5742.0], [12.3, 5745.0], [12.4, 5748.0], [12.5, 5750.0], [12.6, 5751.0], [12.7, 5753.0], [12.8, 5756.0], [12.9, 5758.0], [13.0, 5760.0], [13.1, 5762.0], [13.2, 5764.0], [13.3, 5767.0], [13.4, 5770.0], [13.5, 5773.0], [13.6, 5775.0], [13.7, 5777.0], [13.8, 5780.0], [13.9, 5781.0], [14.0, 5784.0], [14.1, 5787.0], [14.2, 5789.0], [14.3, 5791.0], [14.4, 5792.0], [14.5, 5795.0], [14.6, 5797.0], [14.7, 5800.0], [14.8, 5802.0], [14.9, 5805.0], [15.0, 5807.0], [15.1, 5809.0], [15.2, 5811.0], [15.3, 5814.0], [15.4, 5816.0], [15.5, 5818.0], [15.6, 5820.0], [15.7, 5822.0], [15.8, 5824.0], [15.9, 5828.0], [16.0, 5831.0], [16.1, 5833.0], [16.2, 5836.0], [16.3, 5838.0], [16.4, 5840.0], [16.5, 5842.0], [16.6, 5845.0], [16.7, 5847.0], [16.8, 5849.0], [16.9, 5851.0], [17.0, 5854.0], [17.1, 5856.0], [17.2, 5858.0], [17.3, 5860.0], [17.4, 5861.0], [17.5, 5863.0], [17.6, 5866.0], [17.7, 5868.0], [17.8, 5869.0], [17.9, 5871.0], [18.0, 5873.0], [18.1, 5875.0], [18.2, 5878.0], [18.3, 5880.0], [18.4, 5883.0], [18.5, 5884.0], [18.6, 5886.0], [18.7, 5888.0], [18.8, 5891.0], [18.9, 5893.0], [19.0, 5895.0], [19.1, 5896.0], [19.2, 5899.0], [19.3, 5901.0], [19.4, 5903.0], [19.5, 5905.0], [19.6, 5907.0], [19.7, 5908.0], [19.8, 5911.0], [19.9, 5912.0], [20.0, 5914.0], [20.1, 5916.0], [20.2, 5918.0], [20.3, 5920.0], [20.4, 5922.0], [20.5, 5924.0], [20.6, 5927.0], [20.7, 5928.0], [20.8, 5930.0], [20.9, 5932.0], [21.0, 5935.0], [21.1, 5936.0], [21.2, 5938.0], [21.3, 5941.0], [21.4, 5942.0], [21.5, 5944.0], [21.6, 5945.0], [21.7, 5947.0], [21.8, 5949.0], [21.9, 5950.0], [22.0, 5952.0], [22.1, 5953.0], [22.2, 5955.0], [22.3, 5957.0], [22.4, 5959.0], [22.5, 5960.0], [22.6, 5962.0], [22.7, 5963.0], [22.8, 5966.0], [22.9, 5968.0], [23.0, 5969.0], [23.1, 5971.0], [23.2, 5972.0], [23.3, 5974.0], [23.4, 5976.0], [23.5, 5977.0], [23.6, 5979.0], [23.7, 5980.0], [23.8, 5982.0], [23.9, 5984.0], [24.0, 5985.0], [24.1, 5987.0], [24.2, 5989.0], [24.3, 5990.0], [24.4, 5991.0], [24.5, 5993.0], [24.6, 5994.0], [24.7, 5996.0], [24.8, 5998.0], [24.9, 6000.0], [25.0, 6001.0], [25.1, 6003.0], [25.2, 6004.0], [25.3, 6006.0], [25.4, 6008.0], [25.5, 6010.0], [25.6, 6012.0], [25.7, 6013.0], [25.8, 6015.0], [25.9, 6017.0], [26.0, 6019.0], [26.1, 6020.0], [26.2, 6022.0], [26.3, 6023.0], [26.4, 6024.0], [26.5, 6026.0], [26.6, 6027.0], [26.7, 6029.0], [26.8, 6030.0], [26.9, 6032.0], [27.0, 6033.0], [27.1, 6035.0], [27.2, 6036.0], [27.3, 6037.0], [27.4, 6039.0], [27.5, 6040.0], [27.6, 6041.0], [27.7, 6043.0], [27.8, 6044.0], [27.9, 6046.0], [28.0, 6047.0], [28.1, 6048.0], [28.2, 6050.0], [28.3, 6051.0], [28.4, 6053.0], [28.5, 6054.0], [28.6, 6055.0], [28.7, 6058.0], [28.8, 6060.0], [28.9, 6061.0], [29.0, 6064.0], [29.1, 6065.0], [29.2, 6067.0], [29.3, 6068.0], [29.4, 6069.0], [29.5, 6071.0], [29.6, 6072.0], [29.7, 6074.0], [29.8, 6076.0], [29.9, 6078.0], [30.0, 6080.0], [30.1, 6081.0], [30.2, 6083.0], [30.3, 6084.0], [30.4, 6086.0], [30.5, 6087.0], [30.6, 6089.0], [30.7, 6090.0], [30.8, 6092.0], [30.9, 6094.0], [31.0, 6095.0], [31.1, 6097.0], [31.2, 6099.0], [31.3, 6100.0], [31.4, 6102.0], [31.5, 6103.0], [31.6, 6104.0], [31.7, 6106.0], [31.8, 6107.0], [31.9, 6109.0], [32.0, 6110.0], [32.1, 6111.0], [32.2, 6113.0], [32.3, 6114.0], [32.4, 6116.0], [32.5, 6118.0], [32.6, 6120.0], [32.7, 6121.0], [32.8, 6123.0], [32.9, 6124.0], [33.0, 6126.0], [33.1, 6128.0], [33.2, 6129.0], [33.3, 6131.0], [33.4, 6132.0], [33.5, 6134.0], [33.6, 6136.0], [33.7, 6138.0], [33.8, 6139.0], [33.9, 6140.0], [34.0, 6142.0], [34.1, 6144.0], [34.2, 6146.0], [34.3, 6147.0], [34.4, 6149.0], [34.5, 6151.0], [34.6, 6152.0], [34.7, 6153.0], [34.8, 6155.0], [34.9, 6156.0], [35.0, 6158.0], [35.1, 6159.0], [35.2, 6161.0], [35.3, 6163.0], [35.4, 6164.0], [35.5, 6165.0], [35.6, 6167.0], [35.7, 6169.0], [35.8, 6170.0], [35.9, 6172.0], [36.0, 6173.0], [36.1, 6174.0], [36.2, 6176.0], [36.3, 6177.0], [36.4, 6179.0], [36.5, 6181.0], [36.6, 6182.0], [36.7, 6184.0], [36.8, 6186.0], [36.9, 6187.0], [37.0, 6189.0], [37.1, 6190.0], [37.2, 6192.0], [37.3, 6194.0], [37.4, 6195.0], [37.5, 6196.0], [37.6, 6198.0], [37.7, 6200.0], [37.8, 6201.0], [37.9, 6203.0], [38.0, 6204.0], [38.1, 6206.0], [38.2, 6207.0], [38.3, 6209.0], [38.4, 6211.0], [38.5, 6212.0], [38.6, 6214.0], [38.7, 6216.0], [38.8, 6217.0], [38.9, 6219.0], [39.0, 6221.0], [39.1, 6223.0], [39.2, 6224.0], [39.3, 6226.0], [39.4, 6226.0], [39.5, 6228.0], [39.6, 6230.0], [39.7, 6231.0], [39.8, 6233.0], [39.9, 6234.0], [40.0, 6235.0], [40.1, 6236.0], [40.2, 6237.0], [40.3, 6239.0], [40.4, 6241.0], [40.5, 6243.0], [40.6, 6245.0], [40.7, 6246.0], [40.8, 6248.0], [40.9, 6249.0], [41.0, 6250.0], [41.1, 6252.0], [41.2, 6253.0], [41.3, 6255.0], [41.4, 6256.0], [41.5, 6258.0], [41.6, 6260.0], [41.7, 6261.0], [41.8, 6263.0], [41.9, 6265.0], [42.0, 6266.0], [42.1, 6267.0], [42.2, 6268.0], [42.3, 6270.0], [42.4, 6271.0], [42.5, 6273.0], [42.6, 6274.0], [42.7, 6276.0], [42.8, 6277.0], [42.9, 6279.0], [43.0, 6280.0], [43.1, 6282.0], [43.2, 6284.0], [43.3, 6286.0], [43.4, 6288.0], [43.5, 6290.0], [43.6, 6291.0], [43.7, 6292.0], [43.8, 6294.0], [43.9, 6296.0], [44.0, 6297.0], [44.1, 6298.0], [44.2, 6299.0], [44.3, 6300.0], [44.4, 6302.0], [44.5, 6303.0], [44.6, 6306.0], [44.7, 6307.0], [44.8, 6309.0], [44.9, 6312.0], [45.0, 6313.0], [45.1, 6314.0], [45.2, 6315.0], [45.3, 6317.0], [45.4, 6318.0], [45.5, 6320.0], [45.6, 6322.0], [45.7, 6323.0], [45.8, 6325.0], [45.9, 6326.0], [46.0, 6328.0], [46.1, 6330.0], [46.2, 6331.0], [46.3, 6333.0], [46.4, 6334.0], [46.5, 6335.0], [46.6, 6337.0], [46.7, 6339.0], [46.8, 6340.0], [46.9, 6341.0], [47.0, 6343.0], [47.1, 6346.0], [47.2, 6347.0], [47.3, 6350.0], [47.4, 6351.0], [47.5, 6353.0], [47.6, 6355.0], [47.7, 6357.0], [47.8, 6359.0], [47.9, 6360.0], [48.0, 6362.0], [48.1, 6364.0], [48.2, 6366.0], [48.3, 6368.0], [48.4, 6370.0], [48.5, 6372.0], [48.6, 6373.0], [48.7, 6375.0], [48.8, 6376.0], [48.9, 6378.0], [49.0, 6379.0], [49.1, 6382.0], [49.2, 6384.0], [49.3, 6386.0], [49.4, 6387.0], [49.5, 6388.0], [49.6, 6391.0], [49.7, 6392.0], [49.8, 6393.0], [49.9, 6394.0], [50.0, 6396.0], [50.1, 6397.0], [50.2, 6399.0], [50.3, 6400.0], [50.4, 6401.0], [50.5, 6403.0], [50.6, 6405.0], [50.7, 6406.0], [50.8, 6408.0], [50.9, 6410.0], [51.0, 6412.0], [51.1, 6414.0], [51.2, 6416.0], [51.3, 6417.0], [51.4, 6420.0], [51.5, 6420.0], [51.6, 6423.0], [51.7, 6424.0], [51.8, 6427.0], [51.9, 6428.0], [52.0, 6430.0], [52.1, 6432.0], [52.2, 6434.0], [52.3, 6435.0], [52.4, 6437.0], [52.5, 6439.0], [52.6, 6441.0], [52.7, 6442.0], [52.8, 6444.0], [52.9, 6446.0], [53.0, 6448.0], [53.1, 6450.0], [53.2, 6451.0], [53.3, 6453.0], [53.4, 6455.0], [53.5, 6457.0], [53.6, 6458.0], [53.7, 6460.0], [53.8, 6461.0], [53.9, 6464.0], [54.0, 6465.0], [54.1, 6466.0], [54.2, 6468.0], [54.3, 6470.0], [54.4, 6472.0], [54.5, 6474.0], [54.6, 6475.0], [54.7, 6477.0], [54.8, 6479.0], [54.9, 6480.0], [55.0, 6482.0], [55.1, 6483.0], [55.2, 6485.0], [55.3, 6487.0], [55.4, 6489.0], [55.5, 6491.0], [55.6, 6492.0], [55.7, 6494.0], [55.8, 6496.0], [55.9, 6497.0], [56.0, 6499.0], [56.1, 6501.0], [56.2, 6503.0], [56.3, 6505.0], [56.4, 6507.0], [56.5, 6510.0], [56.6, 6511.0], [56.7, 6514.0], [56.8, 6516.0], [56.9, 6517.0], [57.0, 6518.0], [57.1, 6520.0], [57.2, 6522.0], [57.3, 6524.0], [57.4, 6526.0], [57.5, 6527.0], [57.6, 6529.0], [57.7, 6530.0], [57.8, 6532.0], [57.9, 6534.0], [58.0, 6536.0], [58.1, 6537.0], [58.2, 6539.0], [58.3, 6540.0], [58.4, 6542.0], [58.5, 6544.0], [58.6, 6546.0], [58.7, 6548.0], [58.8, 6550.0], [58.9, 6552.0], [59.0, 6554.0], [59.1, 6556.0], [59.2, 6557.0], [59.3, 6559.0], [59.4, 6562.0], [59.5, 6563.0], [59.6, 6564.0], [59.7, 6567.0], [59.8, 6568.0], [59.9, 6570.0], [60.0, 6572.0], [60.1, 6574.0], [60.2, 6575.0], [60.3, 6577.0], [60.4, 6579.0], [60.5, 6581.0], [60.6, 6583.0], [60.7, 6585.0], [60.8, 6588.0], [60.9, 6590.0], [61.0, 6592.0], [61.1, 6594.0], [61.2, 6596.0], [61.3, 6599.0], [61.4, 6601.0], [61.5, 6604.0], [61.6, 6606.0], [61.7, 6608.0], [61.8, 6610.0], [61.9, 6612.0], [62.0, 6613.0], [62.1, 6615.0], [62.2, 6618.0], [62.3, 6619.0], [62.4, 6622.0], [62.5, 6623.0], [62.6, 6625.0], [62.7, 6627.0], [62.8, 6629.0], [62.9, 6632.0], [63.0, 6635.0], [63.1, 6637.0], [63.2, 6638.0], [63.3, 6641.0], [63.4, 6643.0], [63.5, 6645.0], [63.6, 6648.0], [63.7, 6650.0], [63.8, 6652.0], [63.9, 6654.0], [64.0, 6656.0], [64.1, 6658.0], [64.2, 6661.0], [64.3, 6664.0], [64.4, 6665.0], [64.5, 6668.0], [64.6, 6669.0], [64.7, 6671.0], [64.8, 6674.0], [64.9, 6676.0], [65.0, 6678.0], [65.1, 6682.0], [65.2, 6684.0], [65.3, 6686.0], [65.4, 6688.0], [65.5, 6690.0], [65.6, 6692.0], [65.7, 6694.0], [65.8, 6696.0], [65.9, 6698.0], [66.0, 6699.0], [66.1, 6701.0], [66.2, 6703.0], [66.3, 6705.0], [66.4, 6708.0], [66.5, 6710.0], [66.6, 6714.0], [66.7, 6716.0], [66.8, 6717.0], [66.9, 6719.0], [67.0, 6721.0], [67.1, 6724.0], [67.2, 6727.0], [67.3, 6730.0], [67.4, 6731.0], [67.5, 6733.0], [67.6, 6736.0], [67.7, 6739.0], [67.8, 6742.0], [67.9, 6745.0], [68.0, 6746.0], [68.1, 6750.0], [68.2, 6752.0], [68.3, 6754.0], [68.4, 6756.0], [68.5, 6758.0], [68.6, 6761.0], [68.7, 6762.0], [68.8, 6763.0], [68.9, 6765.0], [69.0, 6768.0], [69.1, 6770.0], [69.2, 6773.0], [69.3, 6775.0], [69.4, 6777.0], [69.5, 6779.0], [69.6, 6782.0], [69.7, 6784.0], [69.8, 6787.0], [69.9, 6788.0], [70.0, 6791.0], [70.1, 6793.0], [70.2, 6796.0], [70.3, 6798.0], [70.4, 6801.0], [70.5, 6805.0], [70.6, 6808.0], [70.7, 6810.0], [70.8, 6812.0], [70.9, 6815.0], [71.0, 6818.0], [71.1, 6821.0], [71.2, 6824.0], [71.3, 6827.0], [71.4, 6830.0], [71.5, 6832.0], [71.6, 6835.0], [71.7, 6838.0], [71.8, 6841.0], [71.9, 6845.0], [72.0, 6847.0], [72.1, 6850.0], [72.2, 6852.0], [72.3, 6854.0], [72.4, 6857.0], [72.5, 6860.0], [72.6, 6863.0], [72.7, 6866.0], [72.8, 6869.0], [72.9, 6872.0], [73.0, 6875.0], [73.1, 6878.0], [73.2, 6881.0], [73.3, 6884.0], [73.4, 6886.0], [73.5, 6889.0], [73.6, 6893.0], [73.7, 6896.0], [73.8, 6899.0], [73.9, 6901.0], [74.0, 6904.0], [74.1, 6907.0], [74.2, 6909.0], [74.3, 6912.0], [74.4, 6915.0], [74.5, 6918.0], [74.6, 6922.0], [74.7, 6925.0], [74.8, 6928.0], [74.9, 6931.0], [75.0, 6935.0], [75.1, 6938.0], [75.2, 6943.0], [75.3, 6946.0], [75.4, 6949.0], [75.5, 6952.0], [75.6, 6956.0], [75.7, 6959.0], [75.8, 6964.0], [75.9, 6967.0], [76.0, 6971.0], [76.1, 6975.0], [76.2, 6979.0], [76.3, 6983.0], [76.4, 6987.0], [76.5, 6991.0], [76.6, 6995.0], [76.7, 6999.0], [76.8, 7003.0], [76.9, 7007.0], [77.0, 7009.0], [77.1, 7015.0], [77.2, 7018.0], [77.3, 7023.0], [77.4, 7027.0], [77.5, 7032.0], [77.6, 7037.0], [77.7, 7039.0], [77.8, 7044.0], [77.9, 7048.0], [78.0, 7052.0], [78.1, 7059.0], [78.2, 7064.0], [78.3, 7069.0], [78.4, 7074.0], [78.5, 7079.0], [78.6, 7084.0], [78.7, 7089.0], [78.8, 7093.0], [78.9, 7097.0], [79.0, 7101.0], [79.1, 7106.0], [79.2, 7112.0], [79.3, 7116.0], [79.4, 7123.0], [79.5, 7127.0], [79.6, 7131.0], [79.7, 7137.0], [79.8, 7142.0], [79.9, 7148.0], [80.0, 7153.0], [80.1, 7159.0], [80.2, 7164.0], [80.3, 7169.0], [80.4, 7175.0], [80.5, 7182.0], [80.6, 7187.0], [80.7, 7194.0], [80.8, 7199.0], [80.9, 7207.0], [81.0, 7212.0], [81.1, 7217.0], [81.2, 7224.0], [81.3, 7228.0], [81.4, 7235.0], [81.5, 7241.0], [81.6, 7247.0], [81.7, 7254.0], [81.8, 7258.0], [81.9, 7264.0], [82.0, 7269.0], [82.1, 7275.0], [82.2, 7282.0], [82.3, 7290.0], [82.4, 7297.0], [82.5, 7301.0], [82.6, 7311.0], [82.7, 7318.0], [82.8, 7325.0], [82.9, 7332.0], [83.0, 7341.0], [83.1, 7347.0], [83.2, 7357.0], [83.3, 7364.0], [83.4, 7370.0], [83.5, 7377.0], [83.6, 7386.0], [83.7, 7392.0], [83.8, 7401.0], [83.9, 7409.0], [84.0, 7415.0], [84.1, 7427.0], [84.2, 7437.0], [84.3, 7454.0], [84.4, 7464.0], [84.5, 7475.0], [84.6, 7485.0], [84.7, 7496.0], [84.8, 7505.0], [84.9, 7518.0], [85.0, 7530.0], [85.1, 7540.0], [85.2, 7557.0], [85.3, 7567.0], [85.4, 7577.0], [85.5, 7592.0], [85.6, 7611.0], [85.7, 7626.0], [85.8, 7647.0], [85.9, 7663.0], [86.0, 7683.0], [86.1, 7702.0], [86.2, 7723.0], [86.3, 7746.0], [86.4, 7767.0], [86.5, 7798.0], [86.6, 7816.0], [86.7, 7836.0], [86.8, 7860.0], [86.9, 7888.0], [87.0, 7918.0], [87.1, 7952.0], [87.2, 7981.0], [87.3, 8005.0], [87.4, 8048.0], [87.5, 8093.0], [87.6, 8131.0], [87.7, 8171.0], [87.8, 8234.0], [87.9, 8295.0], [88.0, 8349.0], [88.1, 8401.0], [88.2, 8461.0], [88.3, 8512.0], [88.4, 8592.0], [88.5, 8666.0], [88.6, 8743.0], [88.7, 8811.0], [88.8, 8879.0], [88.9, 8947.0], [89.0, 9068.0], [89.1, 9178.0], [89.2, 9280.0], [89.3, 9434.0], [89.4, 9596.0], [89.5, 9683.0], [89.6, 9759.0], [89.7, 9890.0], [89.8, 10094.0], [89.9, 10221.0], [90.0, 10463.0], [90.1, 10625.0], [90.2, 10793.0], [90.3, 10988.0], [90.4, 11166.0], [90.5, 11377.0], [90.6, 11593.0], [90.7, 11814.0], [90.8, 11974.0], [90.9, 12130.0], [91.0, 12300.0], [91.1, 12435.0], [91.2, 12654.0], [91.3, 12858.0], [91.4, 12947.0], [91.5, 13127.0], [91.6, 13270.0], [91.7, 13420.0], [91.8, 13580.0], [91.9, 13714.0], [92.0, 13839.0], [92.1, 14061.0], [92.2, 14275.0], [92.3, 14463.0], [92.4, 14621.0], [92.5, 14825.0], [92.6, 15011.0], [92.7, 15200.0], [92.8, 15368.0], [92.9, 15525.0], [93.0, 15697.0], [93.1, 15874.0], [93.2, 16046.0], [93.3, 16251.0], [93.4, 16438.0], [93.5, 16579.0], [93.6, 16841.0], [93.7, 17028.0], [93.8, 17249.0], [93.9, 17384.0], [94.0, 17590.0], [94.1, 17712.0], [94.2, 17872.0], [94.3, 18009.0], [94.4, 18192.0], [94.5, 18340.0], [94.6, 18456.0], [94.7, 18654.0], [94.8, 18747.0], [94.9, 18886.0], [95.0, 19003.0], [95.1, 19084.0], [95.2, 19179.0], [95.3, 19316.0], [95.4, 19417.0], [95.5, 19545.0], [95.6, 19650.0], [95.7, 19761.0], [95.8, 19905.0], [95.9, 20038.0], [96.0, 20249.0], [96.1, 20367.0], [96.2, 20578.0], [96.3, 20740.0], [96.4, 20945.0], [96.5, 21071.0], [96.6, 21222.0], [96.7, 21367.0], [96.8, 21498.0], [96.9, 21693.0], [97.0, 21880.0], [97.1, 22054.0], [97.2, 22229.0], [97.3, 22369.0], [97.4, 22512.0], [97.5, 22618.0], [97.6, 22759.0], [97.7, 22940.0], [97.8, 23088.0], [97.9, 23240.0], [98.0, 23402.0], [98.1, 23582.0], [98.2, 23714.0], [98.3, 23853.0], [98.4, 24038.0], [98.5, 24293.0], [98.6, 24486.0], [98.7, 24748.0], [98.8, 25033.0], [98.9, 25279.0], [99.0, 25546.0], [99.1, 25787.0], [99.2, 26098.0], [99.3, 26359.0], [99.4, 26563.0], [99.5, 26937.0], [99.6, 27247.0], [99.7, 27777.0], [99.8, 28336.0], [99.9, 28797.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 1308.0, "series": [{"data": [[200.0, 1.0], [400.0, 2.0], [500.0, 2.0], [800.0, 1.0], [900.0, 2.0], [1000.0, 1.0], [1200.0, 1.0], [1300.0, 1.0], [1500.0, 2.0], [1600.0, 1.0], [1700.0, 1.0], [1800.0, 2.0], [1900.0, 1.0], [2300.0, 1.0], [2200.0, 2.0], [2400.0, 3.0], [2500.0, 1.0], [2600.0, 4.0], [2800.0, 2.0], [2900.0, 2.0], [3000.0, 1.0], [3100.0, 3.0], [3200.0, 3.0], [3300.0, 1.0], [3400.0, 2.0], [3500.0, 1.0], [3700.0, 4.0], [3600.0, 3.0], [3800.0, 7.0], [3900.0, 3.0], [4000.0, 7.0], [4100.0, 4.0], [4200.0, 3.0], [4300.0, 5.0], [4500.0, 6.0], [4600.0, 4.0], [4400.0, 4.0], [4800.0, 19.0], [4700.0, 7.0], [4900.0, 32.0], [5100.0, 87.0], [5000.0, 58.0], [5200.0, 171.0], [5300.0, 224.0], [5600.0, 630.0], [5500.0, 492.0], [5400.0, 326.0], [5700.0, 798.0], [5800.0, 914.0], [5900.0, 1128.0], [6000.0, 1271.0], [6100.0, 1286.0], [6200.0, 1308.0], [6300.0, 1210.0], [6400.0, 1155.0], [6600.0, 941.0], [6500.0, 1058.0], [6800.0, 699.0], [6700.0, 858.0], [6900.0, 577.0], [7000.0, 448.0], [7100.0, 369.0], [7300.0, 268.0], [7200.0, 330.0], [7400.0, 189.0], [7500.0, 157.0], [7600.0, 113.0], [7700.0, 85.0], [7800.0, 87.0], [7900.0, 64.0], [8000.0, 50.0], [8100.0, 45.0], [8400.0, 37.0], [8300.0, 38.0], [8200.0, 33.0], [8600.0, 26.0], [8500.0, 28.0], [8700.0, 28.0], [8900.0, 27.0], [9000.0, 17.0], [9100.0, 18.0], [8800.0, 26.0], [9200.0, 19.0], [9600.0, 21.0], [9700.0, 26.0], [9500.0, 14.0], [9300.0, 13.0], [9400.0, 10.0], [10000.0, 9.0], [9800.0, 14.0], [10200.0, 13.0], [10100.0, 13.0], [9900.0, 9.0], [10500.0, 11.0], [10400.0, 14.0], [10300.0, 7.0], [10700.0, 11.0], [10600.0, 11.0], [11000.0, 9.0], [10800.0, 10.0], [11100.0, 16.0], [11200.0, 10.0], [10900.0, 10.0], [11600.0, 8.0], [11500.0, 11.0], [11400.0, 8.0], [11300.0, 7.0], [11700.0, 10.0], [11800.0, 8.0], [12100.0, 8.0], [12200.0, 15.0], [11900.0, 17.0], [12000.0, 12.0], [12400.0, 17.0], [12300.0, 13.0], [12600.0, 11.0], [12700.0, 7.0], [12500.0, 5.0], [13200.0, 16.0], [13300.0, 12.0], [13100.0, 9.0], [12800.0, 16.0], [13000.0, 13.0], [12900.0, 18.0], [13400.0, 14.0], [13500.0, 13.0], [13600.0, 13.0], [13700.0, 19.0], [13800.0, 10.0], [14100.0, 8.0], [14000.0, 9.0], [14200.0, 13.0], [14300.0, 7.0], [13900.0, 9.0], [14600.0, 12.0], [14400.0, 12.0], [14800.0, 10.0], [14500.0, 14.0], [14700.0, 8.0], [14900.0, 11.0], [15300.0, 9.0], [15100.0, 11.0], [15200.0, 15.0], [15000.0, 10.0], [15500.0, 11.0], [15800.0, 12.0], [15600.0, 12.0], [15400.0, 14.0], [15700.0, 8.0], [15900.0, 14.0], [16300.0, 10.0], [16100.0, 9.0], [16000.0, 10.0], [16200.0, 13.0], [16600.0, 10.0], [16400.0, 16.0], [17000.0, 7.0], [16800.0, 12.0], [17400.0, 10.0], [17200.0, 13.0], [18000.0, 12.0], [17600.0, 15.0], [17800.0, 11.0], [18200.0, 13.0], [18400.0, 15.0], [18800.0, 18.0], [19000.0, 24.0], [19400.0, 20.0], [19200.0, 17.0], [18600.0, 12.0], [19600.0, 15.0], [20000.0, 10.0], [19800.0, 16.0], [20200.0, 12.0], [20400.0, 6.0], [21400.0, 17.0], [20600.0, 11.0], [20800.0, 14.0], [21200.0, 10.0], [21000.0, 18.0], [22000.0, 8.0], [21600.0, 6.0], [22400.0, 13.0], [21800.0, 14.0], [22200.0, 15.0], [22600.0, 13.0], [23000.0, 13.0], [22800.0, 10.0], [23400.0, 11.0], [23200.0, 11.0], [23600.0, 15.0], [24200.0, 7.0], [24400.0, 12.0], [23800.0, 10.0], [24000.0, 11.0], [25000.0, 10.0], [24800.0, 6.0], [25200.0, 7.0], [24600.0, 6.0], [25400.0, 4.0], [25800.0, 10.0], [26400.0, 8.0], [26600.0, 3.0], [26200.0, 8.0], [25600.0, 6.0], [26000.0, 6.0], [27600.0, 6.0], [27000.0, 8.0], [27200.0, 5.0], [27400.0, 3.0], [26800.0, 5.0], [28200.0, 4.0], [28000.0, 7.0], [28400.0, 3.0], [28600.0, 4.0], [27800.0, 3.0], [28800.0, 2.0], [29200.0, 2.0], [29000.0, 2.0], [29600.0, 1.0], [30000.0, 1.0], [29800.0, 2.0], [32600.0, 1.0], [16900.0, 9.0], [17100.0, 9.0], [16500.0, 10.0], [16700.0, 4.0], [17300.0, 15.0], [18300.0, 17.0], [18100.0, 12.0], [17900.0, 16.0], [17500.0, 11.0], [17700.0, 13.0], [19300.0, 17.0], [19100.0, 20.0], [18500.0, 12.0], [18900.0, 16.0], [18700.0, 14.0], [19700.0, 14.0], [19900.0, 15.0], [20300.0, 14.0], [20100.0, 11.0], [19500.0, 18.0], [20900.0, 9.0], [21100.0, 12.0], [20500.0, 14.0], [21300.0, 17.0], [20700.0, 11.0], [21500.0, 14.0], [21700.0, 9.0], [22500.0, 22.0], [21900.0, 12.0], [22300.0, 15.0], [22100.0, 11.0], [22700.0, 13.0], [22900.0, 13.0], [23500.0, 11.0], [23300.0, 13.0], [23100.0, 14.0], [23700.0, 17.0], [23900.0, 14.0], [24500.0, 7.0], [24100.0, 7.0], [24300.0, 8.0], [24900.0, 7.0], [24700.0, 8.0], [25100.0, 9.0], [25500.0, 13.0], [25300.0, 8.0], [25900.0, 3.0], [26300.0, 13.0], [26100.0, 6.0], [25700.0, 8.0], [26500.0, 11.0], [26700.0, 5.0], [27100.0, 5.0], [27500.0, 2.0], [26900.0, 3.0], [27300.0, 3.0], [27700.0, 6.0], [28500.0, 6.0], [28300.0, 5.0], [28100.0, 3.0], [27900.0, 1.0], [28900.0, 4.0], [29300.0, 2.0], [28700.0, 4.0], [30300.0, 1.0], [30100.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 32600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 19989.0, "series": [{"data": [[0.0, 3.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 8.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 19989.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 84.37181996086105, "minX": 1.66057764E12, "maxY": 100.0, "series": [{"data": [[1.66057914E12, 84.37181996086105], [1.66057854E12, 100.0], [1.66057884E12, 100.0], [1.66057842E12, 100.0], [1.66057872E12, 100.0], [1.66057782E12, 100.0], [1.66057812E12, 100.0], [1.6605777E12, 100.0], [1.660578E12, 100.0], [1.66057902E12, 100.0], [1.6605789E12, 100.0], [1.6605783E12, 100.0], [1.6605786E12, 100.0], [1.66057818E12, 100.0], [1.66057848E12, 100.0], [1.66057788E12, 100.0], [1.66057776E12, 100.0], [1.66057878E12, 100.0], [1.66057908E12, 100.0], [1.66057866E12, 100.0], [1.66057896E12, 100.0], [1.66057806E12, 100.0], [1.66057836E12, 100.0], [1.66057794E12, 100.0], [1.66057824E12, 100.0], [1.66057764E12, 100.0]], "isOverall": false, "label": "Thread Group Create Type", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66057914E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 260.0, "minX": 1.0, "maxY": 7686.1752927459665, "series": [{"data": [[2.0, 531.5], [3.0, 564.0], [4.0, 493.0], [5.0, 800.0], [6.0, 944.0], [7.0, 1021.0], [8.0, 1329.0], [9.0, 1282.0], [10.0, 1517.0], [11.0, 1878.0], [12.0, 1941.0], [13.0, 1663.0], [14.0, 2179.6666666666665], [15.0, 1867.0], [16.0, 2237.0], [17.0, 2454.0], [18.0, 1756.0], [19.0, 2949.0], [20.0, 3444.0], [21.0, 2821.0], [22.0, 2659.0], [23.0, 2568.5], [24.0, 4374.0], [25.0, 2491.0], [26.0, 3319.0], [27.0, 3844.0], [28.0, 2641.0], [29.0, 3073.0], [30.0, 2311.0], [31.0, 3491.5], [33.0, 3250.0], [32.0, 3121.0], [35.0, 4105.0], [34.0, 3003.0], [37.0, 3670.0], [36.0, 3600.0], [39.0, 3623.0], [38.0, 2852.0], [41.0, 3824.0], [40.0, 3916.0], [43.0, 3902.0], [42.0, 4050.0], [45.0, 4064.3333333333335], [44.0, 3212.0], [47.0, 5014.0], [46.0, 4070.0], [49.0, 4036.0], [48.0, 3710.0], [51.0, 3568.0], [50.0, 3748.5], [53.0, 4529.0], [52.0, 3767.5], [55.0, 4052.0], [54.0, 4023.0], [57.0, 4650.333333333333], [56.0, 4574.0], [59.0, 4657.5], [58.0, 4963.0], [61.0, 5154.0], [60.0, 4908.0], [63.0, 5078.5], [62.0, 4580.333333333333], [67.0, 5004.0], [66.0, 4977.0], [65.0, 4852.0], [64.0, 4831.0], [71.0, 5282.5], [70.0, 5135.0], [69.0, 4298.0], [68.0, 5467.0], [75.0, 5435.5], [74.0, 5501.75], [73.0, 4439.0], [72.0, 5010.769230769231], [79.0, 5638.4], [78.0, 5385.0], [77.0, 5316.0], [76.0, 5365.5], [83.0, 5610.0], [82.0, 5666.636363636364], [81.0, 5412.0], [80.0, 5670.5], [87.0, 5150.0], [86.0, 5403.666666666667], [85.0, 5734.25], [84.0, 5665.5], [91.0, 5825.142857142858], [90.0, 6359.0], [89.0, 5679.666666666667], [88.0, 5630.5], [95.0, 5663.5], [94.0, 5866.75], [93.0, 6668.0], [92.0, 5630.666666666667], [99.0, 5925.562499999999], [98.0, 5966.285714285713], [97.0, 5823.642857142857], [96.0, 5900.666666666667], [100.0, 7686.1752927459665], [1.0, 260.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[99.60070000000003, 7647.625499999985]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1618.1666666666667, "minX": 1.66057764E12, "maxY": 3.99010032E7, "series": [{"data": [[1.66057914E12, 2.07209478E7], [1.66057854E12, 2.84254098E7], [1.66057884E12, 3.8319561E7], [1.66057842E12, 2.6762868E7], [1.66057872E12, 3.15477444E7], [1.66057782E12, 2.97230034E7], [1.66057812E12, 3.8927808E7], [1.6605777E12, 2.90336568E7], [1.660578E12, 3.87656088E7], [1.66057902E12, 3.43456806E7], [1.6605789E12, 2.99663022E7], [1.6605783E12, 2.48164776E7], [1.6605786E12, 2.91147564E7], [1.66057818E12, 2.2505139E7], [1.66057848E12, 3.8725059E7], [1.66057788E12, 3.55621746E7], [1.66057776E12, 3.3656334E7], [1.66057878E12, 2.6560119E7], [1.66057908E12, 2.8790358E7], [1.66057866E12, 3.33724854E7], [1.66057896E12, 2.66006688E7], [1.66057806E12, 2.29917366E7], [1.66057836E12, 3.99010032E7], [1.66057794E12, 2.61140712E7], [1.66057824E12, 3.92522064E7], [1.66057764E12, 3.649482E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66057914E12, 1618.1666666666667], [1.66057854E12, 2219.8333333333335], [1.66057884E12, 2992.5], [1.66057842E12, 2090.0], [1.66057872E12, 2463.6666666666665], [1.66057782E12, 2321.1666666666665], [1.66057812E12, 3040.0], [1.6605777E12, 2267.3333333333335], [1.660578E12, 3027.3333333333335], [1.66057902E12, 2682.1666666666665], [1.6605789E12, 2340.1666666666665], [1.6605783E12, 1938.0], [1.6605786E12, 2273.6666666666665], [1.66057818E12, 1757.5], [1.66057848E12, 3024.1666666666665], [1.66057788E12, 2777.1666666666665], [1.66057776E12, 2628.3333333333335], [1.66057878E12, 2074.1666666666665], [1.66057908E12, 2248.3333333333335], [1.66057866E12, 2606.1666666666665], [1.66057896E12, 2077.3333333333335], [1.66057806E12, 1795.5], [1.66057836E12, 3116.0], [1.66057794E12, 2039.3333333333333], [1.66057824E12, 3065.3333333333335], [1.66057764E12, 2850.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66057914E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5854.839530332677, "minX": 1.66057764E12, "maxY": 10628.190476190479, "series": [{"data": [[1.66057914E12, 5854.839530332677], [1.66057854E12, 8625.409415121241], [1.66057884E12, 6286.962962962954], [1.66057842E12, 9128.880303030299], [1.66057872E12, 6848.841902313623], [1.66057782E12, 7082.499317871759], [1.66057812E12, 6269.27291666667], [1.6605777E12, 7066.1340782122925], [1.660578E12, 6328.580543933056], [1.66057902E12, 8350.479338842953], [1.6605789E12, 8176.844384303123], [1.6605783E12, 9576.297385620912], [1.6605786E12, 6998.259052924791], [1.66057818E12, 9114.11351351351], [1.66057848E12, 6233.033507853403], [1.66057788E12, 7752.698973774218], [1.66057776E12, 8387.99397590361], [1.66057878E12, 10231.001526717553], [1.66057908E12, 8175.8774647887385], [1.66057866E12, 8410.314702308628], [1.66057896E12, 7544.714939024388], [1.66057806E12, 10628.190476190479], [1.66057836E12, 6262.340447154463], [1.66057794E12, 9237.281055900627], [1.66057824E12, 7122.4245867768705], [1.66057764E12, 6798.135555555557]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66057914E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5852.475538160474, "minX": 1.66057764E12, "maxY": 10623.943562610231, "series": [{"data": [[1.66057914E12, 5852.475538160474], [1.66057854E12, 8621.83309557774], [1.66057884E12, 6284.488888888886], [1.66057842E12, 9125.313636363648], [1.66057872E12, 6845.915167095115], [1.66057782E12, 7079.199181446109], [1.66057812E12, 6266.557291666665], [1.6605777E12, 7062.65083798883], [1.660578E12, 6325.949790794989], [1.66057902E12, 8347.740259740267], [1.6605789E12, 8173.610284167792], [1.6605783E12, 9572.777777777776], [1.6605786E12, 6994.53621169916], [1.66057818E12, 9109.886486486486], [1.66057848E12, 6230.371727748684], [1.66057788E12, 7749.952109464077], [1.66057776E12, 8384.75542168676], [1.66057878E12, 10227.609160305345], [1.66057908E12, 8172.543661971831], [1.66057866E12, 8406.998784933165], [1.66057896E12, 7541.249999999994], [1.66057806E12, 10623.943562610231], [1.66057836E12, 6259.739837398386], [1.66057794E12, 9233.656832298135], [1.66057824E12, 7119.956611570256], [1.66057764E12, 6794.78111111111]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66057914E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.013719512195121951, "minX": 1.66057764E12, "maxY": 0.19047619047619044, "series": [{"data": [[1.66057914E12, 0.09001956947162425], [1.66057854E12, 0.09415121255349505], [1.66057884E12, 0.03280423280423284], [1.66057842E12, 0.05], [1.66057872E12, 0.030848329048843194], [1.66057782E12, 0.049113233287858084], [1.66057812E12, 0.030208333333333347], [1.6605777E12, 0.053072625698324], [1.660578E12, 0.025104602510460258], [1.66057902E12, 0.06611570247933883], [1.6605789E12, 0.04194857916102846], [1.6605783E12, 0.040849673202614394], [1.6605786E12, 0.025069637883008346], [1.66057818E12, 0.03243243243243243], [1.66057848E12, 0.020942408376963383], [1.66057788E12, 0.041049030786773105], [1.66057776E12, 0.09638554216867472], [1.66057878E12, 0.09770992366412223], [1.66057908E12, 0.028169014084507032], [1.66057866E12, 0.06561360874848118], [1.66057896E12, 0.013719512195121951], [1.66057806E12, 0.19047619047619044], [1.66057836E12, 0.03353658536585372], [1.66057794E12, 0.04503105590062115], [1.66057824E12, 0.06921487603305788], [1.66057764E12, 0.04111111111111111]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66057914E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 260.0, "minX": 1.66057764E12, "maxY": 32616.0, "series": [{"data": [[1.66057914E12, 18510.0], [1.66057854E12, 22564.0], [1.66057884E12, 7600.0], [1.66057842E12, 24677.0], [1.66057872E12, 15048.0], [1.66057782E12, 19467.0], [1.66057812E12, 9619.0], [1.6605777E12, 17114.0], [1.660578E12, 13580.0], [1.66057902E12, 30199.0], [1.6605789E12, 20187.0], [1.6605783E12, 27612.0], [1.6605786E12, 20338.0], [1.66057818E12, 29384.0], [1.66057848E12, 8284.0], [1.66057788E12, 24709.0], [1.66057776E12, 25024.0], [1.66057878E12, 32616.0], [1.66057908E12, 20331.0], [1.66057866E12, 28688.0], [1.66057896E12, 23885.0], [1.66057806E12, 28980.0], [1.66057836E12, 15695.0], [1.66057794E12, 24115.0], [1.66057824E12, 27631.0], [1.66057764E12, 8451.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66057914E12, 7372.0], [1.66057854E12, 18004.600000000002], [1.66057884E12, 6855.2], [1.66057842E12, 19816.8], [1.66057872E12, 7579.8], [1.66057782E12, 7987.2000000000035], [1.66057812E12, 7003.8], [1.6605777E12, 7973.700000000001], [1.660578E12, 6953.6], [1.66057902E12, 17859.000000000007], [1.6605789E12, 16616.0], [1.6605783E12, 21833.100000000006], [1.6605786E12, 7574.500000000001], [1.66057818E12, 19065.00000000001], [1.66057848E12, 7047.4], [1.66057788E12, 14878.6], [1.66057776E12, 18874.699999999997], [1.66057878E12, 23858.6], [1.66057908E12, 16504.8], [1.66057866E12, 20230.2], [1.66057896E12, 9017.600000000002], [1.66057806E12, 23656.199999999997], [1.66057836E12, 6771.5], [1.66057794E12, 19205.5], [1.66057824E12, 7183.8], [1.66057764E12, 7500.7]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66057914E12, 14404.88], [1.66057854E12, 21849.06], [1.66057884E12, 7389.0199999999995], [1.66057842E12, 23862.79], [1.66057872E12, 13315.580000000022], [1.66057782E12, 17359.179999999997], [1.66057812E12, 7511.51], [1.6605777E12, 15429.460000000023], [1.660578E12, 8254.509999999997], [1.66057902E12, 28506.199999999997], [1.6605789E12, 19921.600000000002], [1.6605783E12, 26256.95], [1.6605786E12, 18311.87999999999], [1.66057818E12, 28094.96], [1.66057848E12, 7781.319999999995], [1.66057788E12, 23279.16], [1.66057776E12, 24451.32], [1.66057878E12, 29237.84], [1.66057908E12, 19740.81], [1.66057866E12, 27471.32], [1.66057896E12, 22017.08999999997], [1.66057806E12, 28534.2], [1.66057836E12, 12532.899999999992], [1.66057794E12, 23441.79999999999], [1.66057824E12, 23998.93999999999], [1.66057764E12, 8107.570000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66057914E12, 8742.199999999999], [1.66057854E12, 20694.899999999998], [1.66057884E12, 7032.899999999999], [1.66057842E12, 22694.649999999998], [1.66057872E12, 7996.2], [1.66057782E12, 12331.399999999998], [1.66057812E12, 7184.75], [1.6605777E12, 8755.9], [1.660578E12, 7206.349999999999], [1.66057902E12, 25279.8], [1.6605789E12, 19171.0], [1.6605783E12, 24680.05], [1.6605786E12, 11102.55], [1.66057818E12, 25024.8], [1.66057848E12, 7344.599999999999], [1.66057788E12, 20606.399999999972], [1.66057776E12, 22734.149999999994], [1.66057878E12, 26387.0], [1.66057908E12, 19029.35], [1.66057866E12, 24870.999999999996], [1.66057896E12, 15840.099999999982], [1.66057806E12, 26674.800000000003], [1.66057836E12, 7073.25], [1.66057794E12, 22104.5], [1.66057824E12, 16208.699999999977], [1.66057764E12, 7702.65]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66057914E12, 260.0], [1.66057854E12, 5052.0], [1.66057884E12, 4970.0], [1.66057842E12, 4972.0], [1.66057872E12, 5115.0], [1.66057782E12, 5151.0], [1.66057812E12, 4801.0], [1.6605777E12, 5277.0], [1.660578E12, 4827.0], [1.66057902E12, 4918.0], [1.6605789E12, 4784.0], [1.6605783E12, 5052.0], [1.6605786E12, 5135.0], [1.66057818E12, 5084.0], [1.66057848E12, 4760.0], [1.66057788E12, 4846.0], [1.66057776E12, 4917.0], [1.66057878E12, 4801.0], [1.66057908E12, 4646.0], [1.66057866E12, 4809.0], [1.66057896E12, 5045.0], [1.66057806E12, 5178.0], [1.66057836E12, 4806.0], [1.66057794E12, 5438.0], [1.66057824E12, 4569.0], [1.66057764E12, 5423.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66057914E12, 5879.0], [1.66057854E12, 6423.0], [1.66057884E12, 6253.0], [1.66057842E12, 6575.0], [1.66057872E12, 6701.0], [1.66057782E12, 6501.0], [1.66057812E12, 6221.0], [1.6605777E12, 6792.5], [1.660578E12, 6280.0], [1.66057902E12, 6158.0], [1.6605789E12, 6285.0], [1.6605783E12, 6578.5], [1.6605786E12, 6527.0], [1.66057818E12, 6605.0], [1.66057848E12, 6165.0], [1.66057788E12, 6281.0], [1.66057776E12, 6465.0], [1.66057878E12, 6265.0], [1.66057908E12, 6524.5], [1.66057866E12, 6113.0], [1.66057896E12, 6601.0], [1.66057806E12, 6805.0], [1.66057836E12, 6107.0], [1.66057794E12, 6805.5], [1.66057824E12, 6238.0], [1.66057764E12, 6767.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66057914E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 5958.0, "minX": 1.0, "maxY": 18336.0, "series": [{"data": [[2.0, 16917.0], [32.0, 6816.5], [37.0, 6527.0], [38.0, 6761.5], [39.0, 6753.0], [44.0, 7084.5], [3.0, 16793.0], [4.0, 18336.0], [5.0, 15446.0], [6.0, 10236.0], [7.0, 9756.0], [8.0, 7580.0], [9.0, 6952.0], [10.0, 6739.5], [11.0, 6528.0], [12.0, 6480.5], [13.0, 6436.0], [14.0, 6314.5], [15.0, 6332.0], [1.0, 16048.0], [16.0, 6349.0], [17.0, 6235.0], [18.0, 6292.0], [19.0, 6253.5], [20.0, 6249.0], [21.0, 6151.0], [22.0, 6321.5], [23.0, 6228.0], [24.0, 6165.0], [25.0, 6392.5], [26.0, 6503.5], [27.0, 5958.0], [28.0, 6584.5], [29.0, 6446.0], [30.0, 6354.0], [31.0, 6259.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 44.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 5955.0, "minX": 1.0, "maxY": 18327.0, "series": [{"data": [[2.0, 16899.5], [32.0, 6813.5], [37.0, 6525.0], [38.0, 6756.5], [39.0, 6745.5], [44.0, 7082.5], [3.0, 16785.5], [4.0, 18327.0], [5.0, 15435.0], [6.0, 10227.5], [7.0, 9749.0], [8.0, 7577.5], [9.0, 6949.5], [10.0, 6737.5], [11.0, 6526.0], [12.0, 6477.5], [13.0, 6433.5], [14.0, 6312.0], [15.0, 6329.0], [1.0, 16039.0], [16.0, 6346.0], [17.0, 6233.0], [18.0, 6289.0], [19.0, 6249.0], [20.0, 6246.5], [21.0, 6148.5], [22.0, 6319.0], [23.0, 6226.0], [24.0, 6163.0], [25.0, 6390.5], [26.0, 6501.0], [27.0, 5955.0], [28.0, 6583.0], [29.0, 6443.0], [30.0, 6351.5], [31.0, 6256.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 44.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.66057758E12, "maxY": 16.4, "series": [{"data": [[1.66057914E12, 6.85], [1.66057854E12, 11.683333333333334], [1.66057884E12, 15.75], [1.66057842E12, 11.0], [1.66057872E12, 12.966666666666667], [1.66057782E12, 12.216666666666667], [1.66057812E12, 16.0], [1.6605777E12, 11.933333333333334], [1.660578E12, 15.933333333333334], [1.66057902E12, 14.116666666666667], [1.6605789E12, 12.316666666666666], [1.6605783E12, 10.2], [1.6605786E12, 11.966666666666667], [1.66057818E12, 9.25], [1.66057848E12, 15.916666666666666], [1.66057758E12, 1.6666666666666667], [1.66057788E12, 14.616666666666667], [1.66057776E12, 13.833333333333334], [1.66057878E12, 10.916666666666666], [1.66057908E12, 11.833333333333334], [1.66057866E12, 13.716666666666667], [1.66057896E12, 10.933333333333334], [1.66057806E12, 9.45], [1.66057836E12, 16.4], [1.66057794E12, 10.733333333333333], [1.66057824E12, 16.133333333333333], [1.66057764E12, 15.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66057914E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 8.516666666666667, "minX": 1.66057764E12, "maxY": 16.4, "series": [{"data": [[1.66057914E12, 8.516666666666667], [1.66057854E12, 11.683333333333334], [1.66057884E12, 15.75], [1.66057842E12, 11.0], [1.66057872E12, 12.966666666666667], [1.66057782E12, 12.216666666666667], [1.66057812E12, 16.0], [1.6605777E12, 11.933333333333334], [1.660578E12, 15.933333333333334], [1.66057902E12, 14.116666666666667], [1.6605789E12, 12.316666666666666], [1.6605783E12, 10.2], [1.6605786E12, 11.966666666666667], [1.66057818E12, 9.25], [1.66057848E12, 15.916666666666666], [1.66057788E12, 14.616666666666667], [1.66057776E12, 13.833333333333334], [1.66057878E12, 10.916666666666666], [1.66057908E12, 11.833333333333334], [1.66057866E12, 13.716666666666667], [1.66057896E12, 10.933333333333334], [1.66057806E12, 9.45], [1.66057836E12, 16.4], [1.66057794E12, 10.733333333333333], [1.66057824E12, 16.133333333333333], [1.66057764E12, 15.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66057914E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 8.516666666666667, "minX": 1.66057764E12, "maxY": 16.4, "series": [{"data": [[1.66057914E12, 8.516666666666667], [1.66057854E12, 11.683333333333334], [1.66057884E12, 15.75], [1.66057842E12, 11.0], [1.66057872E12, 12.966666666666667], [1.66057782E12, 12.216666666666667], [1.66057812E12, 16.0], [1.6605777E12, 11.933333333333334], [1.660578E12, 15.933333333333334], [1.66057902E12, 14.116666666666667], [1.6605789E12, 12.316666666666666], [1.6605783E12, 10.2], [1.6605786E12, 11.966666666666667], [1.66057818E12, 9.25], [1.66057848E12, 15.916666666666666], [1.66057788E12, 14.616666666666667], [1.66057776E12, 13.833333333333334], [1.66057878E12, 10.916666666666666], [1.66057908E12, 11.833333333333334], [1.66057866E12, 13.716666666666667], [1.66057896E12, 10.933333333333334], [1.66057806E12, 9.45], [1.66057836E12, 16.4], [1.66057794E12, 10.733333333333333], [1.66057824E12, 16.133333333333333], [1.66057764E12, 15.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66057914E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 8.516666666666667, "minX": 1.66057764E12, "maxY": 16.4, "series": [{"data": [[1.66057914E12, 8.516666666666667], [1.66057854E12, 11.683333333333334], [1.66057884E12, 15.75], [1.66057842E12, 11.0], [1.66057872E12, 12.966666666666667], [1.66057782E12, 12.216666666666667], [1.66057812E12, 16.0], [1.6605777E12, 11.933333333333334], [1.660578E12, 15.933333333333334], [1.66057902E12, 14.116666666666667], [1.6605789E12, 12.316666666666666], [1.6605783E12, 10.2], [1.6605786E12, 11.966666666666667], [1.66057818E12, 9.25], [1.66057848E12, 15.916666666666666], [1.66057788E12, 14.616666666666667], [1.66057776E12, 13.833333333333334], [1.66057878E12, 10.916666666666666], [1.66057908E12, 11.833333333333334], [1.66057866E12, 13.716666666666667], [1.66057896E12, 10.933333333333334], [1.66057806E12, 9.45], [1.66057836E12, 16.4], [1.66057794E12, 10.733333333333333], [1.66057824E12, 16.133333333333333], [1.66057764E12, 15.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66057914E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

