/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 13579.0, "minX": 0.0, "maxY": 53519.0, "series": [{"data": [[0.0, 13579.0], [0.1, 19276.0], [0.2, 19524.0], [0.3, 19664.0], [0.4, 19743.0], [0.5, 19797.0], [0.6, 19855.0], [0.7, 19900.0], [0.8, 19933.0], [0.9, 19962.0], [1.0, 19989.0], [1.1, 20019.0], [1.2, 20046.0], [1.3, 20074.0], [1.4, 20097.0], [1.5, 20118.0], [1.6, 20138.0], [1.7, 20158.0], [1.8, 20175.0], [1.9, 20191.0], [2.0, 20209.0], [2.1, 20226.0], [2.2, 20243.0], [2.3, 20259.0], [2.4, 20272.0], [2.5, 20284.0], [2.6, 20298.0], [2.7, 20313.0], [2.8, 20327.0], [2.9, 20340.0], [3.0, 20357.0], [3.1, 20372.0], [3.2, 20385.0], [3.3, 20398.0], [3.4, 20410.0], [3.5, 20422.0], [3.6, 20435.0], [3.7, 20445.0], [3.8, 20457.0], [3.9, 20470.0], [4.0, 20481.0], [4.1, 20491.0], [4.2, 20506.0], [4.3, 20520.0], [4.4, 20532.0], [4.5, 20544.0], [4.6, 20556.0], [4.7, 20565.0], [4.8, 20575.0], [4.9, 20586.0], [5.0, 20597.0], [5.1, 20607.0], [5.2, 20620.0], [5.3, 20631.0], [5.4, 20641.0], [5.5, 20651.0], [5.6, 20662.0], [5.7, 20672.0], [5.8, 20681.0], [5.9, 20690.0], [6.0, 20700.0], [6.1, 20709.0], [6.2, 20719.0], [6.3, 20730.0], [6.4, 20740.0], [6.5, 20750.0], [6.6, 20759.0], [6.7, 20767.0], [6.8, 20777.0], [6.9, 20786.0], [7.0, 20794.0], [7.1, 20804.0], [7.2, 20814.0], [7.3, 20825.0], [7.4, 20835.0], [7.5, 20845.0], [7.6, 20855.0], [7.7, 20866.0], [7.8, 20877.0], [7.9, 20886.0], [8.0, 20898.0], [8.1, 20907.0], [8.2, 20919.0], [8.3, 20931.0], [8.4, 20943.0], [8.5, 20953.0], [8.6, 20962.0], [8.7, 20972.0], [8.8, 20983.0], [8.9, 20994.0], [9.0, 21005.0], [9.1, 21016.0], [9.2, 21025.0], [9.3, 21033.0], [9.4, 21044.0], [9.5, 21055.0], [9.6, 21066.0], [9.7, 21076.0], [9.8, 21085.0], [9.9, 21095.0], [10.0, 21106.0], [10.1, 21116.0], [10.2, 21127.0], [10.3, 21136.0], [10.4, 21146.0], [10.5, 21157.0], [10.6, 21166.0], [10.7, 21178.0], [10.8, 21189.0], [10.9, 21198.0], [11.0, 21208.0], [11.1, 21218.0], [11.2, 21230.0], [11.3, 21241.0], [11.4, 21249.0], [11.5, 21259.0], [11.6, 21269.0], [11.7, 21278.0], [11.8, 21288.0], [11.9, 21297.0], [12.0, 21307.0], [12.1, 21317.0], [12.2, 21329.0], [12.3, 21337.0], [12.4, 21346.0], [12.5, 21355.0], [12.6, 21364.0], [12.7, 21375.0], [12.8, 21383.0], [12.9, 21390.0], [13.0, 21398.0], [13.1, 21408.0], [13.2, 21415.0], [13.3, 21424.0], [13.4, 21433.0], [13.5, 21441.0], [13.6, 21448.0], [13.7, 21457.0], [13.8, 21464.0], [13.9, 21472.0], [14.0, 21481.0], [14.1, 21489.0], [14.2, 21497.0], [14.3, 21506.0], [14.4, 21516.0], [14.5, 21524.0], [14.6, 21531.0], [14.7, 21538.0], [14.8, 21546.0], [14.9, 21554.0], [15.0, 21559.0], [15.1, 21568.0], [15.2, 21577.0], [15.3, 21586.0], [15.4, 21595.0], [15.5, 21603.0], [15.6, 21611.0], [15.7, 21618.0], [15.8, 21626.0], [15.9, 21634.0], [16.0, 21640.0], [16.1, 21647.0], [16.2, 21655.0], [16.3, 21663.0], [16.4, 21670.0], [16.5, 21678.0], [16.6, 21686.0], [16.7, 21693.0], [16.8, 21700.0], [16.9, 21708.0], [17.0, 21715.0], [17.1, 21722.0], [17.2, 21729.0], [17.3, 21736.0], [17.4, 21743.0], [17.5, 21750.0], [17.6, 21757.0], [17.7, 21765.0], [17.8, 21772.0], [17.9, 21778.0], [18.0, 21785.0], [18.1, 21792.0], [18.2, 21798.0], [18.3, 21805.0], [18.4, 21813.0], [18.5, 21820.0], [18.6, 21826.0], [18.7, 21832.0], [18.8, 21839.0], [18.9, 21845.0], [19.0, 21851.0], [19.1, 21857.0], [19.2, 21863.0], [19.3, 21869.0], [19.4, 21874.0], [19.5, 21880.0], [19.6, 21886.0], [19.7, 21892.0], [19.8, 21898.0], [19.9, 21904.0], [20.0, 21911.0], [20.1, 21917.0], [20.2, 21924.0], [20.3, 21930.0], [20.4, 21936.0], [20.5, 21941.0], [20.6, 21947.0], [20.7, 21953.0], [20.8, 21958.0], [20.9, 21965.0], [21.0, 21970.0], [21.1, 21976.0], [21.2, 21982.0], [21.3, 21988.0], [21.4, 21994.0], [21.5, 21999.0], [21.6, 22004.0], [21.7, 22010.0], [21.8, 22015.0], [21.9, 22020.0], [22.0, 22027.0], [22.1, 22032.0], [22.2, 22037.0], [22.3, 22043.0], [22.4, 22049.0], [22.5, 22053.0], [22.6, 22058.0], [22.7, 22063.0], [22.8, 22067.0], [22.9, 22072.0], [23.0, 22076.0], [23.1, 22082.0], [23.2, 22087.0], [23.3, 22092.0], [23.4, 22097.0], [23.5, 22102.0], [23.6, 22106.0], [23.7, 22112.0], [23.8, 22116.0], [23.9, 22122.0], [24.0, 22127.0], [24.1, 22131.0], [24.2, 22137.0], [24.3, 22141.0], [24.4, 22146.0], [24.5, 22151.0], [24.6, 22157.0], [24.7, 22162.0], [24.8, 22166.0], [24.9, 22171.0], [25.0, 22175.0], [25.1, 22180.0], [25.2, 22185.0], [25.3, 22190.0], [25.4, 22195.0], [25.5, 22199.0], [25.6, 22204.0], [25.7, 22209.0], [25.8, 22214.0], [25.9, 22218.0], [26.0, 22222.0], [26.1, 22226.0], [26.2, 22231.0], [26.3, 22236.0], [26.4, 22241.0], [26.5, 22246.0], [26.6, 22251.0], [26.7, 22256.0], [26.8, 22261.0], [26.9, 22265.0], [27.0, 22270.0], [27.1, 22275.0], [27.2, 22280.0], [27.3, 22285.0], [27.4, 22289.0], [27.5, 22294.0], [27.6, 22299.0], [27.7, 22304.0], [27.8, 22308.0], [27.9, 22312.0], [28.0, 22317.0], [28.1, 22321.0], [28.2, 22326.0], [28.3, 22330.0], [28.4, 22335.0], [28.5, 22340.0], [28.6, 22345.0], [28.7, 22349.0], [28.8, 22353.0], [28.9, 22358.0], [29.0, 22363.0], [29.1, 22367.0], [29.2, 22372.0], [29.3, 22376.0], [29.4, 22381.0], [29.5, 22386.0], [29.6, 22390.0], [29.7, 22395.0], [29.8, 22399.0], [29.9, 22403.0], [30.0, 22408.0], [30.1, 22412.0], [30.2, 22416.0], [30.3, 22420.0], [30.4, 22425.0], [30.5, 22429.0], [30.6, 22433.0], [30.7, 22438.0], [30.8, 22443.0], [30.9, 22447.0], [31.0, 22452.0], [31.1, 22456.0], [31.2, 22461.0], [31.3, 22466.0], [31.4, 22469.0], [31.5, 22474.0], [31.6, 22479.0], [31.7, 22484.0], [31.8, 22488.0], [31.9, 22494.0], [32.0, 22498.0], [32.1, 22502.0], [32.2, 22506.0], [32.3, 22511.0], [32.4, 22515.0], [32.5, 22518.0], [32.6, 22522.0], [32.7, 22525.0], [32.8, 22531.0], [32.9, 22535.0], [33.0, 22539.0], [33.1, 22543.0], [33.2, 22548.0], [33.3, 22553.0], [33.4, 22557.0], [33.5, 22561.0], [33.6, 22566.0], [33.7, 22570.0], [33.8, 22574.0], [33.9, 22578.0], [34.0, 22582.0], [34.1, 22587.0], [34.2, 22591.0], [34.3, 22595.0], [34.4, 22599.0], [34.5, 22603.0], [34.6, 22608.0], [34.7, 22613.0], [34.8, 22618.0], [34.9, 22622.0], [35.0, 22627.0], [35.1, 22631.0], [35.2, 22637.0], [35.3, 22641.0], [35.4, 22646.0], [35.5, 22650.0], [35.6, 22655.0], [35.7, 22659.0], [35.8, 22663.0], [35.9, 22667.0], [36.0, 22671.0], [36.1, 22675.0], [36.2, 22679.0], [36.3, 22683.0], [36.4, 22687.0], [36.5, 22693.0], [36.6, 22697.0], [36.7, 22702.0], [36.8, 22707.0], [36.9, 22712.0], [37.0, 22717.0], [37.1, 22721.0], [37.2, 22726.0], [37.3, 22732.0], [37.4, 22736.0], [37.5, 22741.0], [37.6, 22746.0], [37.7, 22750.0], [37.8, 22754.0], [37.9, 22759.0], [38.0, 22764.0], [38.1, 22769.0], [38.2, 22773.0], [38.3, 22777.0], [38.4, 22782.0], [38.5, 22787.0], [38.6, 22791.0], [38.7, 22796.0], [38.8, 22801.0], [38.9, 22805.0], [39.0, 22809.0], [39.1, 22814.0], [39.2, 22818.0], [39.3, 22822.0], [39.4, 22827.0], [39.5, 22832.0], [39.6, 22836.0], [39.7, 22841.0], [39.8, 22846.0], [39.9, 22851.0], [40.0, 22856.0], [40.1, 22860.0], [40.2, 22865.0], [40.3, 22870.0], [40.4, 22875.0], [40.5, 22880.0], [40.6, 22885.0], [40.7, 22890.0], [40.8, 22896.0], [40.9, 22901.0], [41.0, 22906.0], [41.1, 22910.0], [41.2, 22915.0], [41.3, 22920.0], [41.4, 22924.0], [41.5, 22929.0], [41.6, 22934.0], [41.7, 22938.0], [41.8, 22944.0], [41.9, 22949.0], [42.0, 22955.0], [42.1, 22960.0], [42.2, 22965.0], [42.3, 22969.0], [42.4, 22974.0], [42.5, 22980.0], [42.6, 22985.0], [42.7, 22990.0], [42.8, 22995.0], [42.9, 23001.0], [43.0, 23006.0], [43.1, 23011.0], [43.2, 23016.0], [43.3, 23021.0], [43.4, 23026.0], [43.5, 23031.0], [43.6, 23036.0], [43.7, 23041.0], [43.8, 23046.0], [43.9, 23052.0], [44.0, 23058.0], [44.1, 23063.0], [44.2, 23069.0], [44.3, 23074.0], [44.4, 23079.0], [44.5, 23084.0], [44.6, 23090.0], [44.7, 23094.0], [44.8, 23100.0], [44.9, 23105.0], [45.0, 23109.0], [45.1, 23115.0], [45.2, 23120.0], [45.3, 23125.0], [45.4, 23130.0], [45.5, 23136.0], [45.6, 23142.0], [45.7, 23148.0], [45.8, 23153.0], [45.9, 23158.0], [46.0, 23164.0], [46.1, 23169.0], [46.2, 23174.0], [46.3, 23180.0], [46.4, 23185.0], [46.5, 23191.0], [46.6, 23196.0], [46.7, 23201.0], [46.8, 23207.0], [46.9, 23212.0], [47.0, 23217.0], [47.1, 23223.0], [47.2, 23229.0], [47.3, 23235.0], [47.4, 23240.0], [47.5, 23245.0], [47.6, 23250.0], [47.7, 23255.0], [47.8, 23261.0], [47.9, 23265.0], [48.0, 23271.0], [48.1, 23277.0], [48.2, 23283.0], [48.3, 23287.0], [48.4, 23293.0], [48.5, 23299.0], [48.6, 23304.0], [48.7, 23311.0], [48.8, 23317.0], [48.9, 23322.0], [49.0, 23328.0], [49.1, 23335.0], [49.2, 23341.0], [49.3, 23348.0], [49.4, 23354.0], [49.5, 23360.0], [49.6, 23367.0], [49.7, 23372.0], [49.8, 23379.0], [49.9, 23384.0], [50.0, 23391.0], [50.1, 23397.0], [50.2, 23403.0], [50.3, 23410.0], [50.4, 23416.0], [50.5, 23423.0], [50.6, 23429.0], [50.7, 23436.0], [50.8, 23443.0], [50.9, 23449.0], [51.0, 23455.0], [51.1, 23463.0], [51.2, 23469.0], [51.3, 23476.0], [51.4, 23484.0], [51.5, 23491.0], [51.6, 23497.0], [51.7, 23504.0], [51.8, 23513.0], [51.9, 23519.0], [52.0, 23527.0], [52.1, 23534.0], [52.2, 23541.0], [52.3, 23549.0], [52.4, 23555.0], [52.5, 23562.0], [52.6, 23569.0], [52.7, 23578.0], [52.8, 23587.0], [52.9, 23595.0], [53.0, 23603.0], [53.1, 23612.0], [53.2, 23619.0], [53.3, 23627.0], [53.4, 23634.0], [53.5, 23642.0], [53.6, 23648.0], [53.7, 23657.0], [53.8, 23665.0], [53.9, 23672.0], [54.0, 23680.0], [54.1, 23689.0], [54.2, 23697.0], [54.3, 23704.0], [54.4, 23714.0], [54.5, 23722.0], [54.6, 23732.0], [54.7, 23741.0], [54.8, 23749.0], [54.9, 23758.0], [55.0, 23768.0], [55.1, 23776.0], [55.2, 23785.0], [55.3, 23792.0], [55.4, 23799.0], [55.5, 23811.0], [55.6, 23820.0], [55.7, 23829.0], [55.8, 23839.0], [55.9, 23849.0], [56.0, 23859.0], [56.1, 23868.0], [56.2, 23878.0], [56.3, 23890.0], [56.4, 23900.0], [56.5, 23911.0], [56.6, 23920.0], [56.7, 23928.0], [56.8, 23939.0], [56.9, 23952.0], [57.0, 23962.0], [57.1, 23971.0], [57.2, 23982.0], [57.3, 23993.0], [57.4, 24004.0], [57.5, 24016.0], [57.6, 24028.0], [57.7, 24039.0], [57.8, 24051.0], [57.9, 24061.0], [58.0, 24072.0], [58.1, 24083.0], [58.2, 24094.0], [58.3, 24104.0], [58.4, 24117.0], [58.5, 24128.0], [58.6, 24139.0], [58.7, 24152.0], [58.8, 24164.0], [58.9, 24177.0], [59.0, 24189.0], [59.1, 24199.0], [59.2, 24211.0], [59.3, 24222.0], [59.4, 24232.0], [59.5, 24244.0], [59.6, 24255.0], [59.7, 24266.0], [59.8, 24278.0], [59.9, 24288.0], [60.0, 24300.0], [60.1, 24310.0], [60.2, 24321.0], [60.3, 24334.0], [60.4, 24347.0], [60.5, 24357.0], [60.6, 24371.0], [60.7, 24384.0], [60.8, 24394.0], [60.9, 24405.0], [61.0, 24417.0], [61.1, 24429.0], [61.2, 24439.0], [61.3, 24450.0], [61.4, 24461.0], [61.5, 24474.0], [61.6, 24484.0], [61.7, 24497.0], [61.8, 24510.0], [61.9, 24521.0], [62.0, 24534.0], [62.1, 24549.0], [62.2, 24562.0], [62.3, 24574.0], [62.4, 24587.0], [62.5, 24600.0], [62.6, 24613.0], [62.7, 24626.0], [62.8, 24640.0], [62.9, 24654.0], [63.0, 24666.0], [63.1, 24678.0], [63.2, 24693.0], [63.3, 24705.0], [63.4, 24720.0], [63.5, 24732.0], [63.6, 24747.0], [63.7, 24758.0], [63.8, 24771.0], [63.9, 24789.0], [64.0, 24803.0], [64.1, 24818.0], [64.2, 24832.0], [64.3, 24846.0], [64.4, 24863.0], [64.5, 24877.0], [64.6, 24893.0], [64.7, 24912.0], [64.8, 24928.0], [64.9, 24944.0], [65.0, 24960.0], [65.1, 24974.0], [65.2, 24992.0], [65.3, 25007.0], [65.4, 25024.0], [65.5, 25043.0], [65.6, 25060.0], [65.7, 25078.0], [65.8, 25095.0], [65.9, 25115.0], [66.0, 25134.0], [66.1, 25155.0], [66.2, 25171.0], [66.3, 25191.0], [66.4, 25212.0], [66.5, 25234.0], [66.6, 25257.0], [66.7, 25278.0], [66.8, 25305.0], [66.9, 25335.0], [67.0, 25362.0], [67.1, 25393.0], [67.2, 25425.0], [67.3, 25460.0], [67.4, 25491.0], [67.5, 25521.0], [67.6, 25558.0], [67.7, 25597.0], [67.8, 25635.0], [67.9, 25675.0], [68.0, 25721.0], [68.1, 25766.0], [68.2, 25813.0], [68.3, 25860.0], [68.4, 25924.0], [68.5, 25981.0], [68.6, 26032.0], [68.7, 26097.0], [68.8, 26159.0], [68.9, 26219.0], [69.0, 26267.0], [69.1, 26330.0], [69.2, 26382.0], [69.3, 26437.0], [69.4, 26493.0], [69.5, 26549.0], [69.6, 26610.0], [69.7, 26655.0], [69.8, 26710.0], [69.9, 26778.0], [70.0, 26828.0], [70.1, 26899.0], [70.2, 26953.0], [70.3, 27018.0], [70.4, 27089.0], [70.5, 27144.0], [70.6, 27215.0], [70.7, 27295.0], [70.8, 27382.0], [70.9, 27466.0], [71.0, 27586.0], [71.1, 27731.0], [71.2, 27853.0], [71.3, 27981.0], [71.4, 28111.0], [71.5, 28264.0], [71.6, 28427.0], [71.7, 28568.0], [71.8, 28723.0], [71.9, 28891.0], [72.0, 29043.0], [72.1, 29184.0], [72.2, 29345.0], [72.3, 29529.0], [72.4, 29695.0], [72.5, 29884.0], [72.6, 30039.0], [72.7, 30205.0], [72.8, 30374.0], [72.9, 30553.0], [73.0, 30722.0], [73.1, 30881.0], [73.2, 31066.0], [73.3, 31224.0], [73.4, 31388.0], [73.5, 31548.0], [73.6, 31692.0], [73.7, 31868.0], [73.8, 32019.0], [73.9, 32146.0], [74.0, 32271.0], [74.1, 32408.0], [74.2, 32533.0], [74.3, 32706.0], [74.4, 32872.0], [74.5, 33047.0], [74.6, 33224.0], [74.7, 33380.0], [74.8, 33528.0], [74.9, 33690.0], [75.0, 33849.0], [75.1, 34016.0], [75.2, 34214.0], [75.3, 34388.0], [75.4, 34576.0], [75.5, 34754.0], [75.6, 34945.0], [75.7, 35142.0], [75.8, 35314.0], [75.9, 35532.0], [76.0, 35676.0], [76.1, 35834.0], [76.2, 35994.0], [76.3, 36141.0], [76.4, 36309.0], [76.5, 36446.0], [76.6, 36561.0], [76.7, 36682.0], [76.8, 36795.0], [76.9, 36926.0], [77.0, 37032.0], [77.1, 37166.0], [77.2, 37303.0], [77.3, 37446.0], [77.4, 37594.0], [77.5, 37764.0], [77.6, 37928.0], [77.7, 38091.0], [77.8, 38292.0], [77.9, 38492.0], [78.0, 38724.0], [78.1, 38948.0], [78.2, 39132.0], [78.3, 39291.0], [78.4, 39464.0], [78.5, 39614.0], [78.6, 39783.0], [78.7, 39920.0], [78.8, 40047.0], [78.9, 40173.0], [79.0, 40314.0], [79.1, 40437.0], [79.2, 40559.0], [79.3, 40678.0], [79.4, 40801.0], [79.5, 40901.0], [79.6, 41006.0], [79.7, 41113.0], [79.8, 41204.0], [79.9, 41288.0], [80.0, 41388.0], [80.1, 41486.0], [80.2, 41579.0], [80.3, 41685.0], [80.4, 41797.0], [80.5, 41940.0], [80.6, 42065.0], [80.7, 42175.0], [80.8, 42302.0], [80.9, 42452.0], [81.0, 42594.0], [81.1, 42739.0], [81.2, 42916.0], [81.3, 43085.0], [81.4, 43233.0], [81.5, 43360.0], [81.6, 43467.0], [81.7, 43561.0], [81.8, 43646.0], [81.9, 43722.0], [82.0, 43786.0], [82.1, 43883.0], [82.2, 43964.0], [82.3, 44038.0], [82.4, 44102.0], [82.5, 44186.0], [82.6, 44286.0], [82.7, 44394.0], [82.8, 44479.0], [82.9, 44558.0], [83.0, 44648.0], [83.1, 44729.0], [83.2, 44802.0], [83.3, 44870.0], [83.4, 44948.0], [83.5, 45018.0], [83.6, 45098.0], [83.7, 45165.0], [83.8, 45233.0], [83.9, 45306.0], [84.0, 45376.0], [84.1, 45438.0], [84.2, 45494.0], [84.3, 45560.0], [84.4, 45617.0], [84.5, 45689.0], [84.6, 45748.0], [84.7, 45815.0], [84.8, 45874.0], [84.9, 45937.0], [85.0, 46003.0], [85.1, 46064.0], [85.2, 46118.0], [85.3, 46159.0], [85.4, 46215.0], [85.5, 46271.0], [85.6, 46341.0], [85.7, 46399.0], [85.8, 46463.0], [85.9, 46527.0], [86.0, 46584.0], [86.1, 46657.0], [86.2, 46726.0], [86.3, 46790.0], [86.4, 46849.0], [86.5, 46904.0], [86.6, 46953.0], [86.7, 47000.0], [86.8, 47054.0], [86.9, 47106.0], [87.0, 47148.0], [87.1, 47199.0], [87.2, 47233.0], [87.3, 47271.0], [87.4, 47311.0], [87.5, 47347.0], [87.6, 47381.0], [87.7, 47416.0], [87.8, 47442.0], [87.9, 47471.0], [88.0, 47499.0], [88.1, 47530.0], [88.2, 47557.0], [88.3, 47585.0], [88.4, 47611.0], [88.5, 47636.0], [88.6, 47661.0], [88.7, 47685.0], [88.8, 47709.0], [88.9, 47730.0], [89.0, 47752.0], [89.1, 47775.0], [89.2, 47797.0], [89.3, 47821.0], [89.4, 47846.0], [89.5, 47867.0], [89.6, 47888.0], [89.7, 47911.0], [89.8, 47932.0], [89.9, 47954.0], [90.0, 47977.0], [90.1, 47997.0], [90.2, 48017.0], [90.3, 48038.0], [90.4, 48062.0], [90.5, 48085.0], [90.6, 48105.0], [90.7, 48135.0], [90.8, 48159.0], [90.9, 48183.0], [91.0, 48209.0], [91.1, 48230.0], [91.2, 48250.0], [91.3, 48276.0], [91.4, 48299.0], [91.5, 48323.0], [91.6, 48345.0], [91.7, 48365.0], [91.8, 48391.0], [91.9, 48412.0], [92.0, 48440.0], [92.1, 48464.0], [92.2, 48492.0], [92.3, 48521.0], [92.4, 48550.0], [92.5, 48576.0], [92.6, 48607.0], [92.7, 48634.0], [92.8, 48659.0], [92.9, 48688.0], [93.0, 48717.0], [93.1, 48745.0], [93.2, 48768.0], [93.3, 48798.0], [93.4, 48830.0], [93.5, 48862.0], [93.6, 48898.0], [93.7, 48933.0], [93.8, 48966.0], [93.9, 49001.0], [94.0, 49038.0], [94.1, 49080.0], [94.2, 49118.0], [94.3, 49156.0], [94.4, 49187.0], [94.5, 49229.0], [94.6, 49263.0], [94.7, 49301.0], [94.8, 49343.0], [94.9, 49381.0], [95.0, 49415.0], [95.1, 49451.0], [95.2, 49491.0], [95.3, 49525.0], [95.4, 49568.0], [95.5, 49604.0], [95.6, 49640.0], [95.7, 49680.0], [95.8, 49723.0], [95.9, 49769.0], [96.0, 49811.0], [96.1, 49853.0], [96.2, 49903.0], [96.3, 49958.0], [96.4, 50004.0], [96.5, 50047.0], [96.6, 50096.0], [96.7, 50137.0], [96.8, 50187.0], [96.9, 50227.0], [97.0, 50272.0], [97.1, 50327.0], [97.2, 50377.0], [97.3, 50425.0], [97.4, 50472.0], [97.5, 50537.0], [97.6, 50595.0], [97.7, 50665.0], [97.8, 50735.0], [97.9, 50813.0], [98.0, 50900.0], [98.1, 50975.0], [98.2, 51062.0], [98.3, 51147.0], [98.4, 51214.0], [98.5, 51305.0], [98.6, 51400.0], [98.7, 51504.0], [98.8, 51594.0], [98.9, 51693.0], [99.0, 51787.0], [99.1, 51888.0], [99.2, 52001.0], [99.3, 52093.0], [99.4, 52199.0], [99.5, 52270.0], [99.6, 52372.0], [99.7, 52490.0], [99.8, 52623.0], [99.9, 52798.0], [100.0, 53519.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 13500.0, "maxY": 2374.0, "series": [{"data": [[32900.0, 48.0], [33300.0, 71.0], [34100.0, 49.0], [33700.0, 66.0], [34500.0, 50.0], [36500.0, 84.0], [35300.0, 54.0], [36100.0, 62.0], [35700.0, 63.0], [34900.0, 49.0], [38500.0, 40.0], [36900.0, 97.0], [37700.0, 53.0], [37300.0, 63.0], [38100.0, 53.0], [38900.0, 52.0], [39300.0, 57.0], [39700.0, 75.0], [40500.0, 87.0], [40900.0, 93.0], [40100.0, 69.0], [42100.0, 87.0], [42500.0, 60.0], [41700.0, 101.0], [42900.0, 70.0], [41300.0, 99.0], [43700.0, 138.0], [44100.0, 125.0], [44900.0, 132.0], [44500.0, 124.0], [43300.0, 88.0], [46900.0, 205.0], [46500.0, 169.0], [46100.0, 199.0], [45300.0, 147.0], [45700.0, 150.0], [48500.0, 343.0], [48100.0, 390.0], [48900.0, 288.0], [47700.0, 441.0], [47300.0, 281.0], [50900.0, 129.0], [50500.0, 157.0], [50100.0, 219.0], [49300.0, 256.0], [49700.0, 231.0], [51300.0, 105.0], [52100.0, 92.0], [51700.0, 110.0], [52500.0, 76.0], [52900.0, 30.0], [53300.0, 3.0], [13500.0, 1.0], [14300.0, 3.0], [13900.0, 3.0], [14000.0, 1.0], [14700.0, 1.0], [15300.0, 1.0], [15100.0, 1.0], [15200.0, 1.0], [15700.0, 1.0], [15800.0, 1.0], [16200.0, 2.0], [16300.0, 1.0], [16000.0, 1.0], [17000.0, 3.0], [16600.0, 1.0], [16800.0, 1.0], [18400.0, 3.0], [18200.0, 7.0], [17600.0, 2.0], [18000.0, 1.0], [19200.0, 17.0], [19400.0, 45.0], [19000.0, 10.0], [18600.0, 3.0], [18800.0, 3.0], [19600.0, 97.0], [20400.0, 842.0], [20000.0, 373.0], [19800.0, 198.0], [20200.0, 665.0], [20600.0, 970.0], [20800.0, 965.0], [21000.0, 975.0], [21200.0, 1011.0], [21400.0, 1218.0], [21600.0, 1347.0], [21800.0, 1609.0], [22000.0, 1954.0], [22200.0, 2102.0], [22400.0, 2232.0], [22600.0, 2245.0], [22800.0, 2092.0], [23000.0, 1921.0], [23200.0, 1842.0], [23400.0, 1486.0], [23800.0, 995.0], [23600.0, 1268.0], [24000.0, 899.0], [24200.0, 894.0], [24400.0, 865.0], [24800.0, 659.0], [24600.0, 759.0], [25000.0, 574.0], [25200.0, 441.0], [25400.0, 297.0], [25600.0, 260.0], [25800.0, 184.0], [26000.0, 176.0], [26600.0, 211.0], [26200.0, 177.0], [26400.0, 180.0], [27000.0, 143.0], [26800.0, 170.0], [27400.0, 115.0], [27600.0, 68.0], [27200.0, 124.0], [27800.0, 81.0], [28200.0, 56.0], [28400.0, 70.0], [28000.0, 78.0], [28600.0, 59.0], [28800.0, 58.0], [29000.0, 66.0], [29200.0, 60.0], [29600.0, 60.0], [29400.0, 56.0], [29800.0, 61.0], [30200.0, 54.0], [30000.0, 54.0], [30600.0, 61.0], [30400.0, 57.0], [30800.0, 60.0], [31400.0, 63.0], [31000.0, 54.0], [31200.0, 61.0], [31600.0, 77.0], [31800.0, 66.0], [32200.0, 78.0], [32400.0, 84.0], [32000.0, 73.0], [32600.0, 58.0], [34400.0, 53.0], [32800.0, 55.0], [33600.0, 67.0], [33200.0, 62.0], [34800.0, 53.0], [34000.0, 49.0], [36800.0, 78.0], [36400.0, 68.0], [36000.0, 62.0], [35600.0, 54.0], [35200.0, 53.0], [37200.0, 68.0], [38000.0, 45.0], [37600.0, 64.0], [38400.0, 54.0], [38800.0, 48.0], [39200.0, 63.0], [39600.0, 54.0], [40000.0, 87.0], [40400.0, 69.0], [40800.0, 100.0], [41200.0, 115.0], [42000.0, 82.0], [41600.0, 87.0], [42400.0, 79.0], [42800.0, 53.0], [43200.0, 75.0], [43600.0, 123.0], [44000.0, 145.0], [44400.0, 114.0], [44800.0, 132.0], [46800.0, 183.0], [46000.0, 178.0], [46400.0, 153.0], [45600.0, 153.0], [45200.0, 144.0], [48400.0, 397.0], [48000.0, 465.0], [48800.0, 301.0], [47600.0, 411.0], [47200.0, 267.0], [50800.0, 115.0], [50000.0, 222.0], [50400.0, 192.0], [49200.0, 269.0], [49600.0, 253.0], [51600.0, 98.0], [51200.0, 123.0], [52000.0, 109.0], [52400.0, 88.0], [52800.0, 29.0], [53200.0, 5.0], [33100.0, 57.0], [33500.0, 60.0], [33900.0, 57.0], [34300.0, 65.0], [34700.0, 70.0], [35100.0, 56.0], [36700.0, 88.0], [36300.0, 81.0], [35900.0, 65.0], [35500.0, 75.0], [38300.0, 45.0], [37900.0, 73.0], [38700.0, 45.0], [37100.0, 68.0], [37500.0, 64.0], [39100.0, 52.0], [39500.0, 64.0], [39900.0, 83.0], [40300.0, 87.0], [40700.0, 80.0], [41100.0, 109.0], [41500.0, 102.0], [41900.0, 81.0], [42300.0, 68.0], [42700.0, 68.0], [43100.0, 64.0], [43500.0, 111.0], [44300.0, 89.0], [44700.0, 144.0], [43900.0, 128.0], [46700.0, 154.0], [45500.0, 160.0], [47100.0, 213.0], [46300.0, 167.0], [45900.0, 151.0], [45100.0, 146.0], [48700.0, 368.0], [48300.0, 432.0], [47900.0, 463.0], [49100.0, 275.0], [47500.0, 358.0], [51100.0, 136.0], [50700.0, 123.0], [50300.0, 206.0], [49900.0, 194.0], [49500.0, 268.0], [51500.0, 108.0], [51900.0, 89.0], [52300.0, 87.0], [52700.0, 46.0], [53100.0, 9.0], [53500.0, 2.0], [17300.0, 2.0], [16900.0, 1.0], [16700.0, 1.0], [17900.0, 2.0], [18300.0, 2.0], [18100.0, 3.0], [19100.0, 13.0], [19300.0, 32.0], [18700.0, 5.0], [18900.0, 6.0], [18500.0, 2.0], [20100.0, 534.0], [19700.0, 168.0], [20300.0, 695.0], [19900.0, 341.0], [19500.0, 53.0], [21300.0, 1085.0], [20700.0, 1057.0], [20900.0, 936.0], [21100.0, 984.0], [21500.0, 1221.0], [20500.0, 879.0], [22300.0, 2195.0], [21700.0, 1416.0], [21900.0, 1687.0], [22100.0, 2041.0], [22500.0, 2374.0], [23300.0, 1643.0], [22700.0, 2130.0], [22900.0, 2002.0], [23100.0, 1867.0], [23500.0, 1317.0], [23700.0, 1181.0], [23900.0, 959.0], [24100.0, 846.0], [24300.0, 865.0], [24500.0, 774.0], [24700.0, 718.0], [24900.0, 617.0], [25100.0, 515.0], [25300.0, 340.0], [25500.0, 286.0], [25900.0, 167.0], [25700.0, 213.0], [26100.0, 164.0], [26300.0, 183.0], [26500.0, 169.0], [26900.0, 176.0], [27300.0, 114.0], [26700.0, 144.0], [27500.0, 79.0], [27100.0, 157.0], [27700.0, 73.0], [28300.0, 65.0], [27900.0, 81.0], [28100.0, 70.0], [28500.0, 74.0], [28900.0, 68.0], [28700.0, 66.0], [29100.0, 67.0], [29300.0, 64.0], [29500.0, 52.0], [29900.0, 64.0], [30100.0, 65.0], [29700.0, 51.0], [30500.0, 55.0], [30300.0, 62.0], [30700.0, 68.0], [30900.0, 56.0], [31300.0, 66.0], [31100.0, 60.0], [31700.0, 49.0], [31500.0, 54.0], [31900.0, 65.0], [32700.0, 67.0], [32100.0, 84.0], [32500.0, 60.0], [32300.0, 75.0], [33000.0, 62.0], [33800.0, 60.0], [33400.0, 63.0], [34200.0, 53.0], [34600.0, 48.0], [36600.0, 86.0], [36200.0, 67.0], [35400.0, 38.0], [35800.0, 66.0], [35000.0, 48.0], [37800.0, 62.0], [38200.0, 49.0], [37400.0, 82.0], [37000.0, 83.0], [38600.0, 43.0], [39000.0, 61.0], [39400.0, 59.0], [40200.0, 73.0], [39800.0, 62.0], [40600.0, 86.0], [41400.0, 110.0], [41800.0, 65.0], [42200.0, 75.0], [42600.0, 65.0], [43000.0, 52.0], [41000.0, 93.0], [43400.0, 98.0], [43800.0, 109.0], [44600.0, 107.0], [45000.0, 139.0], [44200.0, 104.0], [47000.0, 194.0], [46600.0, 132.0], [46200.0, 166.0], [45800.0, 169.0], [45400.0, 170.0], [47800.0, 436.0], [48600.0, 360.0], [48200.0, 440.0], [49000.0, 260.0], [47400.0, 348.0], [51000.0, 108.0], [50600.0, 156.0], [50200.0, 220.0], [49800.0, 220.0], [49400.0, 268.0], [51400.0, 101.0], [51800.0, 95.0], [52200.0, 132.0], [52600.0, 71.0], [53000.0, 21.0], [53400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 53500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 100000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 100000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 100000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 250.51199999999986, "minX": 1.66057938E12, "maxY": 500.0, "series": [{"data": [[1.66058046E12, 500.0], [1.66057944E12, 500.0], [1.66058268E12, 500.0], [1.66058388E12, 500.0], [1.66058166E12, 500.0], [1.6605849E12, 500.0], [1.66058064E12, 500.0], [1.66058286E12, 500.0], [1.66057962E12, 500.0], [1.66058184E12, 500.0], [1.66058406E12, 500.0], [1.66058508E12, 500.0], [1.66058082E12, 500.0], [1.66058304E12, 500.0], [1.66058334E12, 500.0], [1.6605801E12, 500.0], [1.66058232E12, 500.0], [1.66058454E12, 500.0], [1.6605813E12, 500.0], [1.66058352E12, 500.0], [1.66058028E12, 500.0], [1.6605837E12, 500.0], [1.6605825E12, 500.0], [1.66058472E12, 500.0], [1.66058148E12, 500.0], [1.66058238E12, 500.0], [1.66058136E12, 500.0], [1.66058358E12, 500.0], [1.6605846E12, 500.0], [1.66058034E12, 500.0], [1.66058256E12, 500.0], [1.66058496E12, 500.0], [1.66058154E12, 500.0], [1.66058052E12, 500.0], [1.66058376E12, 500.0], [1.66058274E12, 500.0], [1.66058478E12, 500.0], [1.6605798E12, 500.0], [1.66058202E12, 500.0], [1.66058424E12, 500.0], [1.660581E12, 500.0], [1.66058322E12, 500.0], [1.66057998E12, 500.0], [1.6605822E12, 500.0], [1.66058442E12, 500.0], [1.66058118E12, 500.0], [1.6605834E12, 500.0], [1.66058016E12, 500.0], [1.66058448E12, 500.0], [1.66058106E12, 500.0], [1.66058328E12, 500.0], [1.66058004E12, 500.0], [1.66058226E12, 500.0], [1.6605843E12, 500.0], [1.66058124E12, 500.0], [1.66058466E12, 500.0], [1.66058346E12, 500.0], [1.66058022E12, 500.0], [1.66058244E12, 500.0], [1.6605795E12, 500.0], [1.66058172E12, 500.0], [1.66058514E12, 250.51199999999986], [1.66058394E12, 500.0], [1.6605807E12, 500.0], [1.66058292E12, 500.0], [1.66057968E12, 500.0], [1.6605819E12, 500.0], [1.66058088E12, 500.0], [1.6605831E12, 500.0], [1.66058412E12, 500.0], [1.66057986E12, 500.0], [1.66058208E12, 500.0], [1.66058076E12, 500.0], [1.66058418E12, 500.0], [1.66058298E12, 500.0], [1.66057974E12, 500.0], [1.66058196E12, 500.0], [1.66058094E12, 500.0], [1.66058316E12, 500.0], [1.66057992E12, 500.0], [1.66058436E12, 500.0], [1.66058214E12, 500.0], [1.66058112E12, 500.0], [1.66058142E12, 500.0], [1.66058364E12, 500.0], [1.6605804E12, 500.0], [1.66058484E12, 500.0], [1.66058262E12, 500.0], [1.66057938E12, 500.0], [1.6605816E12, 500.0], [1.660584E12, 500.0], [1.66058058E12, 500.0], [1.6605828E12, 500.0], [1.66058502E12, 500.0], [1.66057956E12, 500.0], [1.66058178E12, 500.0], [1.66058382E12, 500.0]], "isOverall": false, "label": "Thread Group Create Type", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66058514E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 13579.0, "minX": 1.0, "maxY": 28854.230821800866, "series": [{"data": [[2.0, 15204.0], [3.0, 14353.0], [4.0, 13929.0], [5.0, 13926.0], [6.0, 16207.0], [7.0, 17047.0], [8.0, 14388.0], [9.0, 13928.0], [10.0, 15879.0], [11.0, 16727.0], [12.0, 17082.0], [13.0, 17926.0], [14.0, 16001.0], [15.0, 18040.0], [16.0, 15187.0], [17.0, 14723.0], [18.0, 13579.0], [19.0, 17675.0], [20.0, 14377.0], [21.0, 16883.0], [22.0, 15736.0], [23.0, 16378.0], [24.0, 18124.0], [25.0, 18276.0], [27.0, 17003.0], [28.0, 18536.0], [29.0, 18305.0], [30.0, 19172.0], [31.0, 18727.0], [33.0, 15399.0], [32.0, 16299.0], [35.0, 16947.0], [34.0, 18717.0], [37.0, 18519.0], [36.0, 18284.0], [39.0, 18933.0], [38.0, 18296.0], [41.0, 18206.0], [40.0, 18469.0], [43.0, 19293.0], [42.0, 18194.0], [45.0, 17627.0], [44.0, 18245.0], [47.0, 19833.0], [46.0, 18601.0], [49.0, 17386.0], [48.0, 17096.0], [51.0, 18133.0], [50.0, 18462.0], [53.0, 18924.0], [52.0, 18619.0], [55.0, 20076.0], [54.0, 18805.0], [57.0, 19045.0], [56.0, 18279.0], [59.0, 19451.0], [58.0, 18980.0], [61.0, 19290.0], [60.0, 18397.0], [63.0, 18718.0], [62.0, 18288.0], [67.0, 17972.0], [66.0, 18838.0], [65.0, 19778.0], [64.0, 18425.0], [71.0, 19166.0], [70.0, 18928.0], [69.0, 19220.0], [68.0, 19903.0], [75.0, 19774.5], [73.0, 18803.0], [72.0, 18987.0], [79.0, 19768.0], [78.0, 19720.0], [77.0, 19847.0], [76.0, 20106.0], [83.0, 19898.0], [82.0, 20031.0], [81.0, 19809.0], [80.0, 19733.0], [87.0, 20037.0], [86.0, 19612.0], [85.0, 19607.5], [91.0, 20590.0], [90.0, 19920.0], [89.0, 20025.0], [88.0, 19741.0], [95.0, 19486.0], [94.0, 20087.0], [93.0, 20226.0], [92.0, 19427.0], [99.0, 19025.0], [98.0, 19780.0], [97.0, 20031.0], [96.0, 20280.0], [103.0, 20192.0], [102.0, 19938.0], [101.0, 19725.0], [100.0, 19866.0], [107.0, 20178.0], [106.0, 20152.0], [105.0, 19996.0], [104.0, 19793.0], [111.0, 20729.0], [110.0, 20245.0], [109.0, 20753.0], [108.0, 20057.0], [115.0, 20302.0], [114.0, 20148.0], [113.0, 20820.0], [112.0, 20205.0], [119.0, 20301.0], [118.0, 20291.0], [117.0, 20308.0], [116.0, 19729.0], [123.0, 20028.0], [122.0, 20946.0], [121.0, 20180.0], [120.0, 20758.0], [127.0, 20678.0], [126.0, 20234.0], [125.0, 20347.0], [124.0, 19842.0], [135.0, 20318.0], [134.0, 20852.0], [133.0, 20560.0], [132.0, 20726.0], [131.0, 20924.0], [130.0, 20107.0], [129.0, 20258.0], [128.0, 20107.0], [143.0, 20507.0], [142.0, 21218.0], [141.0, 20488.0], [140.0, 20448.0], [139.0, 20830.0], [138.0, 20645.0], [137.0, 21136.0], [136.0, 20628.0], [151.0, 20325.0], [150.0, 20799.0], [149.0, 21076.0], [148.0, 20507.0], [147.0, 20809.0], [146.0, 20769.5], [144.0, 21185.0], [159.0, 20123.0], [158.0, 20396.0], [157.0, 20858.0], [156.0, 21187.0], [155.0, 20358.0], [154.0, 20858.0], [153.0, 20108.0], [152.0, 21366.0], [167.0, 20825.0], [166.0, 21436.5], [164.0, 21169.0], [163.0, 20645.0], [162.0, 21498.0], [161.0, 21102.0], [160.0, 21297.0], [175.0, 21710.0], [174.0, 21650.0], [173.0, 20787.0], [172.0, 21693.0], [171.0, 21822.0], [170.0, 21373.0], [169.0, 21386.0], [168.0, 21083.0], [183.0, 21770.0], [182.0, 21230.0], [181.0, 21873.0], [180.0, 20345.0], [179.0, 21033.0], [178.0, 21963.0], [177.0, 21305.0], [176.0, 20943.0], [191.0, 21500.0], [190.0, 21635.0], [189.0, 21438.0], [188.0, 21786.0], [187.0, 20836.0], [186.0, 21631.0], [185.0, 20991.0], [184.0, 21444.0], [199.0, 21370.0], [198.0, 21567.0], [197.0, 21824.0], [196.0, 21839.0], [195.0, 21763.0], [194.0, 21770.0], [193.0, 21095.0], [192.0, 21539.0], [207.0, 21748.0], [206.0, 21457.0], [205.0, 22080.0], [204.0, 22203.0], [203.0, 21840.0], [202.0, 21475.0], [201.0, 21431.0], [200.0, 21519.0], [215.0, 21865.0], [214.0, 21824.0], [213.0, 21776.0], [212.0, 21179.0], [211.0, 21716.0], [210.0, 21471.0], [209.0, 21600.0], [208.0, 21495.0], [223.0, 21570.0], [222.0, 21291.0], [221.0, 21764.0], [220.0, 21278.0], [219.0, 21556.0], [218.0, 21513.0], [217.0, 21959.0], [216.0, 21764.0], [231.0, 21690.0], [230.0, 21446.0], [229.0, 21917.0], [228.0, 21445.0], [227.0, 22105.0], [226.0, 21710.0], [225.0, 21619.0], [224.0, 21788.0], [239.0, 22280.0], [238.0, 21521.0], [237.0, 21220.0], [236.0, 21878.0], [235.0, 21572.0], [234.0, 21806.0], [233.0, 21558.0], [232.0, 21952.0], [247.0, 21964.0], [246.0, 21864.0], [245.0, 21887.0], [244.0, 21939.0], [243.0, 22149.0], [242.0, 21736.0], [241.0, 21812.0], [240.0, 21385.0], [255.0, 21928.0], [254.0, 21663.0], [253.0, 22174.0], [252.0, 21878.0], [251.0, 21968.0], [250.0, 22113.0], [249.0, 21611.0], [248.0, 21684.0], [270.0, 21645.0], [271.0, 21910.0], [269.0, 21847.0], [268.0, 22127.0], [267.0, 22135.0], [266.0, 21633.0], [265.0, 21792.0], [264.0, 21344.0], [263.0, 21887.0], [257.0, 22598.0], [256.0, 21725.0], [259.0, 21794.0], [258.0, 21457.0], [262.0, 21958.0], [261.0, 22094.0], [260.0, 21423.0], [286.0, 21780.0], [287.0, 21862.0], [285.0, 22150.0], [284.0, 22214.0], [283.0, 21836.0], [282.0, 21819.0], [281.0, 22078.0], [280.0, 21911.0], [279.0, 22299.0], [273.0, 21715.0], [272.0, 21868.0], [275.0, 22313.0], [274.0, 22112.0], [278.0, 21844.0], [277.0, 21865.0], [276.0, 21811.0], [302.0, 21218.0], [303.0, 21618.0], [301.0, 22050.0], [300.0, 22602.0], [299.0, 22101.0], [298.0, 21778.0], [297.0, 21606.0], [296.0, 22471.0], [295.0, 22393.0], [289.0, 22853.0], [288.0, 22007.0], [291.0, 21737.0], [290.0, 21985.0], [294.0, 21826.0], [293.0, 22122.0], [292.0, 21584.0], [318.0, 22060.0], [319.0, 21884.0], [317.0, 22098.0], [316.0, 21615.0], [314.0, 21745.0], [313.0, 22138.0], [312.0, 21465.0], [311.0, 21747.0], [305.0, 21689.0], [304.0, 21659.0], [307.0, 22102.0], [306.0, 21904.0], [310.0, 22675.0], [309.0, 22141.0], [308.0, 22164.0], [334.0, 22044.0], [335.0, 22353.0], [333.0, 22146.0], [332.0, 22318.0], [331.0, 22571.0], [330.0, 22134.0], [329.0, 21944.0], [328.0, 22066.0], [327.0, 22134.0], [321.0, 22312.0], [320.0, 22083.0], [323.0, 21533.0], [322.0, 21592.0], [326.0, 21404.0], [325.0, 21955.0], [324.0, 22219.0], [350.0, 21923.0], [351.0, 22118.0], [349.0, 22464.0], [348.0, 22567.0], [347.0, 22063.0], [346.0, 22470.0], [345.0, 22158.0], [344.0, 22268.0], [343.0, 22245.0], [337.0, 22758.0], [336.0, 21979.0], [339.0, 22610.0], [338.0, 22832.0], [342.0, 22444.0], [341.0, 22018.0], [340.0, 22368.0], [366.0, 22498.0], [367.0, 22155.0], [365.0, 22451.0], [364.0, 22137.0], [363.0, 22307.0], [362.0, 22440.0], [361.0, 22515.0], [360.0, 22582.0], [359.0, 22711.0], [353.0, 22317.0], [352.0, 22538.0], [355.0, 22659.0], [354.0, 22188.0], [358.0, 22083.0], [357.0, 22869.0], [356.0, 22175.0], [382.0, 22480.0], [383.0, 22436.0], [381.0, 22425.0], [380.0, 22246.0], [379.0, 22378.0], [378.0, 21717.0], [377.0, 22588.0], [376.0, 22469.0], [375.0, 22309.0], [369.0, 22502.0], [368.0, 21936.0], [371.0, 22303.0], [370.0, 21933.0], [374.0, 22450.0], [373.0, 22842.0], [372.0, 22119.0], [398.0, 22558.0], [399.0, 21984.0], [397.0, 21898.0], [396.0, 22482.0], [395.0, 22602.0], [394.0, 22658.0], [393.0, 22442.0], [392.0, 22385.0], [391.0, 22501.0], [385.0, 22568.0], [384.0, 22483.0], [387.0, 22429.0], [386.0, 22475.0], [390.0, 22265.0], [389.0, 22846.0], [388.0, 22141.0], [414.0, 22529.0], [415.0, 22268.0], [413.0, 22496.0], [412.0, 22420.0], [411.0, 23499.0], [410.0, 22475.0], [409.0, 22606.0], [408.0, 22304.0], [407.0, 22238.0], [401.0, 22202.0], [400.0, 22012.0], [403.0, 22838.0], [402.0, 22796.0], [406.0, 22309.0], [405.0, 22069.0], [404.0, 22209.0], [430.0, 22833.0], [431.0, 22440.0], [429.0, 22484.0], [428.0, 23383.0], [427.0, 22418.0], [426.0, 22507.0], [425.0, 23246.0], [424.0, 22298.0], [423.0, 22399.0], [417.0, 22525.0], [416.0, 23037.0], [419.0, 22422.0], [418.0, 22261.0], [422.0, 22619.0], [421.0, 22313.0], [420.0, 22519.0], [446.0, 23145.0], [447.0, 23173.0], [445.0, 21800.0], [444.0, 23360.0], [443.0, 22596.0], [442.0, 22856.0], [441.0, 22811.0], [440.0, 23133.0], [439.0, 23165.0], [433.0, 23202.0], [432.0, 22990.0], [435.0, 23099.0], [434.0, 22534.0], [438.0, 22850.0], [437.0, 22114.0], [436.0, 22544.0], [462.0, 22158.0], [463.0, 22544.0], [461.0, 23007.0], [460.0, 22292.0], [459.0, 23001.0], [458.0, 22789.0], [457.0, 23092.0], [456.0, 23079.0], [455.0, 22652.0], [449.0, 22903.0], [448.0, 22725.0], [451.0, 22741.0], [450.0, 22790.0], [454.0, 22680.0], [453.0, 22776.0], [452.0, 22583.0], [478.0, 22891.0], [479.0, 23321.0], [477.0, 22481.0], [476.0, 22760.0], [475.0, 23026.0], [474.0, 23165.0], [473.0, 22822.0], [472.0, 22937.0], [471.0, 22993.0], [465.0, 22862.0], [464.0, 22547.0], [467.0, 22819.0], [466.0, 23109.0], [470.0, 23198.0], [469.0, 23011.0], [468.0, 22808.0], [494.0, 23031.0], [495.0, 22813.0], [493.0, 23027.0], [492.0, 23206.0], [491.0, 22929.0], [490.0, 22950.0], [489.0, 23264.0], [488.0, 23184.0], [487.0, 23352.0], [481.0, 23145.0], [480.0, 23184.0], [483.0, 23083.0], [482.0, 23077.0], [486.0, 23203.0], [485.0, 23073.0], [484.0, 23409.0], [500.0, 28854.230821800866], [499.0, 22710.0], [498.0, 22749.0], [497.0, 22741.0], [496.0, 23037.0], [1.0, 14081.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[498.75255999999985, 28815.89164000007]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1583.3333333333333, "minX": 1.66057938E12, "maxY": 6.08247E7, "series": [{"data": [[1.66058046E12, 3.1628844E7], [1.66057944E12, 4.05498E7], [1.66058268E12, 6.07436004E7], [1.66058388E12, 2.8993107E7], [1.66058166E12, 4.10363976E7], [1.6605849E12, 3.49539276E7], [1.66058064E12, 4.2780039E7], [1.66058286E12, 2.68845174E7], [1.66057962E12, 4.98357042E7], [1.66058184E12, 4.05092502E7], [1.66058406E12, 4.36315848E7], [1.66058508E12, 4.18068438E7], [1.66058082E12, 2.5140876E7], [1.66058304E12, 5.01195528E7], [1.66058334E12, 2.68845174E7], [1.6605801E12, 4.04687004E7], [1.66058232E12, 4.04687004E7], [1.66058454E12, 4.19284932E7], [1.6605813E12, 4.5213027E7], [1.66058352E12, 3.53999754E7], [1.66058028E12, 6.07436004E7], [1.6605837E12, 4.72810668E7], [1.6605825E12, 4.05498E7], [1.66058472E12, 4.04281506E7], [1.66058148E12, 3.41834814E7], [1.66058238E12, 3.92927562E7], [1.66058136E12, 4.50913776E7], [1.66058358E12, 4.55374254E7], [1.6605846E12, 3.92522064E7], [1.66058034E12, 2.33566848E7], [1.66058256E12, 4.92274572E7], [1.66058496E12, 4.23339912E7], [1.66058154E12, 4.69161186E7], [1.66058052E12, 4.9470756E7], [1.66058376E12, 3.34941348E7], [1.66058274E12, 2.08020474E7], [1.66058478E12, 4.03876008E7], [1.6605798E12, 5.30391384E7], [1.66058202E12, 4.05498E7], [1.66058424E12, 2.76549636E7], [1.660581E12, 5.88783096E7], [1.66058322E12, 2.81010114E7], [1.66057998E12, 2.03154498E7], [1.6605822E12, 4.05498E7], [1.66058442E12, 5.068725E7], [1.66058118E12, 4.14418956E7], [1.6605834E12, 4.74838158E7], [1.66058016E12, 4.92274572E7], [1.66058448E12, 3.13855452E7], [1.66058106E12, 4.01037522E7], [1.66058328E12, 5.79456642E7], [1.66058004E12, 6.07841502E7], [1.66058226E12, 4.05498E7], [1.6605843E12, 6.05408514E7], [1.66058124E12, 3.62109714E7], [1.66058466E12, 4.0752549E7], [1.66058346E12, 3.36157842E7], [1.66058022E12, 3.19532424E7], [1.66058244E12, 4.18879434E7], [1.6605795E12, 4.15229952E7], [1.66058172E12, 4.04687004E7], [1.66058514E12, 2.02749E7], [1.66058394E12, 4.2171792E7], [1.6605807E12, 3.96577044E7], [1.66058292E12, 5.46205806E7], [1.66057968E12, 4.0752549E7], [1.6605819E12, 4.05498E7], [1.66058088E12, 5.77429152E7], [1.6605831E12, 3.1628844E7], [1.66058412E12, 3.72652662E7], [1.66057986E12, 2.80604616E7], [1.66058208E12, 4.05498E7], [1.66058076E12, 5.5958724E7], [1.66058418E12, 5.3931234E7], [1.66058298E12, 3.94955052E7], [1.66057974E12, 4.05498E7], [1.66058196E12, 4.05498E7], [1.66058094E12, 2.53030752E7], [1.66058316E12, 5.50666284E7], [1.66057992E12, 6.08247E7], [1.66058436E12, 3.95766048E7], [1.66058214E12, 4.05498E7], [1.66058112E12, 4.01037522E7], [1.66058142E12, 5.5958724E7], [1.66058364E12, 3.6697569E7], [1.6605804E12, 5.78240148E7], [1.66058484E12, 4.61456724E7], [1.66058262E12, 3.18721428E7], [1.66057938E12, 4.05498E7], [1.6605816E12, 4.0144302E7], [1.660584E12, 3.8927808E7], [1.66058058E12, 3.92116566E7], [1.6605828E12, 6.03786522E7], [1.66058502E12, 3.7508565E7], [1.66057956E12, 5.03628516E7], [1.66058178E12, 4.05903498E7], [1.66058382E12, 5.06467002E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66058046E12, 2470.0], [1.66057944E12, 3166.6666666666665], [1.66058268E12, 4743.666666666667], [1.66058388E12, 2264.1666666666665], [1.66058166E12, 3204.6666666666665], [1.6605849E12, 2729.6666666666665], [1.66058064E12, 3340.8333333333335], [1.66058286E12, 2099.5], [1.66057962E12, 3891.8333333333335], [1.66058184E12, 3163.5], [1.66058406E12, 3407.3333333333335], [1.66058508E12, 3264.8333333333335], [1.66058082E12, 1963.3333333333333], [1.66058304E12, 3914.0], [1.66058334E12, 2099.5], [1.6605801E12, 3160.3333333333335], [1.66058232E12, 3160.3333333333335], [1.66058454E12, 3274.3333333333335], [1.6605813E12, 3530.8333333333335], [1.66058352E12, 2764.5], [1.66058028E12, 4743.666666666667], [1.6605837E12, 3692.3333333333335], [1.6605825E12, 3166.6666666666665], [1.66058472E12, 3157.1666666666665], [1.66058148E12, 2669.5], [1.66058238E12, 3068.5], [1.66058136E12, 3521.3333333333335], [1.66058358E12, 3556.1666666666665], [1.6605846E12, 3065.3333333333335], [1.66058034E12, 1824.0], [1.66058256E12, 3844.3333333333335], [1.66058496E12, 3306.0], [1.66058154E12, 3663.8333333333335], [1.66058052E12, 3863.3333333333335], [1.66058376E12, 2615.6666666666665], [1.66058274E12, 1624.5], [1.66058478E12, 3154.0], [1.6605798E12, 4142.0], [1.66058202E12, 3166.6666666666665], [1.66058424E12, 2159.6666666666665], [1.660581E12, 4598.0], [1.66058322E12, 2194.5], [1.66057998E12, 1586.5], [1.6605822E12, 3166.6666666666665], [1.66058442E12, 3958.3333333333335], [1.66058118E12, 3236.3333333333335], [1.6605834E12, 3708.1666666666665], [1.66058016E12, 3844.3333333333335], [1.66058448E12, 2451.0], [1.66058106E12, 3131.8333333333335], [1.66058328E12, 4525.166666666667], [1.66058004E12, 4746.833333333333], [1.66058226E12, 3166.6666666666665], [1.6605843E12, 4727.833333333333], [1.66058124E12, 2827.8333333333335], [1.66058466E12, 3182.5], [1.66058346E12, 2625.1666666666665], [1.66058022E12, 2495.3333333333335], [1.66058244E12, 3271.1666666666665], [1.6605795E12, 3242.6666666666665], [1.66058172E12, 3160.3333333333335], [1.66058514E12, 1583.3333333333333], [1.66058394E12, 3293.3333333333335], [1.6605807E12, 3097.0], [1.66058292E12, 4265.5], [1.66057968E12, 3182.5], [1.6605819E12, 3166.6666666666665], [1.66058088E12, 4509.333333333333], [1.6605831E12, 2470.0], [1.66058412E12, 2910.1666666666665], [1.66057986E12, 2191.3333333333335], [1.66058208E12, 3166.6666666666665], [1.66058076E12, 4370.0], [1.66058418E12, 4211.666666666667], [1.66058298E12, 3084.3333333333335], [1.66057974E12, 3166.6666666666665], [1.66058196E12, 3166.6666666666665], [1.66058094E12, 1976.0], [1.66058316E12, 4300.333333333333], [1.66057992E12, 4750.0], [1.66058436E12, 3090.6666666666665], [1.66058214E12, 3166.6666666666665], [1.66058112E12, 3131.8333333333335], [1.66058142E12, 4370.0], [1.66058364E12, 2865.8333333333335], [1.6605804E12, 4515.666666666667], [1.66058484E12, 3603.6666666666665], [1.66058262E12, 2489.0], [1.66057938E12, 3166.6666666666665], [1.6605816E12, 3135.0], [1.660584E12, 3040.0], [1.66058058E12, 3062.1666666666665], [1.6605828E12, 4715.166666666667], [1.66058502E12, 2929.1666666666665], [1.66057956E12, 3933.0], [1.66058178E12, 3169.8333333333335], [1.66058382E12, 3955.1666666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66058514E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 21172.879999999986, "minX": 1.66057938E12, "maxY": 44358.213541666686, "series": [{"data": [[1.66058046E12, 35452.88974358971], [1.66057944E12, 30032.437000000038], [1.66058268E12, 29402.34979973298], [1.66058388E12, 25951.85034965035], [1.66058166E12, 24360.474308300378], [1.6605849E12, 23964.549883990716], [1.66058064E12, 23231.30616113745], [1.66058286E12, 29302.702865761676], [1.66057962E12, 23499.708706265264], [1.66058184E12, 35771.33533533534], [1.66058406E12, 34891.41821561342], [1.66058508E12, 34787.922405431615], [1.66058082E12, 42742.01451612901], [1.66058304E12, 22504.897249190934], [1.66058334E12, 41656.08144796377], [1.6605801E12, 32312.017034068118], [1.66058232E12, 36138.00501002], [1.66058454E12, 23506.195357833672], [1.6605813E12, 28645.242152466333], [1.66058352E12, 24589.587628865967], [1.66058028E12, 21911.198264352486], [1.6605837E12, 33684.259862778716], [1.6605825E12, 21993.985], [1.66058472E12, 36636.22668004012], [1.66058148E12, 39703.3202846975], [1.66058238E12, 25636.29618163053], [1.66058136E12, 25807.893884892117], [1.66058358E12, 34656.92609082822], [1.6605846E12, 35552.93388429748], [1.66058034E12, 44358.213541666686], [1.66058256E12, 30811.229818780932], [1.66058496E12, 36063.9779693487], [1.66058154E12, 22172.566983578206], [1.66058052E12, 24441.071311475403], [1.66058376E12, 22814.5508474576], [1.66058274E12, 25121.56920077974], [1.66058478E12, 23209.89558232933], [1.6605798E12, 28987.21024464832], [1.66058202E12, 22237.908999999978], [1.66058424E12, 25095.42082111439], [1.660581E12, 21595.48898071627], [1.66058322E12, 37785.58297258302], [1.66057998E12, 22865.606786427146], [1.6605822E12, 37492.23800000005], [1.66058442E12, 21294.07999999998], [1.66058118E12, 32978.16144814093], [1.6605834E12, 24398.315969257095], [1.66058016E12, 21451.310543657342], [1.66058448E12, 40385.70801033589], [1.66058106E12, 33942.3023255813], [1.66058328E12, 23336.38698390485], [1.66058004E12, 32207.779186124037], [1.66058226E12, 25339.549000000017], [1.6605843E12, 27425.08707300739], [1.66058124E12, 28117.923852183645], [1.66058466E12, 22746.56019900498], [1.66058346E12, 37755.65138721352], [1.66058022E12, 38578.118020304566], [1.66058244E12, 32957.929332042535], [1.6605795E12, 21324.88964843748], [1.66058172E12, 35024.32965931862], [1.66058514E12, 21172.879999999986], [1.66058394E12, 36885.23173076926], [1.6605807E12, 34583.47750511246], [1.66058292E12, 27636.004454343034], [1.66057968E12, 29815.400000000034], [1.6605819E12, 25197.838000000018], [1.66058088E12, 23087.38764044944], [1.6605831E12, 39147.919230769265], [1.66058412E12, 25889.58215451577], [1.66057986E12, 28380.388728323713], [1.66058208E12, 35448.491999999984], [1.66058076E12, 22633.976086956514], [1.66058418E12, 29564.01804511275], [1.66058298E12, 35145.9342915811], [1.66057974E12, 23364.81700000002], [1.66058196E12, 35169.135], [1.66058094E12, 42801.862179487194], [1.66058316E12, 23118.20324005888], [1.66057992E12, 27293.395333333377], [1.66058436E12, 33775.27663934425], [1.66058214E12, 23445.369000000035], [1.66058112E12, 24037.91102123356], [1.66058142E12, 23120.901449275385], [1.66058364E12, 23983.785635359138], [1.6605804E12, 22365.823281907444], [1.66058484E12, 33078.323374340864], [1.66058262E12, 22217.55216284988], [1.66057938E12, 23767.978000000043], [1.6605816E12, 35530.70000000002], [1.660584E12, 24329.351041666698], [1.66058058E12, 36068.335056876975], [1.6605828E12, 31202.94425789117], [1.66058502E12, 27649.027027027023], [1.66057956E12, 30031.020128824486], [1.66058178E12, 23600.653346653282], [1.66058382E12, 33224.36429143317]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66058514E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 21170.346000000012, "minX": 1.66057938E12, "maxY": 44355.24131944444, "series": [{"data": [[1.66058046E12, 35446.035897435875], [1.66057944E12, 30027.877], [1.66058268E12, 29399.755006675547], [1.66058388E12, 25948.688111888103], [1.66058166E12, 24357.81818181819], [1.6605849E12, 23961.162412993057], [1.66058064E12, 23228.407582938384], [1.66058286E12, 29299.805429864235], [1.66057962E12, 23495.012205044757], [1.66058184E12, 35767.3113113113], [1.66058406E12, 34888.941449814214], [1.66058508E12, 34785.38991270611], [1.66058082E12, 42739.233870967655], [1.66058304E12, 22502.399676375393], [1.66058334E12, 41653.47058823526], [1.6605801E12, 32309.194388777563], [1.66058232E12, 36135.33466933869], [1.66058454E12, 23502.908123791098], [1.6605813E12, 28642.43946188342], [1.66058352E12, 24586.625429553278], [1.66058028E12, 21908.431909212297], [1.6605837E12, 33679.870497427146], [1.6605825E12, 21991.333999999995], [1.66058472E12, 36632.77632898699], [1.66058148E12, 39700.15302491101], [1.66058238E12, 25632.23116615067], [1.66058136E12, 25803.5782374101], [1.66058358E12, 34653.72039180768], [1.6605846E12, 35548.69731404957], [1.66058034E12, 44355.24131944444], [1.66058256E12, 30808.48929159807], [1.66058496E12, 36061.34961685829], [1.66058154E12, 22169.602420051877], [1.66058052E12, 24438.254918032766], [1.66058376E12, 22811.371670702196], [1.66058274E12, 25118.113060428845], [1.66058478E12, 23207.070281124496], [1.6605798E12, 28984.48012232411], [1.66058202E12, 22235.126000000015], [1.66058424E12, 25090.70381231667], [1.660581E12, 21592.562672176315], [1.66058322E12, 37782.72727272728], [1.66057998E12, 22862.616766467065], [1.6605822E12, 37489.59400000001], [1.66058442E12, 21291.277600000016], [1.66058118E12, 32975.30234833658], [1.6605834E12, 24394.786507258716], [1.66058016E12, 21448.56507413505], [1.66058448E12, 40380.97028423776], [1.66058106E12, 33939.74317492415], [1.66058328E12, 23333.585024492655], [1.66058004E12, 32204.972648432326], [1.66058226E12, 25336.756000000016], [1.6605843E12, 27422.30274614869], [1.66058124E12, 28111.51399776036], [1.66058466E12, 22743.697512437782], [1.66058346E12, 37751.74668275026], [1.66058022E12, 38573.38071065985], [1.66058244E12, 32954.91577928366], [1.6605795E12, 21321.633789062507], [1.66058172E12, 35018.7394789579], [1.66058514E12, 21170.346000000012], [1.66058394E12, 36882.63846153837], [1.6605807E12, 34580.68302658485], [1.66058292E12, 27633.29027468445], [1.66057968E12, 29812.364179104516], [1.6605819E12, 25195.107000000007], [1.66058088E12, 23084.49648876409], [1.6605831E12, 39144.0602564103], [1.66058412E12, 25884.50598476601], [1.66057986E12, 28373.767341040435], [1.66058208E12, 35445.68400000001], [1.66058076E12, 22631.3623188406], [1.66058418E12, 29561.035338345886], [1.66058298E12, 35142.66119096509], [1.66057974E12, 23359.490999999987], [1.66058196E12, 35166.627000000015], [1.66058094E12, 42798.3173076923], [1.66058316E12, 23115.50736377026], [1.66057992E12, 27290.30266666666], [1.66058436E12, 33771.255122950824], [1.66058214E12, 23442.159000000007], [1.66058112E12, 24033.778564206274], [1.66058142E12, 23118.231884057954], [1.66058364E12, 23980.45966850829], [1.6605804E12, 22363.0147265077], [1.66058484E12, 33075.67838312824], [1.66058262E12, 22213.750636132314], [1.66057938E12, 23763.083999999995], [1.6605816E12, 35526.91616161621], [1.660584E12, 24326.112499999974], [1.66058058E12, 36065.430196484], [1.6605828E12, 31200.284754869062], [1.66058502E12, 27644.5664864865], [1.66057956E12, 30024.978260869597], [1.66058178E12, 23597.734265734256], [1.66058382E12, 33220.92153722978]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66058514E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.66057938E12, "maxY": 0.4308457711442787, "series": [{"data": [[1.66058046E12, 0.21153846153846156], [1.66057944E12, 0.27599999999999986], [1.66058268E12, 0.09879839786381853], [1.66058388E12, 0.02937062937062941], [1.66058166E12, 0.03359683794466404], [1.6605849E12, 0.011600928074245951], [1.66058064E12, 0.09383886255924154], [1.66058286E12, 0.03770739064856713], [1.66057962E12, 0.044751830756712886], [1.66058184E12, 0.21721721721721718], [1.66058406E12, 0.10594795539033472], [1.66058508E12, 0.15809893307468495], [1.66058082E12, 0.0016129032258064516], [1.66058304E12, 0.08818770226537218], [1.66058334E12, 0.13423831070889894], [1.6605801E12, 0.12825651302605207], [1.66058232E12, 0.09819639278557112], [1.66058454E12, 0.06576402321083166], [1.6605813E12, 0.22242152466367707], [1.66058352E12, 0.051546391752577254], [1.66058028E12, 0.056742323097463535], [1.6605837E12, 0.09777015437392794], [1.6605825E12, 0.056999999999999884], [1.66058472E12, 0.1414242728184554], [1.66058148E12, 0.0782918149466191], [1.66058238E12, 0.025799793601651185], [1.66058136E12, 0.0602517985611511], [1.66058358E12, 0.1798753339269815], [1.6605846E12, 0.271694214876033], [1.66058034E12, 0.1510416666666666], [1.66058256E12, 0.0914332784184514], [1.66058496E12, 0.11111111111111131], [1.66058154E12, 0.061365600691443395], [1.66058052E12, 0.28524590163934427], [1.66058376E12, 0.027845036319612576], [1.66058274E12, 0.0], [1.66058478E12, 0.07429718875502006], [1.6605798E12, 0.08256880733944956], [1.66058202E12, 0.055000000000000104], [1.66058424E12, 0.021994134897360698], [1.660581E12, 0.05647382920110183], [1.66058322E12, 0.06349206349206349], [1.66057998E12, 0.10179640718562877], [1.6605822E12, 0.08899999999999997], [1.66058442E12, 0.07759999999999996], [1.66058118E12, 0.23287671232876728], [1.6605834E12, 0.06575576430401363], [1.66058016E12, 0.09555189456342675], [1.66058448E12, 0.10077519379844961], [1.66058106E12, 0.07583417593528818], [1.66058328E12, 0.05318404478656417], [1.66058004E12, 0.06737825216811212], [1.66058226E12, 0.050999999999999844], [1.6605843E12, 0.09578030810448751], [1.66058124E12, 0.07502799552071655], [1.66058466E12, 0.025870646766169184], [1.66058346E12, 0.23522316043425828], [1.66058022E12, 0.0012690355329949238], [1.66058244E12, 0.15004840271055178], [1.6605795E12, 0.004882812500000001], [1.66058172E12, 0.23446893787575154], [1.66058514E12, 0.04800000000000003], [1.66058394E12, 0.0836538461538463], [1.6605807E12, 0.09713701431492834], [1.66058292E12, 0.09057164068299914], [1.66057968E12, 0.4308457711442787], [1.6605819E12, 0.030999999999999965], [1.66058088E12, 0.07794943820224716], [1.6605831E12, 0.08076923076923086], [1.66058412E12, 0.03917301414581061], [1.66057986E12, 0.0], [1.66058208E12, 0.09899999999999998], [1.66058076E12, 0.06884057971014503], [1.66058418E12, 0.17969924812030083], [1.66058298E12, 0.044147843942505115], [1.66057974E12, 0.1239999999999999], [1.66058196E12, 0.09599999999999999], [1.66058094E12, 0.27083333333333337], [1.66058316E12, 0.07290132547864517], [1.66057992E12, 0.30933333333333307], [1.66058436E12, 0.20389344262295073], [1.66058214E12, 0.04300000000000003], [1.66058112E12, 0.0020222446916076877], [1.66058142E12, 0.08333333333333325], [1.66058364E12, 0.03756906077348065], [1.6605804E12, 0.058906030855540054], [1.66058484E12, 0.10281195079086117], [1.66058262E12, 0.024173027989821884], [1.66057938E12, 0.41200000000000064], [1.6605816E12, 0.19898989898989888], [1.660584E12, 0.06250000000000004], [1.66058058E12, 0.02998965873836609], [1.6605828E12, 0.09267965077233055], [1.66058502E12, 0.0735135135135135], [1.66057956E12, 0.1698872785829307], [1.66058178E12, 0.04395604395604394], [1.66058382E12, 0.12409927942353909]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66058514E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 13579.0, "minX": 1.66057938E12, "maxY": 53519.0, "series": [{"data": [[1.66058046E12, 48248.0], [1.66057944E12, 38565.0], [1.66058268E12, 46786.0], [1.66058388E12, 38930.0], [1.66058166E12, 25662.0], [1.6605849E12, 41416.0], [1.66058064E12, 47736.0], [1.66058286E12, 48992.0], [1.66057962E12, 33894.0], [1.66058184E12, 49260.0], [1.66058406E12, 51028.0], [1.66058508E12, 53519.0], [1.66058082E12, 48505.0], [1.66058304E12, 47770.0], [1.66058334E12, 49666.0], [1.6605801E12, 42563.0], [1.66058232E12, 50462.0], [1.66058454E12, 30506.0], [1.6605813E12, 49913.0], [1.66058352E12, 38240.0], [1.66058028E12, 24149.0], [1.6605837E12, 50525.0], [1.6605825E12, 24038.0], [1.66058472E12, 51195.0], [1.66058148E12, 53085.0], [1.66058238E12, 38177.0], [1.66058136E12, 35530.0], [1.66058358E12, 51303.0], [1.6605846E12, 48786.0], [1.66058034E12, 49084.0], [1.66058256E12, 46850.0], [1.66058496E12, 52270.0], [1.66058154E12, 23303.0], [1.66058052E12, 43681.0], [1.66058376E12, 40467.0], [1.66058274E12, 50553.0], [1.66058478E12, 33528.0], [1.6605798E12, 43255.0], [1.66058202E12, 24765.0], [1.66058424E12, 46132.0], [1.660581E12, 25662.0], [1.66058322E12, 44936.0], [1.66057998E12, 51054.0], [1.6605822E12, 53500.0], [1.66058442E12, 26234.0], [1.66058118E12, 48044.0], [1.6605834E12, 33177.0], [1.66058016E12, 39739.0], [1.66058448E12, 51159.0], [1.66058106E12, 47487.0], [1.66058328E12, 26316.0], [1.66058004E12, 52213.0], [1.66058226E12, 27942.0], [1.6605843E12, 46200.0], [1.66058124E12, 46450.0], [1.66058466E12, 35336.0], [1.66058346E12, 49635.0], [1.66058022E12, 49604.0], [1.66058244E12, 50230.0], [1.6605795E12, 28225.0], [1.66058172E12, 47904.0], [1.66058514E12, 23499.0], [1.66058394E12, 52871.0], [1.6605807E12, 47411.0], [1.66058292E12, 49592.0], [1.66057968E12, 43516.0], [1.6605819E12, 29611.0], [1.66058088E12, 27129.0], [1.6605831E12, 50447.0], [1.66058412E12, 45452.0], [1.66057986E12, 43779.0], [1.66058208E12, 49556.0], [1.66058076E12, 24831.0], [1.66058418E12, 50559.0], [1.66058298E12, 49360.0], [1.66057974E12, 38584.0], [1.66058196E12, 50032.0], [1.66058094E12, 49247.0], [1.66058316E12, 46518.0], [1.66057992E12, 44089.0], [1.66058436E12, 45909.0], [1.66058214E12, 24799.0], [1.66058112E12, 37471.0], [1.66058142E12, 33229.0], [1.66058364E12, 38206.0], [1.6605804E12, 25292.0], [1.66058484E12, 49557.0], [1.66058262E12, 35310.0], [1.66057938E12, 26196.0], [1.6605816E12, 49826.0], [1.660584E12, 43953.0], [1.66058058E12, 49385.0], [1.6605828E12, 51263.0], [1.66058502E12, 46931.0], [1.66057956E12, 44901.0], [1.66058178E12, 27068.0], [1.66058382E12, 50529.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66058046E12, 46466.5], [1.66057944E12, 37369.6], [1.66058268E12, 45397.2], [1.66058388E12, 27066.8], [1.66058166E12, 24855.0], [1.6605849E12, 25604.4], [1.66058064E12, 22983.8], [1.66058286E12, 48240.4], [1.66057962E12, 26724.0], [1.66058184E12, 48113.0], [1.66058406E12, 50172.2], [1.66058508E12, 51564.0], [1.66058082E12, 47720.6], [1.66058304E12, 23175.4], [1.66058334E12, 48851.2], [1.6605801E12, 41486.4], [1.66058232E12, 49445.7], [1.66058454E12, 24844.5], [1.6605813E12, 46737.0], [1.66058352E12, 25390.2], [1.66058028E12, 22956.0], [1.6605837E12, 49576.1], [1.6605825E12, 22865.2], [1.66058472E12, 50411.2], [1.66058148E12, 52317.2], [1.66058238E12, 28735.0], [1.66058136E12, 33278.0], [1.66058358E12, 50535.2], [1.6605846E12, 47752.6], [1.66058034E12, 48433.3], [1.66058256E12, 45665.0], [1.66058496E12, 51040.5], [1.66058154E12, 22630.8], [1.66058052E12, 35543.3], [1.66058376E12, 23069.6], [1.66058274E12, 25341.0], [1.66058478E12, 23653.100000000002], [1.6605798E12, 41296.4], [1.66058202E12, 23122.8], [1.66058424E12, 34368.3], [1.660581E12, 22494.4], [1.66058322E12, 44145.8], [1.66057998E12, 23466.2], [1.6605822E12, 52762.7], [1.66058442E12, 23374.800000000003], [1.66058118E12, 47168.1], [1.6605834E12, 27805.399999999998], [1.66058016E12, 22290.5], [1.66058448E12, 49961.5], [1.66058106E12, 46691.0], [1.66058328E12, 24369.0], [1.66058004E12, 51165.0], [1.66058226E12, 27196.7], [1.6605843E12, 44715.2], [1.66058124E12, 40217.6], [1.66058466E12, 23282.2], [1.66058346E12, 47773.0], [1.66058022E12, 48472.3], [1.66058244E12, 48457.8], [1.6605795E12, 22798.5], [1.66058172E12, 43754.6], [1.66058514E12, 22837.5], [1.66058394E12, 51910.7], [1.6605807E12, 46485.5], [1.66058292E12, 48061.2], [1.66057968E12, 41609.8], [1.6605819E12, 25855.3], [1.66058088E12, 24837.0], [1.6605831E12, 49733.6], [1.66058412E12, 33102.0], [1.66057986E12, 37100.7], [1.66058208E12, 48725.8], [1.66058076E12, 23914.0], [1.66058418E12, 48425.4], [1.66058298E12, 48287.5], [1.66057974E12, 28687.3], [1.66058196E12, 48924.7], [1.66058094E12, 48498.0], [1.66058316E12, 23635.1], [1.66057992E12, 41529.8], [1.66058436E12, 44437.9], [1.66058214E12, 23966.8], [1.66058112E12, 27930.0], [1.66058142E12, 31129.9], [1.66058364E12, 24900.8], [1.6605804E12, 24082.9], [1.66058484E12, 48621.2], [1.66058262E12, 23153.9], [1.66057938E12, 25090.0], [1.6605816E12, 48895.8], [1.660584E12, 25051.2], [1.66058058E12, 48295.4], [1.6605828E12, 50129.0], [1.66058502E12, 35023.0], [1.66057956E12, 38583.8], [1.66058178E12, 25317.6], [1.66058382E12, 49491.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66058046E12, 47578.17], [1.66057944E12, 38013.88], [1.66058268E12, 46368.03], [1.66058388E12, 30660.80000000001], [1.66058166E12, 25223.53], [1.6605849E12, 34672.170000000006], [1.66058064E12, 47381.6], [1.66058286E12, 48839.28], [1.66057962E12, 32553.500000000004], [1.66058184E12, 48651.0], [1.66058406E12, 50690.76], [1.66058508E12, 52873.6], [1.66058082E12, 48348.03999999999], [1.66058304E12, 47030.93], [1.66058334E12, 49467.2], [1.6605801E12, 42148.27], [1.66058232E12, 50115.14], [1.66058454E12, 29067.850000000017], [1.6605813E12, 49572.36], [1.66058352E12, 36401.0], [1.66058028E12, 23411.13], [1.6605837E12, 50211.97], [1.6605825E12, 23475.84], [1.66058472E12, 50850.02], [1.66058148E12, 52744.12], [1.66058238E12, 37021.09999999998], [1.66058136E12, 34918.35], [1.66058358E12, 51129.84], [1.6605846E12, 48311.0], [1.66058034E12, 48863.43], [1.66058256E12, 46304.2], [1.66058496E12, 51557.2], [1.66058154E12, 23055.300000000003], [1.66058052E12, 41027.899999999994], [1.66058376E12, 40061.57000000001], [1.66058274E12, 50101.3], [1.66058478E12, 26621.06999999999], [1.6605798E12, 42513.200000000004], [1.66058202E12, 23907.91], [1.66058424E12, 45445.21], [1.660581E12, 23206.99], [1.66058322E12, 44630.86], [1.66057998E12, 24037.3], [1.6605822E12, 53196.76], [1.66058442E12, 25033.9], [1.66058118E12, 47769.0], [1.6605834E12, 32246.519999999997], [1.66058016E12, 22931.649999999998], [1.66058448E12, 50752.5], [1.66058106E12, 47197.2], [1.66058328E12, 25501.600000000002], [1.66058004E12, 51785.0], [1.66058226E12, 27578.89], [1.6605843E12, 45676.799999999996], [1.66058124E12, 45511.5], [1.66058466E12, 24052.459999999992], [1.66058346E12, 49189.1], [1.66058022E12, 49060.65], [1.66058244E12, 49354.159999999996], [1.6605795E12, 27232.0], [1.66058172E12, 47581.33], [1.66058514E12, 23351.69], [1.66058394E12, 52492.57], [1.6605807E12, 46990.68], [1.66058292E12, 48777.32], [1.66057968E12, 42673.4], [1.6605819E12, 26335.92], [1.66058088E12, 26461.0], [1.6605831E12, 50047.61], [1.66058412E12, 44068.399999999994], [1.66057986E12, 42220.30000000002], [1.66058208E12, 49249.96], [1.66058076E12, 24465.38], [1.66058418E12, 49373.590000000004], [1.66058298E12, 48761.5], [1.66057974E12, 34944.85], [1.66058196E12, 49408.53], [1.66058094E12, 48989.5], [1.66058316E12, 32409.540000000015], [1.66057992E12, 43448.98], [1.66058436E12, 45485.69], [1.66058214E12, 24371.0], [1.66058112E12, 35721.8], [1.66058142E12, 32645.71], [1.66058364E12, 36732.64], [1.6605804E12, 24644.71], [1.66058484E12, 49159.05], [1.66058262E12, 30472.309999999998], [1.66057938E12, 25857.64], [1.6605816E12, 49416.71], [1.660584E12, 34449.46], [1.66058058E12, 48824.4], [1.6605828E12, 50715.3], [1.66058502E12, 45102.42], [1.66057956E12, 43692.69], [1.66058178E12, 25792.74], [1.66058382E12, 50013.5]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66058046E12, 46863.85], [1.66057944E12, 37632.25], [1.66058268E12, 45843.05], [1.66058388E12, 28058.399999999994], [1.66058166E12, 24978.5], [1.6605849E12, 26529.8], [1.66058064E12, 23271.8], [1.66058286E12, 48518.8], [1.66057962E12, 28957.5], [1.66058184E12, 48319.0], [1.66058406E12, 50342.75], [1.66058508E12, 52072.4], [1.66058082E12, 47879.6], [1.66058304E12, 23539.299999999996], [1.66058334E12, 49110.4], [1.6605801E12, 41686.25], [1.66058232E12, 49681.1], [1.66058454E12, 25229.0], [1.6605813E12, 49095.6], [1.66058352E12, 25597.4], [1.66058028E12, 23097.05], [1.6605837E12, 49773.3], [1.6605825E12, 23084.7], [1.66058472E12, 50603.1], [1.66058148E12, 52481.6], [1.66058238E12, 32727.0], [1.66058136E12, 34096.399999999994], [1.66058358E12, 50741.8], [1.6605846E12, 47933.55], [1.66058034E12, 48540.65], [1.66058256E12, 45892.75], [1.66058496E12, 51277.75], [1.66058154E12, 22761.8], [1.66058052E12, 38230.6], [1.66058376E12, 23590.85], [1.66058274E12, 26897.89999999999], [1.66058478E12, 23828.75], [1.6605798E12, 41986.2], [1.66058202E12, 23294.9], [1.66058424E12, 38389.75], [1.660581E12, 22682.45], [1.66058322E12, 44276.5], [1.66057998E12, 23692.2], [1.6605822E12, 52925.95], [1.66058442E12, 23993.15], [1.66058118E12, 47413.85], [1.6605834E12, 29906.399999999998], [1.66058016E12, 22492.0], [1.66058448E12, 50248.75], [1.66058106E12, 46902.5], [1.66058328E12, 24594.0], [1.66058004E12, 51419.0], [1.66058226E12, 27326.95], [1.6605843E12, 45127.8], [1.66058124E12, 42972.4], [1.66058466E12, 23467.5], [1.66058346E12, 48472.5], [1.66058022E12, 48708.55], [1.66058244E12, 48780.3], [1.6605795E12, 23040.25], [1.66058172E12, 45608.1], [1.66058514E12, 23078.9], [1.66058394E12, 52182.8], [1.6605807E12, 46660.05], [1.66058292E12, 48334.0], [1.66057968E12, 42080.8], [1.6605819E12, 26017.95], [1.66058088E12, 25396.75], [1.6605831E12, 49839.65], [1.66058412E12, 38568.0], [1.66057986E12, 39258.700000000004], [1.66058208E12, 48875.8], [1.66058076E12, 24137.9], [1.66058418E12, 48855.15], [1.66058298E12, 48465.0], [1.66057974E12, 31195.049999999996], [1.66058196E12, 49107.55], [1.66058094E12, 48676.75], [1.66058316E12, 26360.649999999998], [1.66057992E12, 42634.15], [1.66058436E12, 44926.4], [1.66058214E12, 24127.0], [1.66058112E12, 30969.5], [1.66058142E12, 32026.4], [1.66058364E12, 25656.1], [1.6605804E12, 24270.65], [1.66058484E12, 48818.05], [1.66058262E12, 24739.899999999998], [1.66057938E12, 25399.199999999997], [1.6605816E12, 49105.45], [1.660584E12, 26797.249999999996], [1.66058058E12, 48576.2], [1.6605828E12, 50349.0], [1.66058502E12, 40774.39999999998], [1.66057956E12, 40649.0], [1.66058178E12, 25504.8], [1.66058382E12, 49718.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66058046E12, 23818.0], [1.66057944E12, 21765.0], [1.66058268E12, 19455.0], [1.66058388E12, 23173.0], [1.66058166E12, 22239.0], [1.6605849E12, 21243.0], [1.66058064E12, 21199.0], [1.66058286E12, 22217.0], [1.66057962E12, 19924.0], [1.66058184E12, 22275.0], [1.66058406E12, 21633.0], [1.66058508E12, 21459.0], [1.66058082E12, 23007.0], [1.66058304E12, 20436.0], [1.66058334E12, 21763.0], [1.6605801E12, 22224.0], [1.66058232E12, 22313.0], [1.66058454E12, 21344.0], [1.6605813E12, 19835.0], [1.66058352E12, 22665.0], [1.66058028E12, 20027.0], [1.6605837E12, 20335.0], [1.6605825E12, 20484.0], [1.66058472E12, 21951.0], [1.66058148E12, 20884.0], [1.66058238E12, 23463.0], [1.66058136E12, 21258.0], [1.66058358E12, 20905.0], [1.6605846E12, 21608.0], [1.66058034E12, 19979.0], [1.66058256E12, 19859.0], [1.66058496E12, 22174.0], [1.66058154E12, 21056.0], [1.66058052E12, 20406.0], [1.66058376E12, 20659.0], [1.66058274E12, 23039.0], [1.66058478E12, 21936.0], [1.6605798E12, 21349.0], [1.66058202E12, 20764.0], [1.66058424E12, 21028.0], [1.660581E12, 19562.0], [1.66058322E12, 21270.0], [1.66057998E12, 21277.0], [1.6605822E12, 21502.0], [1.66058442E12, 19142.0], [1.66058118E12, 20755.0], [1.6605834E12, 22079.0], [1.66058016E12, 19521.0], [1.66058448E12, 22236.0], [1.66058106E12, 20430.0], [1.66058328E12, 21433.0], [1.66058004E12, 21042.0], [1.66058226E12, 22205.0], [1.6605843E12, 19557.0], [1.66058124E12, 21572.0], [1.66058466E12, 21300.0], [1.66058346E12, 22262.0], [1.66058022E12, 21886.0], [1.66058244E12, 19489.0], [1.6605795E12, 18649.0], [1.66058172E12, 21634.0], [1.66058514E12, 13579.0], [1.66058394E12, 22587.0], [1.6605807E12, 21220.0], [1.66058292E12, 19610.0], [1.66057968E12, 19487.0], [1.6605819E12, 23565.0], [1.66058088E12, 20637.0], [1.6605831E12, 22099.0], [1.66058412E12, 21692.0], [1.66057986E12, 23108.0], [1.66058208E12, 21273.0], [1.66058076E12, 20314.0], [1.66058418E12, 19182.0], [1.66058298E12, 21615.0], [1.66057974E12, 19594.0], [1.66058196E12, 20628.0], [1.66058094E12, 19918.0], [1.66058316E12, 21148.0], [1.66057992E12, 20905.0], [1.66058436E12, 21761.0], [1.66058214E12, 22264.0], [1.66058112E12, 21336.0], [1.66058142E12, 19414.0], [1.66058364E12, 21183.0], [1.6605804E12, 19342.0], [1.66058484E12, 20269.0], [1.66058262E12, 20462.0], [1.66057938E12, 20108.0], [1.6605816E12, 21083.0], [1.660584E12, 22610.0], [1.66058058E12, 24058.0], [1.6605828E12, 20630.0], [1.66058502E12, 23425.0], [1.66057956E12, 19457.0], [1.66058178E12, 20895.0], [1.66058382E12, 21730.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66058046E12, 34359.0], [1.66057944E12, 30051.0], [1.66058268E12, 23146.5], [1.66058388E12, 26076.0], [1.66058166E12, 24372.0], [1.6605849E12, 24036.0], [1.66058064E12, 22487.0], [1.66058286E12, 23350.0], [1.66057962E12, 22680.0], [1.66058184E12, 36170.0], [1.66058406E12, 23145.0], [1.66058508E12, 24399.0], [1.66058082E12, 47080.5], [1.66058304E12, 22098.0], [1.66058334E12, 47532.0], [1.6605801E12, 24918.0], [1.66058232E12, 46837.5], [1.66058454E12, 23218.5], [1.6605813E12, 21540.0], [1.66058352E12, 24569.0], [1.66058028E12, 22195.5], [1.6605837E12, 28358.0], [1.6605825E12, 21895.0], [1.66058472E12, 38481.0], [1.66058148E12, 51401.0], [1.66058238E12, 24703.0], [1.66058136E12, 23904.5], [1.66058358E12, 27721.0], [1.6605846E12, 36159.5], [1.66058034E12, 47909.0], [1.66058256E12, 21042.0], [1.66058496E12, 23966.5], [1.66058154E12, 22156.0], [1.66058052E12, 22053.0], [1.66058376E12, 22351.0], [1.66058274E12, 24394.0], [1.66058478E12, 23167.0], [1.6605798E12, 23499.5], [1.66058202E12, 22160.5], [1.66058424E12, 22516.0], [1.660581E12, 21810.0], [1.66058322E12, 43553.0], [1.66057998E12, 22853.0], [1.6605822E12, 37796.0], [1.66058442E12, 21018.5], [1.66058118E12, 29588.5], [1.6605834E12, 23428.0], [1.66058016E12, 21475.0], [1.66058448E12, 42416.0], [1.66058106E12, 44352.0], [1.66058328E12, 23241.0], [1.66058004E12, 23553.0], [1.66058226E12, 25713.0], [1.6605843E12, 21130.0], [1.66058124E12, 22790.0], [1.66058466E12, 22683.0], [1.66058346E12, 40072.0], [1.66058022E12, 44727.5], [1.66058244E12, 29328.0], [1.6605795E12, 21714.5], [1.66058172E12, 35157.0], [1.66058514E12, 21787.0], [1.66058394E12, 24324.5], [1.6605807E12, 45410.0], [1.66058292E12, 20972.0], [1.66057968E12, 29021.0], [1.6605819E12, 25204.5], [1.66058088E12, 23094.5], [1.6605831E12, 48494.5], [1.66058412E12, 24589.0], [1.66057986E12, 25944.0], [1.66058208E12, 34942.5], [1.66058076E12, 23007.0], [1.66058418E12, 21050.0], [1.66058298E12, 23895.5], [1.66057974E12, 21868.0], [1.66058196E12, 33129.5], [1.66058094E12, 47626.0], [1.66058316E12, 22753.5], [1.66057992E12, 22608.5], [1.66058436E12, 33920.0], [1.66058214E12, 23439.0], [1.66058112E12, 22991.0], [1.66058142E12, 21934.5], [1.66058364E12, 23891.0], [1.6605804E12, 22774.5], [1.66058484E12, 21842.0], [1.66058262E12, 21930.5], [1.66057938E12, 23902.5], [1.6605816E12, 37135.0], [1.660584E12, 23893.0], [1.66058058E12, 25721.0], [1.6605828E12, 22658.0], [1.66058502E12, 26262.0], [1.66057956E12, 30548.5], [1.66058178E12, 23925.0], [1.66058382E12, 24040.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66058514E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 19837.5, "minX": 1.0, "maxY": 47618.0, "series": [{"data": [[2.0, 25563.0], [3.0, 30987.0], [4.0, 25768.0], [5.0, 28753.0], [6.0, 31484.5], [7.0, 31863.0], [8.0, 29300.0], [9.0, 26347.5], [10.0, 29026.0], [11.0, 25337.0], [12.0, 25454.5], [13.0, 32590.0], [14.0, 26672.5], [15.0, 26054.0], [16.0, 24066.0], [17.0, 23631.0], [18.0, 27150.5], [19.0, 25577.5], [20.0, 23451.0], [21.0, 25532.0], [22.0, 25417.0], [23.0, 23804.5], [24.0, 23427.5], [25.0, 23603.0], [26.0, 25053.5], [27.0, 23305.5], [28.0, 23861.0], [29.0, 23437.0], [30.0, 24548.0], [31.0, 23015.5], [33.0, 23173.0], [32.0, 25112.0], [34.0, 23996.5], [35.0, 22999.0], [37.0, 23101.0], [36.0, 24081.5], [38.0, 24192.0], [39.0, 23933.5], [40.0, 23778.0], [41.0, 23834.5], [42.0, 23644.0], [43.0, 23427.0], [45.0, 23571.5], [44.0, 23138.0], [46.0, 23327.5], [47.0, 23476.0], [49.0, 23226.0], [48.0, 23608.5], [50.0, 22979.5], [51.0, 22655.0], [52.0, 22938.5], [53.0, 23354.5], [55.0, 23351.0], [54.0, 22425.5], [57.0, 23147.5], [56.0, 22921.5], [58.0, 23460.5], [59.0, 22493.5], [61.0, 22707.0], [60.0, 22360.0], [62.0, 22929.5], [63.0, 22424.0], [64.0, 22733.0], [65.0, 22977.0], [67.0, 23235.5], [66.0, 22611.5], [69.0, 22168.5], [71.0, 22322.0], [68.0, 22614.0], [70.0, 20947.5], [73.0, 23057.0], [75.0, 22330.0], [74.0, 39702.0], [72.0, 21986.0], [78.0, 37690.0], [79.0, 25413.0], [76.0, 22434.0], [77.0, 23651.5], [80.0, 23723.0], [81.0, 22287.5], [82.0, 40899.5], [83.0, 22391.0], [85.0, 23429.0], [87.0, 22391.0], [86.0, 25629.0], [84.0, 22605.5], [91.0, 23267.0], [90.0, 23241.5], [89.0, 22793.5], [88.0, 22373.0], [93.0, 22770.5], [92.0, 32768.5], [95.0, 22947.0], [94.0, 23739.5], [99.0, 22838.0], [97.0, 36011.5], [98.0, 20933.0], [96.0, 22178.0], [103.0, 22766.0], [101.0, 23816.0], [102.0, 47618.0], [107.0, 21360.5], [106.0, 23692.0], [111.0, 29735.0], [109.0, 20539.0], [110.0, 39707.0], [112.0, 31804.5], [114.0, 22168.0], [119.0, 36820.0], [117.0, 30647.0], [121.0, 39208.0], [126.0, 36775.0], [124.0, 19837.5], [132.0, 21510.0], [1.0, 25809.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 132.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 19836.0, "minX": 1.0, "maxY": 47616.0, "series": [{"data": [[2.0, 25560.0], [3.0, 30978.5], [4.0, 25766.0], [5.0, 28745.0], [6.0, 31476.5], [7.0, 31855.0], [8.0, 29290.5], [9.0, 26336.0], [10.0, 29021.0], [11.0, 25327.0], [12.0, 25450.5], [13.0, 32578.0], [14.0, 26666.5], [15.0, 26050.0], [16.0, 24064.0], [17.0, 23629.0], [18.0, 27146.5], [19.0, 25574.0], [20.0, 23444.5], [21.0, 25530.0], [22.0, 25407.0], [23.0, 23802.0], [24.0, 23424.5], [25.0, 23600.5], [26.0, 25051.0], [27.0, 23303.0], [28.0, 23858.0], [29.0, 23432.0], [30.0, 24545.5], [31.0, 23010.0], [33.0, 23170.5], [32.0, 25110.0], [34.0, 23983.0], [35.0, 22998.0], [37.0, 23099.0], [36.0, 24076.0], [38.0, 24188.5], [39.0, 23931.5], [40.0, 23776.0], [41.0, 23832.0], [42.0, 23638.0], [43.0, 23423.0], [45.0, 23569.0], [44.0, 23136.0], [46.0, 23324.5], [47.0, 23474.0], [49.0, 23223.0], [48.0, 23606.5], [50.0, 22977.0], [51.0, 22652.0], [52.0, 22936.0], [53.0, 23351.0], [55.0, 23349.0], [54.0, 22422.5], [57.0, 23145.5], [56.0, 22917.5], [58.0, 23458.0], [59.0, 22489.5], [61.0, 22704.5], [60.0, 22356.5], [62.0, 22926.5], [63.0, 22422.0], [64.0, 22731.0], [65.0, 22975.0], [67.0, 23232.0], [66.0, 22609.0], [69.0, 22166.5], [71.0, 22320.0], [68.0, 22611.5], [70.0, 20943.5], [73.0, 23055.0], [75.0, 22327.0], [74.0, 39699.5], [72.0, 21983.0], [78.0, 37687.5], [79.0, 25409.0], [76.0, 22431.0], [77.0, 23646.5], [80.0, 23720.5], [81.0, 22285.5], [82.0, 40897.0], [83.0, 22388.0], [85.0, 23426.0], [87.0, 22389.0], [86.0, 25626.5], [84.0, 22602.5], [91.0, 23264.5], [90.0, 23239.5], [89.0, 22791.5], [88.0, 22370.0], [93.0, 22766.5], [92.0, 32766.0], [95.0, 22944.0], [94.0, 23736.5], [99.0, 22835.5], [97.0, 36008.0], [98.0, 20931.0], [96.0, 22176.0], [103.0, 22763.5], [101.0, 23811.0], [102.0, 47616.0], [107.0, 21358.5], [106.0, 23690.0], [111.0, 29732.5], [109.0, 20537.0], [110.0, 39704.5], [112.0, 31799.5], [114.0, 22163.5], [119.0, 36816.0], [117.0, 30645.0], [121.0, 39206.0], [126.0, 36772.0], [124.0, 19836.0], [132.0, 21507.5], [1.0, 25808.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 132.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.35, "minX": 1.66057938E12, "maxY": 25.0, "series": [{"data": [[1.66058448E12, 12.9], [1.66058046E12, 13.0], [1.66057944E12, 16.666666666666668], [1.66058268E12, 24.966666666666665], [1.66058388E12, 11.916666666666666], [1.66058106E12, 16.483333333333334], [1.66058328E12, 23.816666666666666], [1.66058004E12, 24.983333333333334], [1.66058166E12, 16.866666666666667], [1.6605849E12, 14.366666666666667], [1.66058226E12, 16.666666666666668], [1.66058064E12, 17.6], [1.6605843E12, 24.883333333333333], [1.66058124E12, 14.883333333333333], [1.66058286E12, 11.05], [1.66058466E12, 16.75], [1.66058346E12, 13.816666666666666], [1.66057962E12, 20.483333333333334], [1.66058184E12, 16.65], [1.66058406E12, 17.933333333333334], [1.66058022E12, 13.133333333333333], [1.66058244E12, 17.216666666666665], [1.66058508E12, 17.183333333333334], [1.66058082E12, 10.333333333333334], [1.66058304E12, 20.6], [1.66058334E12, 11.05], [1.6605795E12, 17.066666666666666], [1.66058172E12, 16.633333333333333], [1.6605801E12, 16.633333333333333], [1.66058232E12, 16.633333333333333], [1.66058454E12, 17.233333333333334], [1.66058394E12, 17.316666666666666], [1.6605807E12, 16.283333333333335], [1.66058292E12, 22.45], [1.66057968E12, 16.75], [1.6605813E12, 18.583333333333332], [1.66058352E12, 14.55], [1.66058028E12, 24.966666666666665], [1.6605819E12, 16.666666666666668], [1.6605837E12, 19.433333333333334], [1.6605825E12, 16.666666666666668], [1.66058088E12, 23.733333333333334], [1.66058472E12, 16.616666666666667], [1.66058148E12, 14.05], [1.6605831E12, 13.0], [1.66058412E12, 15.316666666666666], [1.66057986E12, 11.533333333333333], [1.66058208E12, 16.666666666666668], [1.66058238E12, 16.15], [1.66058076E12, 23.0], [1.66058418E12, 22.166666666666668], [1.66058136E12, 18.533333333333335], [1.66058298E12, 16.233333333333334], [1.66058358E12, 18.716666666666665], [1.66057974E12, 16.666666666666668], [1.66058196E12, 16.666666666666668], [1.6605846E12, 16.133333333333333], [1.66058034E12, 9.6], [1.66058256E12, 20.233333333333334], [1.66058496E12, 17.4], [1.66058094E12, 10.4], [1.66058316E12, 22.633333333333333], [1.66057992E12, 25.0], [1.66058436E12, 16.266666666666666], [1.66058154E12, 19.283333333333335], [1.66058052E12, 20.333333333333332], [1.66058214E12, 16.666666666666668], [1.66058376E12, 13.766666666666667], [1.66058112E12, 16.483333333333334], [1.66058274E12, 8.55], [1.66058478E12, 16.6], [1.6605798E12, 21.8], [1.66058142E12, 23.0], [1.66058364E12, 15.083333333333334], [1.6605804E12, 23.766666666666666], [1.66058202E12, 16.666666666666668], [1.66058484E12, 18.966666666666665], [1.66058262E12, 13.1], [1.66058424E12, 11.366666666666667], [1.66057938E12, 25.0], [1.660581E12, 24.2], [1.66058322E12, 11.55], [1.6605816E12, 16.5], [1.660584E12, 16.016666666666666], [1.66057998E12, 8.35], [1.6605822E12, 16.666666666666668], [1.66058058E12, 16.116666666666667], [1.6605828E12, 24.816666666666666], [1.66058502E12, 15.416666666666666], [1.66057956E12, 20.7], [1.66058442E12, 20.833333333333332], [1.66058118E12, 17.033333333333335], [1.6605834E12, 19.516666666666666], [1.66058016E12, 20.233333333333334], [1.66058178E12, 16.683333333333334], [1.66058382E12, 20.816666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66058508E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.66057938E12, "maxY": 25.0, "series": [{"data": [[1.66058046E12, 13.0], [1.66057944E12, 16.666666666666668], [1.66058268E12, 24.966666666666665], [1.66058388E12, 11.916666666666666], [1.66058166E12, 16.866666666666667], [1.6605849E12, 14.366666666666667], [1.66058064E12, 17.583333333333332], [1.66058286E12, 11.05], [1.66057962E12, 20.483333333333334], [1.66058184E12, 16.65], [1.66058406E12, 17.933333333333334], [1.66058508E12, 17.183333333333334], [1.66058082E12, 10.333333333333334], [1.66058304E12, 20.6], [1.66058334E12, 11.05], [1.6605801E12, 16.633333333333333], [1.66058232E12, 16.633333333333333], [1.66058454E12, 17.233333333333334], [1.6605813E12, 18.583333333333332], [1.66058352E12, 14.55], [1.66058028E12, 24.966666666666665], [1.6605837E12, 19.433333333333334], [1.6605825E12, 16.666666666666668], [1.66058472E12, 16.616666666666667], [1.66058148E12, 14.05], [1.66058238E12, 16.15], [1.66058136E12, 18.533333333333335], [1.66058358E12, 18.716666666666665], [1.6605846E12, 16.133333333333333], [1.66058034E12, 9.6], [1.66058256E12, 20.233333333333334], [1.66058496E12, 17.4], [1.66058154E12, 19.283333333333335], [1.66058052E12, 20.333333333333332], [1.66058376E12, 13.766666666666667], [1.66058274E12, 8.55], [1.66058478E12, 16.6], [1.6605798E12, 21.8], [1.66058202E12, 16.666666666666668], [1.66058424E12, 11.366666666666667], [1.660581E12, 24.2], [1.66058322E12, 11.55], [1.66057998E12, 8.35], [1.6605822E12, 16.666666666666668], [1.66058442E12, 20.833333333333332], [1.66058118E12, 17.033333333333335], [1.6605834E12, 19.516666666666666], [1.66058016E12, 20.233333333333334], [1.66058448E12, 12.9], [1.66058106E12, 16.483333333333334], [1.66058328E12, 23.816666666666666], [1.66058004E12, 24.983333333333334], [1.66058226E12, 16.666666666666668], [1.6605843E12, 24.883333333333333], [1.66058124E12, 14.883333333333333], [1.66058466E12, 16.75], [1.66058346E12, 13.816666666666666], [1.66058022E12, 13.133333333333333], [1.66058244E12, 17.216666666666665], [1.6605795E12, 17.066666666666666], [1.66058172E12, 16.633333333333333], [1.66058514E12, 8.333333333333334], [1.66058394E12, 17.333333333333332], [1.6605807E12, 16.3], [1.66058292E12, 22.45], [1.66057968E12, 16.75], [1.6605819E12, 16.666666666666668], [1.66058088E12, 23.733333333333334], [1.6605831E12, 13.0], [1.66058412E12, 15.316666666666666], [1.66057986E12, 11.533333333333333], [1.66058208E12, 16.666666666666668], [1.66058076E12, 23.0], [1.66058418E12, 22.166666666666668], [1.66058298E12, 16.233333333333334], [1.66057974E12, 16.666666666666668], [1.66058196E12, 16.666666666666668], [1.66058094E12, 10.4], [1.66058316E12, 22.633333333333333], [1.66057992E12, 25.0], [1.66058436E12, 16.266666666666666], [1.66058214E12, 16.666666666666668], [1.66058112E12, 16.483333333333334], [1.66058142E12, 23.0], [1.66058364E12, 15.083333333333334], [1.6605804E12, 23.766666666666666], [1.66058484E12, 18.966666666666665], [1.66058262E12, 13.1], [1.66057938E12, 16.666666666666668], [1.6605816E12, 16.5], [1.660584E12, 16.0], [1.66058058E12, 16.116666666666667], [1.6605828E12, 24.816666666666666], [1.66058502E12, 15.416666666666666], [1.66057956E12, 20.7], [1.66058178E12, 16.683333333333334], [1.66058382E12, 20.816666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66058514E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.66057938E12, "maxY": 25.0, "series": [{"data": [[1.66058046E12, 13.0], [1.66057944E12, 16.666666666666668], [1.66058268E12, 24.966666666666665], [1.66058388E12, 11.916666666666666], [1.66058166E12, 16.866666666666667], [1.6605849E12, 14.366666666666667], [1.66058064E12, 17.583333333333332], [1.66058286E12, 11.05], [1.66057962E12, 20.483333333333334], [1.66058184E12, 16.65], [1.66058406E12, 17.933333333333334], [1.66058508E12, 17.183333333333334], [1.66058082E12, 10.333333333333334], [1.66058304E12, 20.6], [1.66058334E12, 11.05], [1.6605801E12, 16.633333333333333], [1.66058232E12, 16.633333333333333], [1.66058454E12, 17.233333333333334], [1.6605813E12, 18.583333333333332], [1.66058352E12, 14.55], [1.66058028E12, 24.966666666666665], [1.6605837E12, 19.433333333333334], [1.6605825E12, 16.666666666666668], [1.66058472E12, 16.616666666666667], [1.66058148E12, 14.05], [1.66058238E12, 16.15], [1.66058136E12, 18.533333333333335], [1.66058358E12, 18.716666666666665], [1.6605846E12, 16.133333333333333], [1.66058034E12, 9.6], [1.66058256E12, 20.233333333333334], [1.66058496E12, 17.4], [1.66058154E12, 19.283333333333335], [1.66058052E12, 20.333333333333332], [1.66058376E12, 13.766666666666667], [1.66058274E12, 8.55], [1.66058478E12, 16.6], [1.6605798E12, 21.8], [1.66058202E12, 16.666666666666668], [1.66058424E12, 11.366666666666667], [1.660581E12, 24.2], [1.66058322E12, 11.55], [1.66057998E12, 8.35], [1.6605822E12, 16.666666666666668], [1.66058442E12, 20.833333333333332], [1.66058118E12, 17.033333333333335], [1.6605834E12, 19.516666666666666], [1.66058016E12, 20.233333333333334], [1.66058448E12, 12.9], [1.66058106E12, 16.483333333333334], [1.66058328E12, 23.816666666666666], [1.66058004E12, 24.983333333333334], [1.66058226E12, 16.666666666666668], [1.6605843E12, 24.883333333333333], [1.66058124E12, 14.883333333333333], [1.66058466E12, 16.75], [1.66058346E12, 13.816666666666666], [1.66058022E12, 13.133333333333333], [1.66058244E12, 17.216666666666665], [1.6605795E12, 17.066666666666666], [1.66058172E12, 16.633333333333333], [1.66058514E12, 8.333333333333334], [1.66058394E12, 17.333333333333332], [1.6605807E12, 16.3], [1.66058292E12, 22.45], [1.66057968E12, 16.75], [1.6605819E12, 16.666666666666668], [1.66058088E12, 23.733333333333334], [1.6605831E12, 13.0], [1.66058412E12, 15.316666666666666], [1.66057986E12, 11.533333333333333], [1.66058208E12, 16.666666666666668], [1.66058076E12, 23.0], [1.66058418E12, 22.166666666666668], [1.66058298E12, 16.233333333333334], [1.66057974E12, 16.666666666666668], [1.66058196E12, 16.666666666666668], [1.66058094E12, 10.4], [1.66058316E12, 22.633333333333333], [1.66057992E12, 25.0], [1.66058436E12, 16.266666666666666], [1.66058214E12, 16.666666666666668], [1.66058112E12, 16.483333333333334], [1.66058142E12, 23.0], [1.66058364E12, 15.083333333333334], [1.6605804E12, 23.766666666666666], [1.66058484E12, 18.966666666666665], [1.66058262E12, 13.1], [1.66057938E12, 16.666666666666668], [1.6605816E12, 16.5], [1.660584E12, 16.0], [1.66058058E12, 16.116666666666667], [1.6605828E12, 24.816666666666666], [1.66058502E12, 15.416666666666666], [1.66057956E12, 20.7], [1.66058178E12, 16.683333333333334], [1.66058382E12, 20.816666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66058514E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.66057938E12, "maxY": 25.0, "series": [{"data": [[1.66058046E12, 13.0], [1.66057944E12, 16.666666666666668], [1.66058268E12, 24.966666666666665], [1.66058388E12, 11.916666666666666], [1.66058166E12, 16.866666666666667], [1.6605849E12, 14.366666666666667], [1.66058064E12, 17.583333333333332], [1.66058286E12, 11.05], [1.66057962E12, 20.483333333333334], [1.66058184E12, 16.65], [1.66058406E12, 17.933333333333334], [1.66058508E12, 17.183333333333334], [1.66058082E12, 10.333333333333334], [1.66058304E12, 20.6], [1.66058334E12, 11.05], [1.6605801E12, 16.633333333333333], [1.66058232E12, 16.633333333333333], [1.66058454E12, 17.233333333333334], [1.6605813E12, 18.583333333333332], [1.66058352E12, 14.55], [1.66058028E12, 24.966666666666665], [1.6605837E12, 19.433333333333334], [1.6605825E12, 16.666666666666668], [1.66058472E12, 16.616666666666667], [1.66058148E12, 14.05], [1.66058238E12, 16.15], [1.66058136E12, 18.533333333333335], [1.66058358E12, 18.716666666666665], [1.6605846E12, 16.133333333333333], [1.66058034E12, 9.6], [1.66058256E12, 20.233333333333334], [1.66058496E12, 17.4], [1.66058154E12, 19.283333333333335], [1.66058052E12, 20.333333333333332], [1.66058376E12, 13.766666666666667], [1.66058274E12, 8.55], [1.66058478E12, 16.6], [1.6605798E12, 21.8], [1.66058202E12, 16.666666666666668], [1.66058424E12, 11.366666666666667], [1.660581E12, 24.2], [1.66058322E12, 11.55], [1.66057998E12, 8.35], [1.6605822E12, 16.666666666666668], [1.66058442E12, 20.833333333333332], [1.66058118E12, 17.033333333333335], [1.6605834E12, 19.516666666666666], [1.66058016E12, 20.233333333333334], [1.66058448E12, 12.9], [1.66058106E12, 16.483333333333334], [1.66058328E12, 23.816666666666666], [1.66058004E12, 24.983333333333334], [1.66058226E12, 16.666666666666668], [1.6605843E12, 24.883333333333333], [1.66058124E12, 14.883333333333333], [1.66058466E12, 16.75], [1.66058346E12, 13.816666666666666], [1.66058022E12, 13.133333333333333], [1.66058244E12, 17.216666666666665], [1.6605795E12, 17.066666666666666], [1.66058172E12, 16.633333333333333], [1.66058514E12, 8.333333333333334], [1.66058394E12, 17.333333333333332], [1.6605807E12, 16.3], [1.66058292E12, 22.45], [1.66057968E12, 16.75], [1.6605819E12, 16.666666666666668], [1.66058088E12, 23.733333333333334], [1.6605831E12, 13.0], [1.66058412E12, 15.316666666666666], [1.66057986E12, 11.533333333333333], [1.66058208E12, 16.666666666666668], [1.66058076E12, 23.0], [1.66058418E12, 22.166666666666668], [1.66058298E12, 16.233333333333334], [1.66057974E12, 16.666666666666668], [1.66058196E12, 16.666666666666668], [1.66058094E12, 10.4], [1.66058316E12, 22.633333333333333], [1.66057992E12, 25.0], [1.66058436E12, 16.266666666666666], [1.66058214E12, 16.666666666666668], [1.66058112E12, 16.483333333333334], [1.66058142E12, 23.0], [1.66058364E12, 15.083333333333334], [1.6605804E12, 23.766666666666666], [1.66058484E12, 18.966666666666665], [1.66058262E12, 13.1], [1.66057938E12, 16.666666666666668], [1.6605816E12, 16.5], [1.660584E12, 16.0], [1.66058058E12, 16.116666666666667], [1.6605828E12, 24.816666666666666], [1.66058502E12, 15.416666666666666], [1.66057956E12, 20.7], [1.66058178E12, 16.683333333333334], [1.66058382E12, 20.816666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66058514E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

