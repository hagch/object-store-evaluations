/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 3253.0, "series": [{"data": [[0.0, 9.0], [0.1, 92.0], [0.2, 159.0], [0.3, 200.0], [0.4, 235.0], [0.5, 287.0], [0.6, 311.0], [0.7, 345.0], [0.8, 383.0], [0.9, 404.0], [1.0, 433.0], [1.1, 454.0], [1.2, 464.0], [1.3, 472.0], [1.4, 475.0], [1.5, 477.0], [1.6, 482.0], [1.7, 507.0], [1.8, 518.0], [1.9, 526.0], [2.0, 543.0], [2.1, 558.0], [2.2, 566.0], [2.3, 567.0], [2.4, 569.0], [2.5, 570.0], [2.6, 571.0], [2.7, 572.0], [2.8, 574.0], [2.9, 575.0], [3.0, 578.0], [3.1, 596.0], [3.2, 609.0], [3.3, 613.0], [3.4, 615.0], [3.5, 616.0], [3.6, 617.0], [3.7, 617.0], [3.8, 618.0], [3.9, 619.0], [4.0, 619.0], [4.1, 619.0], [4.2, 620.0], [4.3, 620.0], [4.4, 620.0], [4.5, 620.0], [4.6, 621.0], [4.7, 621.0], [4.8, 621.0], [4.9, 621.0], [5.0, 622.0], [5.1, 622.0], [5.2, 622.0], [5.3, 622.0], [5.4, 622.0], [5.5, 623.0], [5.6, 623.0], [5.7, 623.0], [5.8, 623.0], [5.9, 623.0], [6.0, 624.0], [6.1, 624.0], [6.2, 624.0], [6.3, 624.0], [6.4, 624.0], [6.5, 624.0], [6.6, 625.0], [6.7, 625.0], [6.8, 625.0], [6.9, 625.0], [7.0, 625.0], [7.1, 625.0], [7.2, 625.0], [7.3, 626.0], [7.4, 626.0], [7.5, 626.0], [7.6, 626.0], [7.7, 626.0], [7.8, 626.0], [7.9, 626.0], [8.0, 627.0], [8.1, 627.0], [8.2, 627.0], [8.3, 627.0], [8.4, 627.0], [8.5, 627.0], [8.6, 627.0], [8.7, 628.0], [8.8, 628.0], [8.9, 628.0], [9.0, 628.0], [9.1, 628.0], [9.2, 628.0], [9.3, 628.0], [9.4, 628.0], [9.5, 629.0], [9.6, 629.0], [9.7, 629.0], [9.8, 629.0], [9.9, 629.0], [10.0, 629.0], [10.1, 629.0], [10.2, 629.0], [10.3, 629.0], [10.4, 630.0], [10.5, 630.0], [10.6, 630.0], [10.7, 630.0], [10.8, 630.0], [10.9, 630.0], [11.0, 630.0], [11.1, 630.0], [11.2, 630.0], [11.3, 630.0], [11.4, 630.0], [11.5, 631.0], [11.6, 631.0], [11.7, 631.0], [11.8, 631.0], [11.9, 631.0], [12.0, 631.0], [12.1, 631.0], [12.2, 631.0], [12.3, 631.0], [12.4, 631.0], [12.5, 631.0], [12.6, 632.0], [12.7, 632.0], [12.8, 632.0], [12.9, 632.0], [13.0, 632.0], [13.1, 632.0], [13.2, 632.0], [13.3, 632.0], [13.4, 632.0], [13.5, 632.0], [13.6, 633.0], [13.7, 633.0], [13.8, 633.0], [13.9, 633.0], [14.0, 633.0], [14.1, 633.0], [14.2, 633.0], [14.3, 633.0], [14.4, 634.0], [14.5, 634.0], [14.6, 634.0], [14.7, 634.0], [14.8, 634.0], [14.9, 634.0], [15.0, 634.0], [15.1, 634.0], [15.2, 635.0], [15.3, 635.0], [15.4, 635.0], [15.5, 635.0], [15.6, 635.0], [15.7, 635.0], [15.8, 635.0], [15.9, 636.0], [16.0, 636.0], [16.1, 636.0], [16.2, 636.0], [16.3, 636.0], [16.4, 636.0], [16.5, 637.0], [16.6, 637.0], [16.7, 637.0], [16.8, 637.0], [16.9, 637.0], [17.0, 638.0], [17.1, 638.0], [17.2, 638.0], [17.3, 639.0], [17.4, 639.0], [17.5, 640.0], [17.6, 640.0], [17.7, 640.0], [17.8, 641.0], [17.9, 641.0], [18.0, 641.0], [18.1, 641.0], [18.2, 642.0], [18.3, 642.0], [18.4, 642.0], [18.5, 643.0], [18.6, 643.0], [18.7, 643.0], [18.8, 643.0], [18.9, 644.0], [19.0, 644.0], [19.1, 644.0], [19.2, 645.0], [19.3, 645.0], [19.4, 645.0], [19.5, 645.0], [19.6, 646.0], [19.7, 646.0], [19.8, 646.0], [19.9, 646.0], [20.0, 647.0], [20.1, 647.0], [20.2, 647.0], [20.3, 647.0], [20.4, 647.0], [20.5, 648.0], [20.6, 648.0], [20.7, 648.0], [20.8, 648.0], [20.9, 649.0], [21.0, 649.0], [21.1, 649.0], [21.2, 650.0], [21.3, 650.0], [21.4, 650.0], [21.5, 651.0], [21.6, 651.0], [21.7, 651.0], [21.8, 652.0], [21.9, 652.0], [22.0, 652.0], [22.1, 652.0], [22.2, 653.0], [22.3, 653.0], [22.4, 653.0], [22.5, 654.0], [22.6, 654.0], [22.7, 654.0], [22.8, 655.0], [22.9, 655.0], [23.0, 656.0], [23.1, 656.0], [23.2, 656.0], [23.3, 657.0], [23.4, 657.0], [23.5, 657.0], [23.6, 658.0], [23.7, 658.0], [23.8, 658.0], [23.9, 658.0], [24.0, 659.0], [24.1, 659.0], [24.2, 659.0], [24.3, 659.0], [24.4, 660.0], [24.5, 660.0], [24.6, 660.0], [24.7, 660.0], [24.8, 661.0], [24.9, 661.0], [25.0, 661.0], [25.1, 662.0], [25.2, 662.0], [25.3, 662.0], [25.4, 663.0], [25.5, 663.0], [25.6, 663.0], [25.7, 663.0], [25.8, 664.0], [25.9, 664.0], [26.0, 664.0], [26.1, 664.0], [26.2, 665.0], [26.3, 665.0], [26.4, 665.0], [26.5, 666.0], [26.6, 666.0], [26.7, 666.0], [26.8, 666.0], [26.9, 667.0], [27.0, 667.0], [27.1, 667.0], [27.2, 667.0], [27.3, 668.0], [27.4, 668.0], [27.5, 668.0], [27.6, 668.0], [27.7, 669.0], [27.8, 669.0], [27.9, 669.0], [28.0, 669.0], [28.1, 669.0], [28.2, 669.0], [28.3, 670.0], [28.4, 670.0], [28.5, 670.0], [28.6, 670.0], [28.7, 671.0], [28.8, 671.0], [28.9, 671.0], [29.0, 671.0], [29.1, 671.0], [29.2, 672.0], [29.3, 672.0], [29.4, 672.0], [29.5, 672.0], [29.6, 672.0], [29.7, 672.0], [29.8, 673.0], [29.9, 673.0], [30.0, 673.0], [30.1, 673.0], [30.2, 673.0], [30.3, 674.0], [30.4, 674.0], [30.5, 674.0], [30.6, 674.0], [30.7, 674.0], [30.8, 675.0], [30.9, 675.0], [31.0, 675.0], [31.1, 675.0], [31.2, 675.0], [31.3, 676.0], [31.4, 676.0], [31.5, 676.0], [31.6, 676.0], [31.7, 676.0], [31.8, 676.0], [31.9, 677.0], [32.0, 677.0], [32.1, 677.0], [32.2, 677.0], [32.3, 677.0], [32.4, 677.0], [32.5, 677.0], [32.6, 678.0], [32.7, 678.0], [32.8, 678.0], [32.9, 678.0], [33.0, 678.0], [33.1, 678.0], [33.2, 679.0], [33.3, 679.0], [33.4, 679.0], [33.5, 679.0], [33.6, 679.0], [33.7, 679.0], [33.8, 680.0], [33.9, 680.0], [34.0, 680.0], [34.1, 680.0], [34.2, 680.0], [34.3, 680.0], [34.4, 681.0], [34.5, 681.0], [34.6, 681.0], [34.7, 681.0], [34.8, 681.0], [34.9, 682.0], [35.0, 682.0], [35.1, 682.0], [35.2, 682.0], [35.3, 682.0], [35.4, 683.0], [35.5, 683.0], [35.6, 683.0], [35.7, 683.0], [35.8, 683.0], [35.9, 683.0], [36.0, 684.0], [36.1, 684.0], [36.2, 684.0], [36.3, 684.0], [36.4, 684.0], [36.5, 685.0], [36.6, 685.0], [36.7, 685.0], [36.8, 685.0], [36.9, 685.0], [37.0, 686.0], [37.1, 686.0], [37.2, 686.0], [37.3, 686.0], [37.4, 686.0], [37.5, 687.0], [37.6, 687.0], [37.7, 687.0], [37.8, 687.0], [37.9, 687.0], [38.0, 688.0], [38.1, 688.0], [38.2, 688.0], [38.3, 688.0], [38.4, 688.0], [38.5, 688.0], [38.6, 689.0], [38.7, 689.0], [38.8, 689.0], [38.9, 689.0], [39.0, 689.0], [39.1, 690.0], [39.2, 690.0], [39.3, 690.0], [39.4, 690.0], [39.5, 690.0], [39.6, 691.0], [39.7, 691.0], [39.8, 691.0], [39.9, 691.0], [40.0, 691.0], [40.1, 691.0], [40.2, 692.0], [40.3, 692.0], [40.4, 692.0], [40.5, 692.0], [40.6, 692.0], [40.7, 692.0], [40.8, 692.0], [40.9, 693.0], [41.0, 693.0], [41.1, 693.0], [41.2, 693.0], [41.3, 693.0], [41.4, 693.0], [41.5, 693.0], [41.6, 693.0], [41.7, 693.0], [41.8, 693.0], [41.9, 694.0], [42.0, 694.0], [42.1, 694.0], [42.2, 694.0], [42.3, 694.0], [42.4, 694.0], [42.5, 694.0], [42.6, 694.0], [42.7, 694.0], [42.8, 694.0], [42.9, 694.0], [43.0, 695.0], [43.1, 695.0], [43.2, 695.0], [43.3, 695.0], [43.4, 695.0], [43.5, 695.0], [43.6, 695.0], [43.7, 695.0], [43.8, 695.0], [43.9, 695.0], [44.0, 695.0], [44.1, 695.0], [44.2, 695.0], [44.3, 696.0], [44.4, 696.0], [44.5, 696.0], [44.6, 696.0], [44.7, 696.0], [44.8, 696.0], [44.9, 696.0], [45.0, 696.0], [45.1, 696.0], [45.2, 696.0], [45.3, 696.0], [45.4, 696.0], [45.5, 696.0], [45.6, 697.0], [45.7, 697.0], [45.8, 697.0], [45.9, 697.0], [46.0, 697.0], [46.1, 697.0], [46.2, 697.0], [46.3, 697.0], [46.4, 697.0], [46.5, 697.0], [46.6, 697.0], [46.7, 697.0], [46.8, 697.0], [46.9, 698.0], [47.0, 698.0], [47.1, 698.0], [47.2, 698.0], [47.3, 698.0], [47.4, 698.0], [47.5, 698.0], [47.6, 698.0], [47.7, 698.0], [47.8, 698.0], [47.9, 698.0], [48.0, 698.0], [48.1, 698.0], [48.2, 699.0], [48.3, 699.0], [48.4, 699.0], [48.5, 699.0], [48.6, 699.0], [48.7, 699.0], [48.8, 699.0], [48.9, 699.0], [49.0, 699.0], [49.1, 699.0], [49.2, 699.0], [49.3, 699.0], [49.4, 699.0], [49.5, 700.0], [49.6, 700.0], [49.7, 700.0], [49.8, 700.0], [49.9, 700.0], [50.0, 700.0], [50.1, 700.0], [50.2, 700.0], [50.3, 700.0], [50.4, 700.0], [50.5, 700.0], [50.6, 700.0], [50.7, 701.0], [50.8, 701.0], [50.9, 701.0], [51.0, 701.0], [51.1, 701.0], [51.2, 701.0], [51.3, 701.0], [51.4, 701.0], [51.5, 701.0], [51.6, 701.0], [51.7, 701.0], [51.8, 701.0], [51.9, 702.0], [52.0, 702.0], [52.1, 702.0], [52.2, 702.0], [52.3, 702.0], [52.4, 702.0], [52.5, 702.0], [52.6, 702.0], [52.7, 702.0], [52.8, 702.0], [52.9, 702.0], [53.0, 703.0], [53.1, 703.0], [53.2, 703.0], [53.3, 703.0], [53.4, 703.0], [53.5, 703.0], [53.6, 703.0], [53.7, 703.0], [53.8, 703.0], [53.9, 703.0], [54.0, 704.0], [54.1, 704.0], [54.2, 704.0], [54.3, 704.0], [54.4, 704.0], [54.5, 704.0], [54.6, 704.0], [54.7, 704.0], [54.8, 704.0], [54.9, 704.0], [55.0, 704.0], [55.1, 704.0], [55.2, 705.0], [55.3, 705.0], [55.4, 705.0], [55.5, 705.0], [55.6, 705.0], [55.7, 705.0], [55.8, 705.0], [55.9, 705.0], [56.0, 705.0], [56.1, 705.0], [56.2, 705.0], [56.3, 705.0], [56.4, 705.0], [56.5, 705.0], [56.6, 705.0], [56.7, 706.0], [56.8, 706.0], [56.9, 706.0], [57.0, 706.0], [57.1, 706.0], [57.2, 706.0], [57.3, 706.0], [57.4, 706.0], [57.5, 706.0], [57.6, 706.0], [57.7, 706.0], [57.8, 706.0], [57.9, 706.0], [58.0, 706.0], [58.1, 706.0], [58.2, 706.0], [58.3, 706.0], [58.4, 707.0], [58.5, 707.0], [58.6, 707.0], [58.7, 707.0], [58.8, 707.0], [58.9, 707.0], [59.0, 707.0], [59.1, 707.0], [59.2, 707.0], [59.3, 707.0], [59.4, 707.0], [59.5, 707.0], [59.6, 707.0], [59.7, 707.0], [59.8, 707.0], [59.9, 707.0], [60.0, 707.0], [60.1, 707.0], [60.2, 707.0], [60.3, 708.0], [60.4, 708.0], [60.5, 708.0], [60.6, 708.0], [60.7, 708.0], [60.8, 708.0], [60.9, 708.0], [61.0, 708.0], [61.1, 708.0], [61.2, 708.0], [61.3, 708.0], [61.4, 708.0], [61.5, 708.0], [61.6, 708.0], [61.7, 708.0], [61.8, 708.0], [61.9, 708.0], [62.0, 709.0], [62.1, 709.0], [62.2, 709.0], [62.3, 709.0], [62.4, 709.0], [62.5, 709.0], [62.6, 709.0], [62.7, 709.0], [62.8, 709.0], [62.9, 709.0], [63.0, 709.0], [63.1, 709.0], [63.2, 709.0], [63.3, 709.0], [63.4, 709.0], [63.5, 709.0], [63.6, 710.0], [63.7, 710.0], [63.8, 710.0], [63.9, 710.0], [64.0, 710.0], [64.1, 710.0], [64.2, 710.0], [64.3, 710.0], [64.4, 710.0], [64.5, 710.0], [64.6, 710.0], [64.7, 710.0], [64.8, 710.0], [64.9, 711.0], [65.0, 711.0], [65.1, 711.0], [65.2, 711.0], [65.3, 711.0], [65.4, 711.0], [65.5, 711.0], [65.6, 711.0], [65.7, 711.0], [65.8, 711.0], [65.9, 711.0], [66.0, 712.0], [66.1, 712.0], [66.2, 712.0], [66.3, 712.0], [66.4, 712.0], [66.5, 712.0], [66.6, 712.0], [66.7, 712.0], [66.8, 713.0], [66.9, 713.0], [67.0, 713.0], [67.1, 713.0], [67.2, 713.0], [67.3, 713.0], [67.4, 713.0], [67.5, 714.0], [67.6, 714.0], [67.7, 714.0], [67.8, 714.0], [67.9, 714.0], [68.0, 714.0], [68.1, 714.0], [68.2, 714.0], [68.3, 715.0], [68.4, 715.0], [68.5, 715.0], [68.6, 715.0], [68.7, 715.0], [68.8, 715.0], [68.9, 715.0], [69.0, 716.0], [69.1, 716.0], [69.2, 716.0], [69.3, 716.0], [69.4, 716.0], [69.5, 716.0], [69.6, 716.0], [69.7, 717.0], [69.8, 717.0], [69.9, 717.0], [70.0, 717.0], [70.1, 717.0], [70.2, 717.0], [70.3, 717.0], [70.4, 717.0], [70.5, 718.0], [70.6, 718.0], [70.7, 718.0], [70.8, 718.0], [70.9, 718.0], [71.0, 718.0], [71.1, 719.0], [71.2, 719.0], [71.3, 719.0], [71.4, 719.0], [71.5, 719.0], [71.6, 719.0], [71.7, 719.0], [71.8, 720.0], [71.9, 720.0], [72.0, 720.0], [72.1, 720.0], [72.2, 720.0], [72.3, 720.0], [72.4, 720.0], [72.5, 720.0], [72.6, 721.0], [72.7, 721.0], [72.8, 721.0], [72.9, 721.0], [73.0, 721.0], [73.1, 721.0], [73.2, 722.0], [73.3, 722.0], [73.4, 722.0], [73.5, 722.0], [73.6, 722.0], [73.7, 722.0], [73.8, 723.0], [73.9, 723.0], [74.0, 723.0], [74.1, 723.0], [74.2, 723.0], [74.3, 723.0], [74.4, 724.0], [74.5, 724.0], [74.6, 724.0], [74.7, 724.0], [74.8, 724.0], [74.9, 725.0], [75.0, 725.0], [75.1, 725.0], [75.2, 725.0], [75.3, 726.0], [75.4, 726.0], [75.5, 726.0], [75.6, 726.0], [75.7, 727.0], [75.8, 727.0], [75.9, 727.0], [76.0, 727.0], [76.1, 728.0], [76.2, 728.0], [76.3, 728.0], [76.4, 729.0], [76.5, 729.0], [76.6, 729.0], [76.7, 730.0], [76.8, 730.0], [76.9, 730.0], [77.0, 730.0], [77.1, 731.0], [77.2, 731.0], [77.3, 731.0], [77.4, 732.0], [77.5, 732.0], [77.6, 732.0], [77.7, 733.0], [77.8, 733.0], [77.9, 733.0], [78.0, 734.0], [78.1, 734.0], [78.2, 734.0], [78.3, 734.0], [78.4, 735.0], [78.5, 735.0], [78.6, 736.0], [78.7, 736.0], [78.8, 736.0], [78.9, 737.0], [79.0, 737.0], [79.1, 737.0], [79.2, 738.0], [79.3, 738.0], [79.4, 738.0], [79.5, 739.0], [79.6, 739.0], [79.7, 740.0], [79.8, 740.0], [79.9, 740.0], [80.0, 741.0], [80.1, 741.0], [80.2, 742.0], [80.3, 742.0], [80.4, 743.0], [80.5, 743.0], [80.6, 744.0], [80.7, 744.0], [80.8, 745.0], [80.9, 745.0], [81.0, 746.0], [81.1, 746.0], [81.2, 747.0], [81.3, 748.0], [81.4, 748.0], [81.5, 749.0], [81.6, 749.0], [81.7, 750.0], [81.8, 750.0], [81.9, 750.0], [82.0, 751.0], [82.1, 751.0], [82.2, 752.0], [82.3, 752.0], [82.4, 753.0], [82.5, 754.0], [82.6, 754.0], [82.7, 754.0], [82.8, 755.0], [82.9, 755.0], [83.0, 756.0], [83.1, 756.0], [83.2, 756.0], [83.3, 757.0], [83.4, 757.0], [83.5, 758.0], [83.6, 758.0], [83.7, 758.0], [83.8, 759.0], [83.9, 760.0], [84.0, 760.0], [84.1, 761.0], [84.2, 761.0], [84.3, 762.0], [84.4, 762.0], [84.5, 763.0], [84.6, 764.0], [84.7, 764.0], [84.8, 765.0], [84.9, 765.0], [85.0, 766.0], [85.1, 767.0], [85.2, 767.0], [85.3, 768.0], [85.4, 768.0], [85.5, 769.0], [85.6, 769.0], [85.7, 770.0], [85.8, 771.0], [85.9, 771.0], [86.0, 772.0], [86.1, 772.0], [86.2, 773.0], [86.3, 773.0], [86.4, 774.0], [86.5, 774.0], [86.6, 775.0], [86.7, 775.0], [86.8, 776.0], [86.9, 776.0], [87.0, 777.0], [87.1, 777.0], [87.2, 778.0], [87.3, 778.0], [87.4, 779.0], [87.5, 779.0], [87.6, 780.0], [87.7, 780.0], [87.8, 781.0], [87.9, 782.0], [88.0, 782.0], [88.1, 783.0], [88.2, 784.0], [88.3, 784.0], [88.4, 785.0], [88.5, 785.0], [88.6, 786.0], [88.7, 786.0], [88.8, 787.0], [88.9, 787.0], [89.0, 787.0], [89.1, 788.0], [89.2, 788.0], [89.3, 789.0], [89.4, 789.0], [89.5, 790.0], [89.6, 790.0], [89.7, 791.0], [89.8, 791.0], [89.9, 792.0], [90.0, 792.0], [90.1, 793.0], [90.2, 793.0], [90.3, 794.0], [90.4, 795.0], [90.5, 796.0], [90.6, 797.0], [90.7, 800.0], [90.8, 802.0], [90.9, 804.0], [91.0, 805.0], [91.1, 806.0], [91.2, 808.0], [91.3, 809.0], [91.4, 810.0], [91.5, 812.0], [91.6, 813.0], [91.7, 815.0], [91.8, 818.0], [91.9, 822.0], [92.0, 828.0], [92.1, 833.0], [92.2, 840.0], [92.3, 842.0], [92.4, 845.0], [92.5, 849.0], [92.6, 850.0], [92.7, 851.0], [92.8, 852.0], [92.9, 853.0], [93.0, 855.0], [93.1, 857.0], [93.2, 858.0], [93.3, 859.0], [93.4, 860.0], [93.5, 862.0], [93.6, 865.0], [93.7, 869.0], [93.8, 875.0], [93.9, 879.0], [94.0, 882.0], [94.1, 885.0], [94.2, 892.0], [94.3, 900.0], [94.4, 906.0], [94.5, 908.0], [94.6, 912.0], [94.7, 914.0], [94.8, 915.0], [94.9, 916.0], [95.0, 916.0], [95.1, 917.0], [95.2, 918.0], [95.3, 919.0], [95.4, 919.0], [95.5, 920.0], [95.6, 922.0], [95.7, 930.0], [95.8, 937.0], [95.9, 951.0], [96.0, 965.0], [96.1, 994.0], [96.2, 1027.0], [96.3, 1055.0], [96.4, 1090.0], [96.5, 1129.0], [96.6, 1165.0], [96.7, 1194.0], [96.8, 1205.0], [96.9, 1210.0], [97.0, 1215.0], [97.1, 1220.0], [97.2, 1225.0], [97.3, 1237.0], [97.4, 1256.0], [97.5, 1270.0], [97.6, 1277.0], [97.7, 1280.0], [97.8, 1282.0], [97.9, 1288.0], [98.0, 1308.0], [98.1, 1353.0], [98.2, 1450.0], [98.3, 1585.0], [98.4, 1800.0], [98.5, 2046.0], [98.6, 2283.0], [98.7, 2489.0], [98.8, 2654.0], [98.9, 2810.0], [99.0, 2949.0], [99.1, 3062.0], [99.2, 3151.0], [99.3, 3165.0], [99.4, 3180.0], [99.5, 3190.0], [99.6, 3199.0], [99.7, 3212.0], [99.8, 3220.0], [99.9, 3231.0], [100.0, 3253.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 75.0, "minX": 0.0, "maxY": 92599.0, "series": [{"data": [[0.0, 253.0], [600.0, 92599.0], [700.0, 82556.0], [800.0, 7202.0], [900.0, 3631.0], [1000.0, 630.0], [1100.0, 598.0], [1200.0, 2459.0], [1300.0, 413.0], [1400.0, 161.0], [1500.0, 128.0], [100.0, 338.0], [1600.0, 96.0], [1700.0, 88.0], [1800.0, 91.0], [1900.0, 75.0], [2000.0, 82.0], [2100.0, 89.0], [2200.0, 78.0], [2300.0, 97.0], [2400.0, 99.0], [2500.0, 123.0], [2600.0, 122.0], [2700.0, 134.0], [2800.0, 139.0], [2900.0, 153.0], [3000.0, 208.0], [3100.0, 926.0], [200.0, 496.0], [3200.0, 785.0], [300.0, 654.0], [400.0, 1612.0], [500.0, 2885.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3354.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 193134.0, "series": [{"data": [[0.0, 3354.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 193134.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3512.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 951.3386494252843, "minX": 1.66155756E12, "maxY": 1000.0, "series": [{"data": [[1.66155762E12, 1000.0], [1.66155768E12, 951.3386494252843], [1.66155756E12, 984.2429098897575]], "isOverall": false, "label": "Thread Group Object Store Delete Object by Type id ", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66155768E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 56.79999999999999, "minX": 1.0, "maxY": 1204.8750000000002, "series": [{"data": [[3.0, 177.0], [5.0, 187.0], [7.0, 180.0], [11.0, 104.5], [12.0, 184.5], [13.0, 82.55555555555556], [14.0, 62.75], [15.0, 190.0], [16.0, 62.75], [17.0, 191.0], [18.0, 191.0], [19.0, 189.0], [20.0, 82.5], [21.0, 59.0], [22.0, 189.0], [23.0, 192.0], [24.0, 192.0], [25.0, 89.25], [26.0, 72.44444444444446], [28.0, 90.71428571428571], [29.0, 191.0], [30.0, 102.0], [31.0, 59.72727272727273], [33.0, 193.0], [34.0, 79.54545454545455], [35.0, 56.79999999999999], [36.0, 119.75], [37.0, 68.25], [39.0, 195.0], [38.0, 193.0], [40.0, 100.33333333333334], [41.0, 62.666666666666664], [42.0, 193.5], [44.0, 101.57142857142858], [45.0, 131.0], [46.0, 72.5], [47.0, 123.0], [48.0, 97.6], [49.0, 75.39999999999999], [50.0, 158.33333333333334], [51.0, 73.2], [53.0, 80.0], [52.0, 200.0], [55.0, 199.0], [54.0, 198.0], [56.0, 137.0], [57.0, 137.5], [58.0, 79.0], [59.0, 141.0], [61.0, 200.0], [60.0, 202.5], [62.0, 88.0], [63.0, 123.83333333333334], [67.0, 207.0], [66.0, 203.0], [65.0, 202.0], [64.0, 201.0], [69.0, 118.0], [70.0, 129.33333333333334], [71.0, 206.0], [72.0, 98.18749999999999], [73.0, 92.6], [74.0, 138.2], [75.0, 116.6], [76.0, 123.0], [77.0, 102.75], [78.0, 90.33333333333333], [79.0, 210.5], [80.0, 113.33333333333333], [81.0, 88.87500000000001], [83.0, 140.85714285714286], [84.0, 84.66666666666667], [85.0, 110.8], [87.0, 111.0], [88.0, 86.53333333333335], [90.0, 110.5], [89.0, 217.66666666666666], [92.0, 180.66666666666666], [93.0, 112.85714285714286], [94.0, 159.0], [95.0, 93.8], [98.0, 129.75], [97.0, 224.0], [100.0, 182.66666666666666], [101.0, 130.0], [103.0, 99.5], [104.0, 123.93749999999999], [107.0, 234.66666666666666], [110.0, 232.33333333333334], [112.0, 196.0], [113.0, 158.0], [115.0, 121.0], [114.0, 239.0], [117.0, 124.0], [118.0, 183.0], [119.0, 160.42857142857142], [116.0, 241.0], [122.0, 207.0], [123.0, 154.4], [120.0, 245.0], [124.0, 148.57142857142856], [125.0, 168.0], [126.0, 143.0], [127.0, 246.5], [129.0, 213.0], [130.0, 131.0], [131.0, 195.25], [132.0, 190.0], [133.0, 137.83333333333334], [134.0, 140.6], [135.0, 202.16666666666669], [136.0, 150.5], [137.0, 146.33333333333334], [138.0, 200.66666666666666], [139.0, 188.33333333333334], [140.0, 150.2], [141.0, 226.33333333333334], [142.0, 191.33333333333334], [143.0, 159.11764705882354], [144.0, 193.0], [145.0, 188.66666666666666], [147.0, 155.72727272727272], [149.0, 152.78571428571428], [150.0, 223.0], [151.0, 178.33333333333334], [148.0, 274.0], [146.0, 266.0], [152.0, 137.0], [153.0, 228.66666666666666], [154.0, 145.5], [155.0, 144.6], [156.0, 196.42857142857144], [157.0, 183.66666666666666], [159.0, 207.5], [158.0, 272.0], [160.0, 208.5], [162.0, 142.5], [164.0, 150.2], [166.0, 196.66666666666666], [167.0, 272.0], [163.0, 273.0], [161.0, 269.0], [168.0, 218.0], [169.0, 218.0], [170.0, 248.25], [171.0, 200.0], [172.0, 168.2], [173.0, 179.55555555555554], [174.0, 205.33333333333334], [175.0, 273.0], [176.0, 172.0], [179.0, 173.0], [180.0, 175.0], [181.0, 195.27272727272725], [177.0, 276.5], [185.0, 205.14999999999995], [188.0, 222.0], [190.0, 232.75], [186.0, 278.0], [184.0, 278.0], [192.0, 248.66666666666666], [194.0, 198.66666666666666], [195.0, 187.5], [196.0, 226.0], [198.0, 204.25], [199.0, 192.0], [197.0, 278.0], [193.0, 281.0], [201.0, 226.5], [202.0, 212.8], [203.0, 238.0], [204.0, 225.66666666666666], [205.0, 195.00000000000003], [207.0, 238.14285714285714], [208.0, 220.5], [211.0, 243.0], [213.0, 219.0], [214.0, 253.5], [215.0, 212.31578947368422], [212.0, 285.0], [210.0, 285.0], [209.0, 284.0], [217.0, 242.5], [218.0, 236.0], [219.0, 231.75], [220.0, 234.33333333333334], [222.0, 234.0], [223.0, 228.0], [221.0, 290.0], [216.0, 285.0], [225.0, 229.0], [226.0, 212.5], [227.0, 253.25], [228.0, 236.2], [229.0, 219.8], [230.0, 208.73333333333332], [231.0, 292.0], [224.0, 290.0], [234.0, 205.71875], [235.0, 217.8], [236.0, 200.33333333333334], [237.0, 262.6666666666667], [238.0, 236.33333333333334], [239.0, 212.76923076923075], [233.0, 291.0], [232.0, 293.0], [240.0, 232.25], [242.0, 245.0], [243.0, 225.66666666666669], [244.0, 256.0], [245.0, 231.71428571428572], [247.0, 296.0], [246.0, 296.0], [248.0, 221.0], [249.0, 242.0], [250.0, 236.33333333333331], [251.0, 247.0], [252.0, 262.0], [253.0, 241.4], [254.0, 248.33333333333334], [255.0, 231.8], [257.0, 259.4], [259.0, 265.0], [258.0, 297.0], [260.0, 251.0], [261.0, 254.5], [262.0, 243.66666666666666], [263.0, 273.0], [256.0, 296.0], [264.0, 272.0], [265.0, 273.0], [266.0, 296.0], [268.0, 251.5], [269.0, 267.22222222222223], [270.0, 268.2], [271.0, 267.2], [284.0, 293.5], [273.0, 269.49999999999994], [272.0, 272.85714285714283], [274.0, 307.0], [275.0, 301.75], [285.0, 283.875], [286.0, 291.5], [287.0, 289.0], [277.0, 279.66666666666663], [276.0, 300.0], [278.0, 298.5], [279.0, 276.0], [280.0, 291.6666666666667], [281.0, 281.5], [282.0, 291.5], [283.0, 282.625], [289.0, 288.75], [288.0, 283.0], [290.0, 290.6363636363636], [291.0, 296.0], [292.0, 289.0], [293.0, 299.0], [294.0, 299.0], [295.0, 303.0], [296.0, 297.0], [302.0, 317.23809523809524], [303.0, 316.0], [300.0, 306.55555555555554], [301.0, 304.0], [297.0, 308.6363636363636], [298.0, 310.875], [318.0, 316.0], [304.0, 325.90909090909093], [306.0, 301.0], [310.0, 302.0], [309.0, 303.0], [308.0, 302.0], [307.0, 317.0], [317.0, 313.3333333333333], [319.0, 314.5], [315.0, 302.0], [314.0, 303.0], [313.0, 305.0], [312.0, 302.5], [321.0, 324.0], [320.0, 324.5], [327.0, 306.0], [323.0, 337.8333333333333], [324.0, 335.6666666666667], [325.0, 303.0], [326.0, 344.0], [335.0, 311.0], [334.0, 308.71428571428567], [333.0, 303.5], [332.0, 308.0], [337.0, 356.3333333333333], [336.0, 366.0], [339.0, 374.5714285714286], [338.0, 308.0], [348.0, 362.6666666666667], [349.0, 377.5], [350.0, 347.75], [344.0, 313.0], [340.0, 370.2857142857143], [341.0, 377.3333333333333], [342.0, 382.25], [343.0, 371.41666666666663], [345.0, 353.6], [346.0, 369.25], [347.0, 386.22222222222223], [353.0, 363.0], [352.0, 374.50000000000006], [354.0, 375.74999999999994], [355.0, 379.0], [356.0, 367.44444444444446], [357.0, 384.2], [358.0, 358.0], [359.0, 382.0], [360.0, 355.6], [367.0, 396.0], [366.0, 309.0], [365.0, 311.0], [361.0, 372.0], [362.0, 310.0], [369.0, 355.5], [368.0, 353.25], [370.0, 399.0], [371.0, 372.85714285714283], [372.0, 377.0], [373.0, 311.0], [374.0, 379.25], [375.0, 374.3333333333333], [383.0, 393.75], [377.0, 313.0], [379.0, 312.0], [378.0, 313.0], [382.0, 312.0], [381.0, 313.0], [386.0, 386.3333333333333], [385.0, 370.5], [384.0, 316.0], [387.0, 406.66666666666663], [396.0, 374.5], [397.0, 422.1111111111111], [399.0, 440.0], [393.0, 316.0], [398.0, 317.0], [388.0, 370.0], [389.0, 371.0], [390.0, 414.6], [391.0, 405.2], [394.0, 393.3333333333333], [395.0, 427.85714285714283], [403.0, 432.92857142857144], [401.0, 425.125], [400.0, 377.75], [407.0, 318.0], [406.0, 319.0], [402.0, 378.0], [404.0, 379.0], [405.0, 400.6666666666667], [408.0, 441.0], [409.0, 318.0], [411.0, 317.0], [410.0, 318.0], [414.0, 416.75], [415.0, 406.3333333333333], [412.0, 383.0], [413.0, 382.5], [417.0, 437.875], [416.0, 420.0], [418.0, 443.90000000000003], [419.0, 319.0], [420.0, 434.5], [421.0, 444.2307692307692], [423.0, 421.875], [422.0, 322.0], [428.0, 410.0], [429.0, 439.75], [430.0, 421.42857142857144], [431.0, 432.66666666666663], [425.0, 324.0], [424.0, 325.0], [427.0, 328.5], [426.0, 326.0], [435.0, 457.62499999999994], [433.0, 439.2], [432.0, 410.125], [434.0, 352.57142857142856], [437.0, 431.00000000000006], [436.0, 336.42857142857144], [438.0, 342.29999999999995], [439.0, 475.5], [440.0, 386.6666666666667], [441.0, 343.81249999999994], [443.0, 346.25], [442.0, 344.8], [446.0, 426.81818181818187], [445.0, 351.0], [444.0, 349.15384615384613], [447.0, 407.0], [451.0, 386.5], [449.0, 466.0], [448.0, 411.33333333333337], [455.0, 358.0], [454.0, 355.5], [450.0, 459.85714285714283], [452.0, 386.875], [453.0, 398.0], [463.0, 361.0], [456.0, 358.0], [458.0, 359.6666666666667], [457.0, 358.625], [462.0, 361.0], [461.0, 360.0], [460.0, 360.5], [478.0, 417.4], [464.0, 443.8333333333333], [466.0, 393.0], [465.0, 361.0], [467.0, 361.0], [469.0, 454.5454545454545], [470.0, 363.5], [472.0, 426.0], [473.0, 364.0], [477.0, 364.4], [476.0, 365.0], [475.0, 365.0], [474.0, 365.2], [492.0, 491.3333333333332], [488.0, 441.0], [481.0, 478.33333333333337], [480.0, 367.0], [483.0, 366.6], [482.0, 368.0], [487.0, 369.16666666666663], [486.0, 368.0], [484.0, 374.0], [489.0, 477.625], [493.0, 423.0], [494.0, 474.8333333333333], [495.0, 472.0], [491.0, 376.0], [490.0, 376.25], [508.0, 513.0], [498.0, 454.25], [496.0, 394.77777777777777], [497.0, 386.25], [499.0, 468.75000000000006], [502.0, 485.25000000000006], [501.0, 389.3333333333333], [500.0, 387.75], [503.0, 487.59999999999997], [504.0, 510.75], [506.0, 496.55555555555554], [505.0, 391.0], [507.0, 452.3636363636364], [509.0, 480.5], [511.0, 396.0], [510.0, 396.59999999999997], [516.0, 480.6666666666667], [513.0, 461.0], [512.0, 398.0], [515.0, 402.0], [514.0, 398.0], [517.0, 462.0], [518.0, 524.2222222222222], [520.0, 526.6], [521.0, 444.3333333333333], [526.0, 512.0], [525.0, 401.5], [524.0, 403.75], [523.0, 403.3333333333333], [522.0, 403.0], [527.0, 402.5], [529.0, 463.5], [528.0, 402.0], [530.0, 402.0], [543.0, 404.125], [541.0, 401.6666666666667], [540.0, 403.0], [539.0, 404.0], [536.0, 520.6666666666666], [519.0, 400.5], [537.0, 403.3333333333333], [538.0, 422.6666666666667], [531.0, 522.0], [534.0, 463.0], [533.0, 405.6666666666667], [532.0, 404.5], [535.0, 524.0], [569.0, 522.3076923076923], [546.0, 447.0], [544.0, 429.8], [545.0, 405.0], [547.0, 430.0], [548.0, 405.25], [550.0, 407.0], [549.0, 406.0], [551.0, 461.3333333333333], [554.0, 471.9333333333333], [553.0, 412.0], [552.0, 412.8], [555.0, 414.0], [556.0, 514.1000000000001], [558.0, 479.3333333333333], [557.0, 414.5], [559.0, 416.6], [561.0, 425.6896551724138], [562.0, 417.99999999999994], [575.0, 438.0], [560.0, 416.42857142857144], [572.0, 474.14285714285717], [573.0, 437.25], [574.0, 520.2], [570.0, 502.0], [571.0, 545.0], [568.0, 461.0], [563.0, 512.0], [564.0, 460.3333333333333], [565.0, 434.75], [566.0, 545.0], [567.0, 439.40000000000003], [601.0, 534.6], [579.0, 507.0], [577.0, 536.4666666666667], [576.0, 438.0], [578.0, 438.75], [580.0, 473.33333333333337], [581.0, 441.0], [583.0, 452.2], [584.0, 511.6666666666667], [585.0, 453.72727272727275], [590.0, 472.0], [589.0, 443.3333333333333], [587.0, 443.6666666666667], [586.0, 445.25], [591.0, 443.5], [592.0, 500.74999999999994], [607.0, 454.66666666666674], [604.0, 498.7142857142857], [603.0, 447.0], [602.0, 447.0], [605.0, 448.0], [606.0, 499.2], [600.0, 522.0], [593.0, 499.5], [595.0, 541.3846153846154], [594.0, 443.0], [596.0, 501.49999999999994], [597.0, 502.5], [598.0, 547.25], [599.0, 512.5714285714286], [632.0, 540.1666666666666], [610.0, 519.3076923076924], [609.0, 486.5], [608.0, 456.21052631578954], [612.0, 505.7142857142857], [611.0, 458.82352941176475], [613.0, 458.61538461538464], [615.0, 460.00000000000006], [614.0, 459.25], [621.0, 476.37499999999994], [620.0, 460.6], [619.0, 461.0], [618.0, 460.25], [617.0, 459.71428571428567], [616.0, 458.5], [622.0, 461.3333333333333], [623.0, 462.6], [628.0, 524.75], [629.0, 513.6], [630.0, 557.75], [631.0, 491.6666666666667], [633.0, 553.8888888888889], [634.0, 468.0], [635.0, 510.6666666666667], [636.0, 531.0], [637.0, 466.6666666666667], [639.0, 548.7692307692308], [625.0, 463.5], [624.0, 463.0], [627.0, 464.25], [626.0, 464.3333333333333], [638.0, 467.0], [666.0, 477.5], [642.0, 518.75], [641.0, 525.0], [646.0, 515.7777777777777], [645.0, 471.0], [644.0, 468.1428571428571], [643.0, 466.3333333333333], [647.0, 470.0], [665.0, 477.0], [664.0, 477.4], [667.0, 476.5], [669.0, 475.0], [668.0, 476.0], [648.0, 516.6666666666666], [649.0, 483.0], [652.0, 510.4285714285714], [651.0, 469.076923076923], [650.0, 468.0], [654.0, 469.6666666666667], [653.0, 472.5], [655.0, 473.0], [660.0, 492.875], [662.0, 492.75000000000006], [661.0, 475.5227272727273], [663.0, 476.5], [671.0, 476.0], [657.0, 472.58333333333337], [656.0, 472.3333333333333], [659.0, 474.0], [658.0, 475.0], [670.0, 476.5], [698.0, 472.04761904761904], [702.0, 471.0], [673.0, 514.0000000000001], [672.0, 475.2857142857143], [675.0, 474.0], [674.0, 474.6666666666667], [676.0, 479.5806451612903], [679.0, 514.25], [678.0, 475.6666666666667], [677.0, 475.61538461538464], [697.0, 472.0], [696.0, 471.6], [699.0, 470.55555555555554], [680.0, 520.4285714285714], [682.0, 476.3333333333333], [684.0, 476.5], [683.0, 477.0], [686.0, 475.5], [685.0, 476.0], [687.0, 476.0], [689.0, 613.4166666666667], [695.0, 560.0], [694.0, 471.5], [693.0, 474.00000000000006], [692.0, 475.2], [691.0, 477.0], [690.0, 478.8], [703.0, 471.5], [688.0, 476.0], [701.0, 471.33333333333337], [700.0, 473.0], [732.0, 493.5], [735.0, 494.0], [721.0, 478.8], [720.0, 476.0], [723.0, 478.74999999999994], [722.0, 478.07692307692304], [725.0, 481.8], [724.0, 480.62000000000006], [734.0, 494.0], [733.0, 492.55555555555554], [731.0, 491.2142857142857], [730.0, 489.0], [729.0, 489.75], [728.0, 484.71875000000006], [719.0, 476.52459016393453], [705.0, 473.375], [704.0, 472.3333333333333], [707.0, 473.5], [706.0, 473.2727272727273], [709.0, 477.0], [708.0, 473.5], [711.0, 480.0], [710.0, 478.0], [718.0, 476.52941176470586], [717.0, 476.25], [716.0, 479.5], [715.0, 479.6666666666667], [714.0, 479.0], [713.0, 479.7692307692308], [712.0, 480.3333333333333], [727.0, 481.42105263157896], [726.0, 481.75], [743.0, 611.0], [749.0, 515.7391304347825], [744.0, 588.8], [745.0, 506.6666666666667], [746.0, 641.3333333333333], [748.0, 545.3461538461539], [747.0, 507.3636363636364], [751.0, 546.0], [742.0, 506.8888888888889], [741.0, 506.5], [740.0, 506.0], [739.0, 506.0], [738.0, 507.6666666666667], [737.0, 509.0], [736.0, 498.46666666666664], [750.0, 508.0], [754.0, 601.8571428571429], [753.0, 509.85714285714283], [752.0, 509.53846153846155], [755.0, 513.8863636363636], [767.0, 539.0], [766.0, 537.4], [762.0, 549.7826086956522], [761.0, 521.75], [760.0, 520.0], [764.0, 528.2], [763.0, 525.4], [765.0, 546.3], [756.0, 568.5], [757.0, 521.1538461538463], [759.0, 644.0], [758.0, 520.3333333333333], [793.0, 607.3333333333334], [769.0, 585.8333333333334], [768.0, 547.9333333333333], [770.0, 584.0], [772.0, 540.6666666666666], [771.0, 540.55], [774.0, 539.625], [773.0, 540.5], [775.0, 551.3333333333334], [776.0, 559.7647058823529], [778.0, 551.9038461538463], [777.0, 544.6000000000001], [779.0, 576.9375000000001], [782.0, 580.0], [781.0, 554.3333333333333], [780.0, 554.0], [783.0, 579.1176470588235], [786.0, 634.5833333333335], [799.0, 571.4117647058823], [784.0, 558.0], [785.0, 561.1034482758622], [794.0, 586.375], [795.0, 573.0], [797.0, 571.0], [796.0, 571.6666666666666], [798.0, 650.6666666666666], [792.0, 636.0], [787.0, 583.8571428571428], [788.0, 575.7857142857144], [789.0, 576.5714285714287], [791.0, 635.0], [790.0, 569.3333333333334], [801.0, 572.5510204081633], [800.0, 585.7837837837839], [803.0, 590.9259259259259], [802.0, 572.25], [804.0, 573.1666666666667], [806.0, 575.717391304348], [805.0, 574.5666666666666], [824.0, 567.0], [807.0, 577.0], [825.0, 629.8181818181819], [826.0, 595.6], [827.0, 612.8333333333334], [828.0, 660.2222222222222], [829.0, 567.6666666666665], [831.0, 566.952380952381], [817.0, 567.5], [816.0, 568.0], [830.0, 567.25], [810.0, 605.6190476190477], [809.0, 574.75], [808.0, 575.3333333333334], [812.0, 570.5076923076921], [811.0, 573.7659574468084], [813.0, 607.0000000000001], [815.0, 605.2272727272729], [814.0, 568.9565217391306], [818.0, 579.0], [819.0, 640.7727272727275], [820.0, 567.0], [821.0, 610.7777777777778], [823.0, 631.5], [822.0, 566.875], [856.0, 567.5384615384617], [832.0, 626.6], [836.0, 642.0], [835.0, 572.0500000000001], [834.0, 573.75], [833.0, 573.8947368421054], [837.0, 573.3333333333333], [839.0, 573.6666666666666], [838.0, 573.9000000000001], [857.0, 569.5245901639345], [859.0, 569.2345679012344], [858.0, 570.5], [860.0, 643.9999999999999], [861.0, 576.925925925926], [862.0, 581.3174603174602], [863.0, 575.1538461538462], [840.0, 679.125], [841.0, 604.8], [844.0, 623.8333333333333], [843.0, 573.5], [842.0, 573.0000000000001], [845.0, 700.375], [847.0, 594.0], [846.0, 572.6666666666666], [848.0, 569.2941176470586], [849.0, 588.7142857142857], [850.0, 631.1], [851.0, 611.5454545454546], [853.0, 563.8333333333333], [852.0, 564.3333333333334], [855.0, 566.8666666666667], [854.0, 564.9166666666666], [871.0, 614.6153846153848], [875.0, 602.5], [864.0, 587.5728155339807], [866.0, 574.5], [865.0, 574.5384615384614], [867.0, 668.5238095238095], [870.0, 623.0000000000001], [869.0, 574.3333333333334], [868.0, 573.7777777777778], [880.0, 736.0], [895.0, 684.5], [891.0, 709.3333333333334], [890.0, 593.75], [889.0, 593.8888888888889], [888.0, 592.1], [893.0, 596.0], [892.0, 594.9999999999999], [894.0, 610.6666666666667], [881.0, 611.0000000000001], [884.0, 597.0], [883.0, 576.1153846153848], [882.0, 573.6717557251907], [885.0, 591.5869565217394], [887.0, 698.4999999999999], [886.0, 589.6486486486486], [872.0, 746.3333333333334], [873.0, 617.3461538461539], [874.0, 608.0434782608695], [878.0, 649.2500000000001], [877.0, 571.5555555555555], [876.0, 573.9], [879.0, 632.9166666666666], [923.0, 658.0], [898.0, 630.0], [897.0, 649.7142857142857], [896.0, 598.8947368421052], [899.0, 677.875], [900.0, 602.6874999999999], [902.0, 621.2682926829267], [904.0, 693.0], [905.0, 620.0714285714287], [908.0, 629.9252336448599], [907.0, 611.4269662921349], [906.0, 607.8181818181819], [910.0, 624.3333333333334], [909.0, 622.6451612903226], [911.0, 628.8375], [912.0, 652.4285714285714], [926.0, 685.0544554455444], [925.0, 675.8548387096773], [924.0, 660.9607843137255], [922.0, 657.6666666666666], [921.0, 653.8837209302327], [920.0, 652.0], [903.0, 606.7586206896552], [927.0, 685.8205128205129], [913.0, 668.925925925926], [915.0, 641.6323529411764], [914.0, 635.1111111111111], [916.0, 651.5238095238097], [919.0, 651.9784946236559], [918.0, 653.7857142857142], [917.0, 653.5106382978722], [956.0, 698.7872928176796], [951.0, 698.7500000000001], [950.0, 687.3411764705879], [949.0, 689.4666666666667], [948.0, 692.7777777777778], [947.0, 703.8271604938275], [946.0, 705.4285714285716], [945.0, 705.5], [944.0, 705.0357142857142], [952.0, 701.0000000000001], [943.0, 704.4166666666666], [929.0, 688.5499999999997], [928.0, 686.1111111111111], [931.0, 689.7333333333332], [930.0, 690.3636363636364], [933.0, 692.7000000000004], [932.0, 689.7894736842104], [935.0, 696.1538461538463], [934.0, 693.9047619047618], [942.0, 703.3157894736843], [941.0, 703.5], [940.0, 702.2], [939.0, 701.8125], [938.0, 698.6290322580645], [937.0, 698.2222222222222], [936.0, 697.1999999999998], [959.0, 694.7419354838706], [958.0, 695.9499999999999], [957.0, 697.5897435897434], [955.0, 699.8181818181818], [954.0, 700.0810810810809], [953.0, 697.5641025641028], [985.0, 851.4999999999999], [961.0, 696.0131578947368], [964.0, 694.4964028776981], [963.0, 693.229885057471], [962.0, 695.521739130435], [966.0, 691.4176470588242], [965.0, 691.9999999999999], [984.0, 853.5], [967.0, 706.0053191489362], [968.0, 724.2407407407408], [969.0, 743.1171875000003], [970.0, 763.2400000000001], [975.0, 774.2941176470589], [960.0, 693.6666666666666], [974.0, 771.4074074074074], [973.0, 769.5000000000001], [972.0, 767.394736842105], [971.0, 763.7692307692307], [981.0, 853.4218749999998], [980.0, 843.596858638744], [979.0, 805.4252873563219], [978.0, 794.0967741935485], [977.0, 783.9838709677421], [976.0, 777.3508771929827], [983.0, 853.2], [982.0, 851.9259259259259], [991.0, 858.3714285714285], [990.0, 857.8441558441555], [989.0, 857.1666666666665], [988.0, 856.422857142857], [987.0, 843.8666666666668], [986.0, 847.1193415637858], [995.0, 940.2631578947369], [999.0, 1204.8750000000002], [1000.0, 750.5860868156611], [998.0, 1191.4642857142856], [997.0, 1151.0555555555554], [996.0, 1044.9702127659582], [994.0, 924.6896551724136], [993.0, 887.0100000000004], [992.0, 861.7512820512827], [1.0, 184.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[985.5796549999972, 742.6399850000049]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 22040.0, "minX": 1.66155756E12, "maxY": 439221.3, "series": [{"data": [[1.66155762E12, 56770.1], [1.66155768E12, 22040.0], [1.66155756E12, 47856.566666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66155762E12, 439221.3], [1.66155768E12, 170520.0], [1.66155756E12, 370258.7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66155768E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 669.6190077758135, "minX": 1.66155756E12, "maxY": 987.9030459770116, "series": [{"data": [[1.66155762E12, 669.6190077758135], [1.66155768E12, 987.9030459770116], [1.66155756E12, 716.3073461879426]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66155768E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 669.6186173120511, "minX": 1.66155756E12, "maxY": 987.9027011494196, "series": [{"data": [[1.66155762E12, 669.6186173120511], [1.66155768E12, 987.9027011494196], [1.66155756E12, 716.3069491682434]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66155768E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.002722090208284595, "minX": 1.66155756E12, "maxY": 0.0096872808120377, "series": [{"data": [[1.66155762E12, 0.002722090208284595], [1.66155768E12, 0.006091954022988495], [1.66155756E12, 0.0096872808120377]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66155768E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.66155756E12, "maxY": 3253.0, "series": [{"data": [[1.66155762E12, 818.0], [1.66155768E12, 3253.0], [1.66155756E12, 970.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66155762E12, 700.0], [1.66155768E12, 2949.9000000000015], [1.66155756E12, 721.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66155762E12, 726.0], [1.66155768E12, 3231.0], [1.66155756E12, 788.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66155762E12, 708.0], [1.66155768E12, 3190.0], [1.66155756E12, 771.1500000000269]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66155762E12, 611.0], [1.66155768E12, 173.0], [1.66155756E12, 9.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66155762E12, 677.0], [1.66155768E12, 851.0], [1.66155756E12, 703.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66155768E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 58.5, "minX": 118.0, "maxY": 3233.0, "series": [{"data": [[118.0, 58.5], [153.0, 210.0], [265.0, 1872.0], [262.0, 3189.0], [286.0, 3207.0], [276.0, 3165.0], [310.0, 2555.5], [316.0, 3233.0], [362.0, 3008.5], [357.0, 3221.0], [596.0, 1332.5], [659.0, 2868.0], [693.0, 758.0], [714.0, 477.0], [741.0, 193.0], [753.0, 1203.0], [765.0, 1280.0], [785.0, 1215.0], [814.0, 1399.0], [907.0, 960.0], [1120.0, 817.0], [1097.0, 914.0], [1102.0, 915.0], [1188.0, 918.0], [1171.0, 1035.0], [1174.0, 859.0], [1177.0, 851.0], [1241.0, 765.0], [1257.0, 782.0], [1230.0, 773.0], [1333.0, 778.0], [1309.0, 772.0], [1284.0, 780.0], [1332.0, 714.0], [1330.0, 715.0], [1291.0, 839.0], [1339.0, 713.0], [1334.0, 737.0], [1340.0, 713.0], [1317.0, 748.0], [1343.0, 767.0], [1282.0, 754.0], [1311.0, 672.0], [1320.0, 702.0], [1324.0, 633.5], [1348.0, 712.0], [1394.0, 725.0], [1390.0, 745.0], [1365.0, 698.0], [1360.0, 710.0], [1405.0, 716.0], [1404.0, 732.0], [1402.0, 747.0], [1396.0, 698.0], [1378.0, 704.0], [1382.0, 700.0], [1385.0, 700.0], [1389.0, 721.0], [1362.0, 729.0], [1351.0, 710.0], [1357.0, 696.0], [1359.0, 703.0], [1366.0, 709.0], [1369.0, 702.0], [1373.0, 779.0], [1372.0, 707.0], [1418.0, 709.0], [1440.0, 731.0], [1441.0, 708.0], [1443.0, 705.0], [1450.0, 688.0], [1442.0, 683.0], [1412.0, 709.0], [1467.0, 697.0], [1470.0, 695.0], [1464.0, 679.0], [1460.0, 711.0], [1419.0, 708.0], [1462.0, 699.0], [1432.0, 707.0], [1414.0, 722.0], [1417.0, 681.0], [1431.0, 703.0], [1429.0, 655.0], [1427.0, 673.0], [1411.0, 706.0], [1410.0, 700.0], [1433.0, 698.0], [1434.0, 706.0], [1438.0, 702.0], [1436.0, 677.0], [1435.0, 713.0], [1439.0, 646.0], [1409.0, 695.0], [1521.0, 676.0], [1477.0, 718.0], [1482.0, 712.0], [1497.0, 717.0], [1496.0, 682.0], [1506.0, 636.0], [1533.0, 630.0], [1525.0, 662.0], [1504.0, 669.0], [1501.0, 692.0], [1503.0, 655.0], [1475.0, 686.0], [1507.0, 665.0], [1510.0, 674.0], [1484.0, 681.0], [1486.0, 785.0], [1571.0, 638.0], [1579.0, 673.0], [1580.0, 661.0], [1577.0, 664.0], [1589.0, 669.0], [1574.0, 627.0], [1567.0, 624.0], [1544.0, 636.0], [1548.0, 630.0], [1540.0, 646.0], [1550.0, 630.0], [1585.0, 634.0], [1587.0, 557.0], [1566.0, 628.0], [1558.0, 624.0], [1561.0, 712.0], [1564.0, 634.0], [1630.0, 633.0], [1606.0, 632.0], [1659.0, 624.0], [1618.0, 628.0], [1603.0, 632.0], [1654.0, 621.0], [1702.0, 444.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1702.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 58.5, "minX": 118.0, "maxY": 3233.0, "series": [{"data": [[118.0, 58.5], [153.0, 210.0], [265.0, 1872.0], [262.0, 3189.0], [286.0, 3207.0], [276.0, 3165.0], [310.0, 2555.5], [316.0, 3233.0], [362.0, 3008.5], [357.0, 3221.0], [596.0, 1332.5], [659.0, 2868.0], [693.0, 758.0], [714.0, 477.0], [741.0, 193.0], [753.0, 1203.0], [765.0, 1280.0], [785.0, 1215.0], [814.0, 1399.0], [907.0, 960.0], [1120.0, 817.0], [1097.0, 914.0], [1102.0, 915.0], [1188.0, 918.0], [1171.0, 1035.0], [1174.0, 859.0], [1177.0, 851.0], [1241.0, 765.0], [1257.0, 782.0], [1230.0, 773.0], [1333.0, 778.0], [1309.0, 772.0], [1284.0, 780.0], [1332.0, 714.0], [1330.0, 715.0], [1291.0, 839.0], [1339.0, 713.0], [1334.0, 737.0], [1340.0, 713.0], [1317.0, 748.0], [1343.0, 767.0], [1282.0, 754.0], [1311.0, 672.0], [1320.0, 702.0], [1324.0, 633.5], [1348.0, 712.0], [1394.0, 725.0], [1390.0, 745.0], [1365.0, 698.0], [1360.0, 710.0], [1405.0, 716.0], [1404.0, 732.0], [1402.0, 747.0], [1396.0, 698.0], [1378.0, 704.0], [1382.0, 700.0], [1385.0, 700.0], [1389.0, 721.0], [1362.0, 729.0], [1351.0, 710.0], [1357.0, 696.0], [1359.0, 703.0], [1366.0, 709.0], [1369.0, 702.0], [1373.0, 779.0], [1372.0, 707.0], [1418.0, 709.0], [1440.0, 731.0], [1441.0, 708.0], [1443.0, 705.0], [1450.0, 688.0], [1442.0, 683.0], [1412.0, 709.0], [1467.0, 697.0], [1470.0, 695.0], [1464.0, 679.0], [1460.0, 711.0], [1419.0, 708.0], [1462.0, 699.0], [1432.0, 707.0], [1414.0, 722.0], [1417.0, 681.0], [1431.0, 703.0], [1429.0, 655.0], [1427.0, 673.0], [1411.0, 706.0], [1410.0, 700.0], [1433.0, 698.0], [1434.0, 706.0], [1438.0, 702.0], [1436.0, 677.0], [1435.0, 713.0], [1439.0, 646.0], [1409.0, 695.0], [1521.0, 676.0], [1477.0, 718.0], [1482.0, 712.0], [1497.0, 717.0], [1496.0, 682.0], [1506.0, 636.0], [1533.0, 630.0], [1525.0, 662.0], [1504.0, 669.0], [1501.0, 692.0], [1503.0, 655.0], [1475.0, 686.0], [1507.0, 665.0], [1510.0, 674.0], [1484.0, 681.0], [1486.0, 785.0], [1571.0, 638.0], [1579.0, 673.0], [1580.0, 661.0], [1577.0, 664.0], [1589.0, 669.0], [1574.0, 627.0], [1567.0, 624.0], [1544.0, 636.0], [1548.0, 630.0], [1540.0, 646.0], [1550.0, 630.0], [1585.0, 634.0], [1587.0, 557.0], [1566.0, 628.0], [1558.0, 624.0], [1561.0, 712.0], [1564.0, 634.0], [1630.0, 633.0], [1606.0, 632.0], [1659.0, 624.0], [1618.0, 628.0], [1603.0, 632.0], [1654.0, 621.0], [1702.0, 444.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1702.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 563.3333333333334, "minX": 1.66155756E12, "maxY": 1493.95, "series": [{"data": [[1.66155762E12, 1493.95], [1.66155768E12, 563.3333333333334], [1.66155756E12, 1276.05]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66155768E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 580.0, "minX": 1.66155756E12, "maxY": 1493.95, "series": [{"data": [[1.66155762E12, 1493.95], [1.66155768E12, 580.0], [1.66155756E12, 1259.3833333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66155768E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 580.0, "minX": 1.66155756E12, "maxY": 1493.95, "series": [{"data": [[1.66155762E12, 1493.95], [1.66155768E12, 580.0], [1.66155756E12, 1259.3833333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66155768E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 580.0, "minX": 1.66155756E12, "maxY": 1493.95, "series": [{"data": [[1.66155762E12, 1493.95], [1.66155768E12, 580.0], [1.66155756E12, 1259.3833333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66155768E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

