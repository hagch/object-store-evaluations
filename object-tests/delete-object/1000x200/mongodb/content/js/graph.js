/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 21.0, "minX": 0.0, "maxY": 870.0, "series": [{"data": [[0.0, 21.0], [0.1, 108.0], [0.2, 151.0], [0.3, 158.0], [0.4, 165.0], [0.5, 170.0], [0.6, 175.0], [0.7, 180.0], [0.8, 185.0], [0.9, 193.0], [1.0, 202.0], [1.1, 212.0], [1.2, 221.0], [1.3, 232.0], [1.4, 243.0], [1.5, 253.0], [1.6, 259.0], [1.7, 264.0], [1.8, 266.0], [1.9, 268.0], [2.0, 270.0], [2.1, 272.0], [2.2, 273.0], [2.3, 275.0], [2.4, 276.0], [2.5, 277.0], [2.6, 279.0], [2.7, 280.0], [2.8, 282.0], [2.9, 283.0], [3.0, 284.0], [3.1, 286.0], [3.2, 288.0], [3.3, 290.0], [3.4, 291.0], [3.5, 293.0], [3.6, 294.0], [3.7, 296.0], [3.8, 298.0], [3.9, 299.0], [4.0, 300.0], [4.1, 302.0], [4.2, 303.0], [4.3, 304.0], [4.4, 305.0], [4.5, 306.0], [4.6, 307.0], [4.7, 308.0], [4.8, 308.0], [4.9, 309.0], [5.0, 310.0], [5.1, 310.0], [5.2, 311.0], [5.3, 312.0], [5.4, 313.0], [5.5, 313.0], [5.6, 314.0], [5.7, 315.0], [5.8, 315.0], [5.9, 316.0], [6.0, 316.0], [6.1, 317.0], [6.2, 317.0], [6.3, 318.0], [6.4, 318.0], [6.5, 319.0], [6.6, 319.0], [6.7, 320.0], [6.8, 320.0], [6.9, 321.0], [7.0, 321.0], [7.1, 321.0], [7.2, 322.0], [7.3, 322.0], [7.4, 322.0], [7.5, 323.0], [7.6, 323.0], [7.7, 324.0], [7.8, 324.0], [7.9, 324.0], [8.0, 324.0], [8.1, 325.0], [8.2, 325.0], [8.3, 325.0], [8.4, 326.0], [8.5, 326.0], [8.6, 326.0], [8.7, 327.0], [8.8, 327.0], [8.9, 327.0], [9.0, 328.0], [9.1, 328.0], [9.2, 328.0], [9.3, 329.0], [9.4, 329.0], [9.5, 329.0], [9.6, 329.0], [9.7, 330.0], [9.8, 330.0], [9.9, 330.0], [10.0, 330.0], [10.1, 331.0], [10.2, 331.0], [10.3, 331.0], [10.4, 331.0], [10.5, 332.0], [10.6, 332.0], [10.7, 332.0], [10.8, 332.0], [10.9, 333.0], [11.0, 333.0], [11.1, 333.0], [11.2, 333.0], [11.3, 334.0], [11.4, 334.0], [11.5, 334.0], [11.6, 334.0], [11.7, 335.0], [11.8, 335.0], [11.9, 335.0], [12.0, 335.0], [12.1, 335.0], [12.2, 336.0], [12.3, 336.0], [12.4, 336.0], [12.5, 336.0], [12.6, 337.0], [12.7, 337.0], [12.8, 337.0], [12.9, 337.0], [13.0, 337.0], [13.1, 338.0], [13.2, 338.0], [13.3, 338.0], [13.4, 338.0], [13.5, 338.0], [13.6, 339.0], [13.7, 339.0], [13.8, 339.0], [13.9, 339.0], [14.0, 339.0], [14.1, 339.0], [14.2, 340.0], [14.3, 340.0], [14.4, 340.0], [14.5, 340.0], [14.6, 340.0], [14.7, 341.0], [14.8, 341.0], [14.9, 341.0], [15.0, 341.0], [15.1, 341.0], [15.2, 341.0], [15.3, 341.0], [15.4, 342.0], [15.5, 342.0], [15.6, 342.0], [15.7, 342.0], [15.8, 342.0], [15.9, 342.0], [16.0, 343.0], [16.1, 343.0], [16.2, 343.0], [16.3, 343.0], [16.4, 343.0], [16.5, 343.0], [16.6, 343.0], [16.7, 344.0], [16.8, 344.0], [16.9, 344.0], [17.0, 344.0], [17.1, 344.0], [17.2, 344.0], [17.3, 344.0], [17.4, 345.0], [17.5, 345.0], [17.6, 345.0], [17.7, 345.0], [17.8, 345.0], [17.9, 345.0], [18.0, 345.0], [18.1, 345.0], [18.2, 346.0], [18.3, 346.0], [18.4, 346.0], [18.5, 346.0], [18.6, 346.0], [18.7, 346.0], [18.8, 346.0], [18.9, 346.0], [19.0, 347.0], [19.1, 347.0], [19.2, 347.0], [19.3, 347.0], [19.4, 347.0], [19.5, 347.0], [19.6, 347.0], [19.7, 347.0], [19.8, 348.0], [19.9, 348.0], [20.0, 348.0], [20.1, 348.0], [20.2, 348.0], [20.3, 348.0], [20.4, 348.0], [20.5, 348.0], [20.6, 349.0], [20.7, 349.0], [20.8, 349.0], [20.9, 349.0], [21.0, 349.0], [21.1, 349.0], [21.2, 349.0], [21.3, 349.0], [21.4, 349.0], [21.5, 350.0], [21.6, 350.0], [21.7, 350.0], [21.8, 350.0], [21.9, 350.0], [22.0, 350.0], [22.1, 350.0], [22.2, 350.0], [22.3, 350.0], [22.4, 351.0], [22.5, 351.0], [22.6, 351.0], [22.7, 351.0], [22.8, 351.0], [22.9, 351.0], [23.0, 351.0], [23.1, 351.0], [23.2, 351.0], [23.3, 351.0], [23.4, 352.0], [23.5, 352.0], [23.6, 352.0], [23.7, 352.0], [23.8, 352.0], [23.9, 352.0], [24.0, 352.0], [24.1, 352.0], [24.2, 352.0], [24.3, 352.0], [24.4, 353.0], [24.5, 353.0], [24.6, 353.0], [24.7, 353.0], [24.8, 353.0], [24.9, 353.0], [25.0, 353.0], [25.1, 353.0], [25.2, 353.0], [25.3, 353.0], [25.4, 354.0], [25.5, 354.0], [25.6, 354.0], [25.7, 354.0], [25.8, 354.0], [25.9, 354.0], [26.0, 354.0], [26.1, 354.0], [26.2, 354.0], [26.3, 354.0], [26.4, 354.0], [26.5, 355.0], [26.6, 355.0], [26.7, 355.0], [26.8, 355.0], [26.9, 355.0], [27.0, 355.0], [27.1, 355.0], [27.2, 355.0], [27.3, 355.0], [27.4, 355.0], [27.5, 355.0], [27.6, 356.0], [27.7, 356.0], [27.8, 356.0], [27.9, 356.0], [28.0, 356.0], [28.1, 356.0], [28.2, 356.0], [28.3, 356.0], [28.4, 356.0], [28.5, 356.0], [28.6, 356.0], [28.7, 357.0], [28.8, 357.0], [28.9, 357.0], [29.0, 357.0], [29.1, 357.0], [29.2, 357.0], [29.3, 357.0], [29.4, 357.0], [29.5, 357.0], [29.6, 357.0], [29.7, 357.0], [29.8, 357.0], [29.9, 358.0], [30.0, 358.0], [30.1, 358.0], [30.2, 358.0], [30.3, 358.0], [30.4, 358.0], [30.5, 358.0], [30.6, 358.0], [30.7, 358.0], [30.8, 358.0], [30.9, 358.0], [31.0, 358.0], [31.1, 359.0], [31.2, 359.0], [31.3, 359.0], [31.4, 359.0], [31.5, 359.0], [31.6, 359.0], [31.7, 359.0], [31.8, 359.0], [31.9, 359.0], [32.0, 359.0], [32.1, 359.0], [32.2, 359.0], [32.3, 360.0], [32.4, 360.0], [32.5, 360.0], [32.6, 360.0], [32.7, 360.0], [32.8, 360.0], [32.9, 360.0], [33.0, 360.0], [33.1, 360.0], [33.2, 360.0], [33.3, 360.0], [33.4, 360.0], [33.5, 361.0], [33.6, 361.0], [33.7, 361.0], [33.8, 361.0], [33.9, 361.0], [34.0, 361.0], [34.1, 361.0], [34.2, 361.0], [34.3, 361.0], [34.4, 361.0], [34.5, 361.0], [34.6, 361.0], [34.7, 361.0], [34.8, 362.0], [34.9, 362.0], [35.0, 362.0], [35.1, 362.0], [35.2, 362.0], [35.3, 362.0], [35.4, 362.0], [35.5, 362.0], [35.6, 362.0], [35.7, 362.0], [35.8, 362.0], [35.9, 362.0], [36.0, 363.0], [36.1, 363.0], [36.2, 363.0], [36.3, 363.0], [36.4, 363.0], [36.5, 363.0], [36.6, 363.0], [36.7, 363.0], [36.8, 363.0], [36.9, 363.0], [37.0, 363.0], [37.1, 363.0], [37.2, 363.0], [37.3, 364.0], [37.4, 364.0], [37.5, 364.0], [37.6, 364.0], [37.7, 364.0], [37.8, 364.0], [37.9, 364.0], [38.0, 364.0], [38.1, 364.0], [38.2, 364.0], [38.3, 364.0], [38.4, 364.0], [38.5, 365.0], [38.6, 365.0], [38.7, 365.0], [38.8, 365.0], [38.9, 365.0], [39.0, 365.0], [39.1, 365.0], [39.2, 365.0], [39.3, 365.0], [39.4, 365.0], [39.5, 365.0], [39.6, 365.0], [39.7, 366.0], [39.8, 366.0], [39.9, 366.0], [40.0, 366.0], [40.1, 366.0], [40.2, 366.0], [40.3, 366.0], [40.4, 366.0], [40.5, 366.0], [40.6, 366.0], [40.7, 366.0], [40.8, 366.0], [40.9, 366.0], [41.0, 367.0], [41.1, 367.0], [41.2, 367.0], [41.3, 367.0], [41.4, 367.0], [41.5, 367.0], [41.6, 367.0], [41.7, 367.0], [41.8, 367.0], [41.9, 367.0], [42.0, 367.0], [42.1, 367.0], [42.2, 368.0], [42.3, 368.0], [42.4, 368.0], [42.5, 368.0], [42.6, 368.0], [42.7, 368.0], [42.8, 368.0], [42.9, 368.0], [43.0, 368.0], [43.1, 368.0], [43.2, 368.0], [43.3, 368.0], [43.4, 369.0], [43.5, 369.0], [43.6, 369.0], [43.7, 369.0], [43.8, 369.0], [43.9, 369.0], [44.0, 369.0], [44.1, 369.0], [44.2, 369.0], [44.3, 369.0], [44.4, 369.0], [44.5, 370.0], [44.6, 370.0], [44.7, 370.0], [44.8, 370.0], [44.9, 370.0], [45.0, 370.0], [45.1, 370.0], [45.2, 370.0], [45.3, 370.0], [45.4, 370.0], [45.5, 370.0], [45.6, 370.0], [45.7, 371.0], [45.8, 371.0], [45.9, 371.0], [46.0, 371.0], [46.1, 371.0], [46.2, 371.0], [46.3, 371.0], [46.4, 371.0], [46.5, 371.0], [46.6, 371.0], [46.7, 371.0], [46.8, 371.0], [46.9, 372.0], [47.0, 372.0], [47.1, 372.0], [47.2, 372.0], [47.3, 372.0], [47.4, 372.0], [47.5, 372.0], [47.6, 372.0], [47.7, 372.0], [47.8, 372.0], [47.9, 372.0], [48.0, 372.0], [48.1, 373.0], [48.2, 373.0], [48.3, 373.0], [48.4, 373.0], [48.5, 373.0], [48.6, 373.0], [48.7, 373.0], [48.8, 373.0], [48.9, 373.0], [49.0, 373.0], [49.1, 373.0], [49.2, 373.0], [49.3, 374.0], [49.4, 374.0], [49.5, 374.0], [49.6, 374.0], [49.7, 374.0], [49.8, 374.0], [49.9, 374.0], [50.0, 374.0], [50.1, 374.0], [50.2, 374.0], [50.3, 374.0], [50.4, 375.0], [50.5, 375.0], [50.6, 375.0], [50.7, 375.0], [50.8, 375.0], [50.9, 375.0], [51.0, 375.0], [51.1, 375.0], [51.2, 375.0], [51.3, 375.0], [51.4, 375.0], [51.5, 375.0], [51.6, 376.0], [51.7, 376.0], [51.8, 376.0], [51.9, 376.0], [52.0, 376.0], [52.1, 376.0], [52.2, 376.0], [52.3, 376.0], [52.4, 376.0], [52.5, 376.0], [52.6, 376.0], [52.7, 376.0], [52.8, 377.0], [52.9, 377.0], [53.0, 377.0], [53.1, 377.0], [53.2, 377.0], [53.3, 377.0], [53.4, 377.0], [53.5, 377.0], [53.6, 377.0], [53.7, 377.0], [53.8, 377.0], [53.9, 378.0], [54.0, 378.0], [54.1, 378.0], [54.2, 378.0], [54.3, 378.0], [54.4, 378.0], [54.5, 378.0], [54.6, 378.0], [54.7, 378.0], [54.8, 378.0], [54.9, 378.0], [55.0, 379.0], [55.1, 379.0], [55.2, 379.0], [55.3, 379.0], [55.4, 379.0], [55.5, 379.0], [55.6, 379.0], [55.7, 379.0], [55.8, 379.0], [55.9, 379.0], [56.0, 379.0], [56.1, 379.0], [56.2, 380.0], [56.3, 380.0], [56.4, 380.0], [56.5, 380.0], [56.6, 380.0], [56.7, 380.0], [56.8, 380.0], [56.9, 380.0], [57.0, 380.0], [57.1, 380.0], [57.2, 380.0], [57.3, 381.0], [57.4, 381.0], [57.5, 381.0], [57.6, 381.0], [57.7, 381.0], [57.8, 381.0], [57.9, 381.0], [58.0, 381.0], [58.1, 381.0], [58.2, 381.0], [58.3, 381.0], [58.4, 381.0], [58.5, 382.0], [58.6, 382.0], [58.7, 382.0], [58.8, 382.0], [58.9, 382.0], [59.0, 382.0], [59.1, 382.0], [59.2, 382.0], [59.3, 382.0], [59.4, 382.0], [59.5, 382.0], [59.6, 383.0], [59.7, 383.0], [59.8, 383.0], [59.9, 383.0], [60.0, 383.0], [60.1, 383.0], [60.2, 383.0], [60.3, 383.0], [60.4, 383.0], [60.5, 383.0], [60.6, 383.0], [60.7, 384.0], [60.8, 384.0], [60.9, 384.0], [61.0, 384.0], [61.1, 384.0], [61.2, 384.0], [61.3, 384.0], [61.4, 384.0], [61.5, 384.0], [61.6, 384.0], [61.7, 384.0], [61.8, 385.0], [61.9, 385.0], [62.0, 385.0], [62.1, 385.0], [62.2, 385.0], [62.3, 385.0], [62.4, 385.0], [62.5, 385.0], [62.6, 385.0], [62.7, 385.0], [62.8, 385.0], [62.9, 386.0], [63.0, 386.0], [63.1, 386.0], [63.2, 386.0], [63.3, 386.0], [63.4, 386.0], [63.5, 386.0], [63.6, 386.0], [63.7, 386.0], [63.8, 386.0], [63.9, 387.0], [64.0, 387.0], [64.1, 387.0], [64.2, 387.0], [64.3, 387.0], [64.4, 387.0], [64.5, 387.0], [64.6, 387.0], [64.7, 387.0], [64.8, 387.0], [64.9, 387.0], [65.0, 388.0], [65.1, 388.0], [65.2, 388.0], [65.3, 388.0], [65.4, 388.0], [65.5, 388.0], [65.6, 388.0], [65.7, 388.0], [65.8, 388.0], [65.9, 388.0], [66.0, 389.0], [66.1, 389.0], [66.2, 389.0], [66.3, 389.0], [66.4, 389.0], [66.5, 389.0], [66.6, 389.0], [66.7, 389.0], [66.8, 389.0], [66.9, 389.0], [67.0, 390.0], [67.1, 390.0], [67.2, 390.0], [67.3, 390.0], [67.4, 390.0], [67.5, 390.0], [67.6, 390.0], [67.7, 390.0], [67.8, 390.0], [67.9, 390.0], [68.0, 391.0], [68.1, 391.0], [68.2, 391.0], [68.3, 391.0], [68.4, 391.0], [68.5, 391.0], [68.6, 391.0], [68.7, 391.0], [68.8, 391.0], [68.9, 392.0], [69.0, 392.0], [69.1, 392.0], [69.2, 392.0], [69.3, 392.0], [69.4, 392.0], [69.5, 392.0], [69.6, 392.0], [69.7, 392.0], [69.8, 393.0], [69.9, 393.0], [70.0, 393.0], [70.1, 393.0], [70.2, 393.0], [70.3, 393.0], [70.4, 393.0], [70.5, 393.0], [70.6, 393.0], [70.7, 394.0], [70.8, 394.0], [70.9, 394.0], [71.0, 394.0], [71.1, 394.0], [71.2, 394.0], [71.3, 394.0], [71.4, 394.0], [71.5, 394.0], [71.6, 395.0], [71.7, 395.0], [71.8, 395.0], [71.9, 395.0], [72.0, 395.0], [72.1, 395.0], [72.2, 395.0], [72.3, 395.0], [72.4, 395.0], [72.5, 396.0], [72.6, 396.0], [72.7, 396.0], [72.8, 396.0], [72.9, 396.0], [73.0, 396.0], [73.1, 396.0], [73.2, 396.0], [73.3, 396.0], [73.4, 397.0], [73.5, 397.0], [73.6, 397.0], [73.7, 397.0], [73.8, 397.0], [73.9, 397.0], [74.0, 397.0], [74.1, 397.0], [74.2, 398.0], [74.3, 398.0], [74.4, 398.0], [74.5, 398.0], [74.6, 398.0], [74.7, 398.0], [74.8, 398.0], [74.9, 398.0], [75.0, 399.0], [75.1, 399.0], [75.2, 399.0], [75.3, 399.0], [75.4, 399.0], [75.5, 399.0], [75.6, 399.0], [75.7, 399.0], [75.8, 400.0], [75.9, 400.0], [76.0, 400.0], [76.1, 400.0], [76.2, 400.0], [76.3, 400.0], [76.4, 400.0], [76.5, 400.0], [76.6, 401.0], [76.7, 401.0], [76.8, 401.0], [76.9, 401.0], [77.0, 401.0], [77.1, 401.0], [77.2, 401.0], [77.3, 401.0], [77.4, 402.0], [77.5, 402.0], [77.6, 402.0], [77.7, 402.0], [77.8, 402.0], [77.9, 402.0], [78.0, 402.0], [78.1, 402.0], [78.2, 403.0], [78.3, 403.0], [78.4, 403.0], [78.5, 403.0], [78.6, 403.0], [78.7, 403.0], [78.8, 403.0], [78.9, 404.0], [79.0, 404.0], [79.1, 404.0], [79.2, 404.0], [79.3, 404.0], [79.4, 404.0], [79.5, 404.0], [79.6, 404.0], [79.7, 405.0], [79.8, 405.0], [79.9, 405.0], [80.0, 405.0], [80.1, 405.0], [80.2, 405.0], [80.3, 405.0], [80.4, 406.0], [80.5, 406.0], [80.6, 406.0], [80.7, 406.0], [80.8, 406.0], [80.9, 406.0], [81.0, 406.0], [81.1, 407.0], [81.2, 407.0], [81.3, 407.0], [81.4, 407.0], [81.5, 407.0], [81.6, 407.0], [81.7, 407.0], [81.8, 408.0], [81.9, 408.0], [82.0, 408.0], [82.1, 408.0], [82.2, 408.0], [82.3, 408.0], [82.4, 408.0], [82.5, 409.0], [82.6, 409.0], [82.7, 409.0], [82.8, 409.0], [82.9, 409.0], [83.0, 409.0], [83.1, 409.0], [83.2, 410.0], [83.3, 410.0], [83.4, 410.0], [83.5, 410.0], [83.6, 410.0], [83.7, 410.0], [83.8, 411.0], [83.9, 411.0], [84.0, 411.0], [84.1, 411.0], [84.2, 411.0], [84.3, 411.0], [84.4, 412.0], [84.5, 412.0], [84.6, 412.0], [84.7, 412.0], [84.8, 412.0], [84.9, 412.0], [85.0, 413.0], [85.1, 413.0], [85.2, 413.0], [85.3, 413.0], [85.4, 413.0], [85.5, 413.0], [85.6, 414.0], [85.7, 414.0], [85.8, 414.0], [85.9, 414.0], [86.0, 414.0], [86.1, 415.0], [86.2, 415.0], [86.3, 415.0], [86.4, 415.0], [86.5, 415.0], [86.6, 416.0], [86.7, 416.0], [86.8, 416.0], [86.9, 416.0], [87.0, 416.0], [87.1, 417.0], [87.2, 417.0], [87.3, 417.0], [87.4, 417.0], [87.5, 417.0], [87.6, 418.0], [87.7, 418.0], [87.8, 418.0], [87.9, 418.0], [88.0, 419.0], [88.1, 419.0], [88.2, 419.0], [88.3, 419.0], [88.4, 419.0], [88.5, 420.0], [88.6, 420.0], [88.7, 420.0], [88.8, 420.0], [88.9, 421.0], [89.0, 421.0], [89.1, 421.0], [89.2, 421.0], [89.3, 422.0], [89.4, 422.0], [89.5, 422.0], [89.6, 422.0], [89.7, 423.0], [89.8, 423.0], [89.9, 423.0], [90.0, 424.0], [90.1, 424.0], [90.2, 424.0], [90.3, 424.0], [90.4, 425.0], [90.5, 425.0], [90.6, 425.0], [90.7, 426.0], [90.8, 426.0], [90.9, 426.0], [91.0, 427.0], [91.1, 427.0], [91.2, 427.0], [91.3, 428.0], [91.4, 428.0], [91.5, 428.0], [91.6, 429.0], [91.7, 429.0], [91.8, 429.0], [91.9, 430.0], [92.0, 430.0], [92.1, 430.0], [92.2, 431.0], [92.3, 431.0], [92.4, 432.0], [92.5, 432.0], [92.6, 432.0], [92.7, 433.0], [92.8, 433.0], [92.9, 434.0], [93.0, 434.0], [93.1, 435.0], [93.2, 435.0], [93.3, 436.0], [93.4, 436.0], [93.5, 437.0], [93.6, 437.0], [93.7, 438.0], [93.8, 438.0], [93.9, 439.0], [94.0, 439.0], [94.1, 440.0], [94.2, 441.0], [94.3, 441.0], [94.4, 442.0], [94.5, 442.0], [94.6, 443.0], [94.7, 444.0], [94.8, 444.0], [94.9, 445.0], [95.0, 446.0], [95.1, 446.0], [95.2, 447.0], [95.3, 448.0], [95.4, 449.0], [95.5, 450.0], [95.6, 450.0], [95.7, 451.0], [95.8, 452.0], [95.9, 453.0], [96.0, 454.0], [96.1, 456.0], [96.2, 457.0], [96.3, 458.0], [96.4, 460.0], [96.5, 461.0], [96.6, 463.0], [96.7, 464.0], [96.8, 466.0], [96.9, 468.0], [97.0, 471.0], [97.1, 473.0], [97.2, 476.0], [97.3, 480.0], [97.4, 483.0], [97.5, 494.0], [97.6, 535.0], [97.7, 562.0], [97.8, 569.0], [97.9, 577.0], [98.0, 587.0], [98.1, 595.0], [98.2, 604.0], [98.3, 610.0], [98.4, 615.0], [98.5, 625.0], [98.6, 632.0], [98.7, 640.0], [98.8, 647.0], [98.9, 654.0], [99.0, 664.0], [99.1, 678.0], [99.2, 689.0], [99.3, 703.0], [99.4, 710.0], [99.5, 717.0], [99.6, 724.0], [99.7, 736.0], [99.8, 763.0], [99.9, 777.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 35.0, "minX": 0.0, "maxY": 143704.0, "series": [{"data": [[0.0, 179.0], [300.0, 143704.0], [600.0, 2264.0], [700.0, 1424.0], [100.0, 1755.0], [200.0, 5921.0], [400.0, 43461.0], [800.0, 35.0], [500.0, 1257.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4975.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 195025.0, "series": [{"data": [[0.0, 195025.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4975.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 974.0912936752528, "minX": 1.6615557E12, "maxY": 985.9296782384798, "series": [{"data": [[1.66155576E12, 985.9296782384798], [1.6615557E12, 974.0912936752528]], "isOverall": false, "label": "Thread Group Object Store Delete Object by Type id ", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66155576E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 21.0, "minX": 1.0, "maxY": 793.6666666666666, "series": [{"data": [[3.0, 57.5], [5.0, 97.5], [7.0, 80.0], [9.0, 65.0], [10.0, 79.0], [11.0, 33.0], [13.0, 78.5], [15.0, 93.0], [16.0, 77.0], [17.0, 126.0], [19.0, 121.0], [20.0, 136.0], [22.0, 67.0], [23.0, 108.0], [25.0, 143.66666666666666], [27.0, 21.0], [28.0, 73.5], [30.0, 139.0], [31.0, 104.5], [35.0, 129.0], [34.0, 126.33333333333333], [36.0, 86.0], [38.0, 81.33333333333333], [39.0, 86.0], [40.0, 106.5], [43.0, 132.0], [42.0, 121.5], [45.0, 98.25], [47.0, 88.0], [46.0, 93.0], [48.0, 88.0], [49.0, 139.33333333333334], [50.0, 99.30555555555556], [51.0, 139.0], [53.0, 76.8], [52.0, 84.0], [54.0, 84.25], [55.0, 103.25], [56.0, 128.5], [57.0, 74.75], [59.0, 71.5], [58.0, 79.0], [61.0, 108.16666666666667], [60.0, 151.5], [63.0, 94.11111111111111], [65.0, 79.41666666666666], [67.0, 134.5], [64.0, 138.0], [68.0, 73.25], [70.0, 104.33333333333334], [71.0, 132.0], [72.0, 106.66666666666666], [73.0, 97.4], [74.0, 87.66666666666667], [75.0, 67.0], [76.0, 84.5], [77.0, 83.5], [80.0, 110.0], [82.0, 80.5], [83.0, 89.4375], [81.0, 138.66666666666666], [86.0, 99.5], [87.0, 176.0], [85.0, 144.5], [84.0, 151.5], [91.0, 117.0], [90.0, 169.0], [89.0, 177.0], [88.0, 124.0], [92.0, 78.0], [93.0, 99.6], [95.0, 151.0], [94.0, 161.0], [96.0, 135.0], [99.0, 160.33333333333334], [101.0, 89.0], [103.0, 152.33333333333334], [102.0, 152.0], [100.0, 125.0], [106.0, 147.0], [105.0, 155.0], [104.0, 173.5], [108.0, 129.25], [110.0, 124.8], [111.0, 172.0], [112.0, 107.42857142857143], [114.0, 158.0], [115.0, 193.0], [113.0, 161.0], [119.0, 111.2], [118.0, 190.0], [117.0, 185.0], [116.0, 174.0], [121.0, 112.0], [122.0, 156.25], [123.0, 129.5], [125.0, 143.83333333333334], [126.0, 151.0], [127.0, 139.75], [128.0, 152.75], [129.0, 138.0], [131.0, 155.25], [133.0, 158.0], [134.0, 139.0], [135.0, 183.5], [132.0, 163.0], [136.0, 156.33333333333334], [138.0, 153.0], [139.0, 153.71428571428572], [140.0, 151.0], [141.0, 162.5], [142.0, 169.0], [143.0, 143.0], [144.0, 167.0], [148.0, 161.0], [149.0, 184.33333333333334], [151.0, 167.66666666666666], [150.0, 171.0], [147.0, 163.5], [145.0, 177.0], [152.0, 159.75], [153.0, 176.73684210526315], [155.0, 172.5], [156.0, 179.6], [157.0, 197.8], [158.0, 181.0], [159.0, 187.66666666666666], [160.0, 169.0], [161.0, 171.75], [162.0, 184.3], [163.0, 185.0], [165.0, 185.625], [166.0, 177.47619047619045], [167.0, 175.25], [164.0, 173.0], [175.0, 164.5], [174.0, 174.0], [173.0, 182.0], [172.0, 177.0], [171.0, 177.33333333333334], [168.0, 186.0], [183.0, 185.0], [182.0, 144.0], [181.0, 166.0], [180.0, 184.0], [179.0, 187.0], [178.0, 175.0], [177.0, 177.5], [184.0, 164.69230769230768], [185.0, 160.42857142857142], [186.0, 182.4], [187.0, 149.0], [188.0, 153.0], [190.0, 141.0], [191.0, 157.33333333333334], [199.0, 175.0], [198.0, 181.66666666666666], [197.0, 171.0], [196.0, 184.0], [195.0, 185.0], [194.0, 179.33333333333334], [192.0, 181.0], [200.0, 145.54166666666669], [202.0, 143.0], [205.0, 153.0], [207.0, 173.0], [206.0, 192.0], [204.0, 185.0], [203.0, 179.5], [201.0, 167.0], [208.0, 144.95000000000002], [209.0, 154.0], [211.0, 152.2], [212.0, 160.16666666666669], [214.0, 175.16666666666666], [215.0, 196.0], [218.0, 163.0], [219.0, 177.5], [220.0, 160.53846153846158], [221.0, 164.16666666666666], [222.0, 171.0], [223.0, 163.0], [217.0, 181.0], [216.0, 174.0], [224.0, 165.16666666666669], [225.0, 167.36363636363637], [231.0, 176.0], [230.0, 174.0], [229.0, 184.33333333333334], [227.0, 186.0], [226.0, 171.0], [238.0, 180.0], [237.0, 197.66666666666666], [236.0, 166.0], [235.0, 180.5], [234.0, 200.5], [233.0, 190.0], [243.0, 203.66666666666666], [245.0, 199.33333333333334], [246.0, 196.2], [247.0, 206.5], [244.0, 194.0], [242.0, 200.0], [241.0, 190.0], [240.0, 196.4], [248.0, 194.0], [251.0, 207.85714285714286], [252.0, 196.33333333333334], [253.0, 201.0], [255.0, 173.0], [254.0, 187.0], [270.0, 220.3076923076923], [257.0, 223.5], [259.0, 194.75], [258.0, 187.5], [261.0, 214.1111111111111], [260.0, 171.0], [262.0, 212.0], [256.0, 169.0], [265.0, 220.33333333333334], [266.0, 207.0], [267.0, 203.0], [271.0, 231.66666666666666], [264.0, 196.5], [268.0, 184.66666666666666], [274.0, 218.49999999999997], [273.0, 229.28571428571428], [272.0, 188.0], [275.0, 183.42857142857144], [284.0, 222.0], [286.0, 242.5], [285.0, 182.0], [287.0, 183.5], [276.0, 216.2], [277.0, 232.26666666666668], [278.0, 215.27272727272728], [279.0, 229.0], [280.0, 184.0], [282.0, 219.99999999999997], [281.0, 184.0], [283.0, 222.625], [300.0, 240.8], [289.0, 230.8], [288.0, 227.61538461538458], [294.0, 192.0], [290.0, 242.66666666666666], [292.0, 231.0], [293.0, 248.33333333333334], [299.0, 229.0], [303.0, 248.0], [297.0, 190.25], [298.0, 208.0], [301.0, 208.6], [302.0, 219.0], [317.0, 235.33333333333334], [310.0, 238.0], [309.0, 200.0], [308.0, 204.5], [311.0, 254.61111111111111], [312.0, 265.31818181818176], [313.0, 247.47619047619045], [314.0, 225.6], [315.0, 251.59259259259258], [316.0, 214.85714285714286], [307.0, 204.0], [306.0, 184.0], [305.0, 192.0], [304.0, 181.0], [318.0, 216.27272727272728], [335.0, 173.0], [328.0, 244.0909090909091], [329.0, 255.2962962962964], [330.0, 243.33333333333334], [331.0, 229.39130434782606], [334.0, 167.0], [333.0, 178.0], [332.0, 178.33333333333334], [323.0, 173.0], [322.0, 182.0], [321.0, 183.0], [320.0, 176.0], [327.0, 172.5], [326.0, 185.5], [324.0, 180.75], [349.0, 217.0], [338.0, 260.85185185185185], [337.0, 226.07142857142856], [343.0, 174.66666666666666], [339.0, 210.27272727272725], [348.0, 173.5], [351.0, 201.14285714285714], [341.0, 220.77777777777777], [340.0, 179.25], [342.0, 233.0], [344.0, 216.08333333333334], [345.0, 224.71428571428572], [346.0, 254.33333333333334], [347.0, 215.0], [354.0, 257.5714285714286], [353.0, 241.00000000000003], [355.0, 274.0], [365.0, 166.66666666666666], [364.0, 166.6], [356.0, 199.14285714285717], [357.0, 185.0], [358.0, 264.5], [359.0, 217.4], [352.0, 171.0], [361.0, 209.66666666666666], [362.0, 271.0], [363.0, 173.66666666666666], [366.0, 246.00000000000006], [367.0, 264.5], [360.0, 167.0], [381.0, 276.0], [370.0, 226.0], [368.0, 237.5], [369.0, 170.5], [375.0, 178.0], [371.0, 235.5], [380.0, 163.28571428571428], [373.0, 187.25], [372.0, 163.5], [374.0, 205.5], [376.0, 258.0], [377.0, 206.0], [378.0, 269.0], [379.0, 174.77777777777777], [383.0, 163.0], [382.0, 155.5], [396.0, 179.9], [388.0, 225.5], [389.0, 224.0], [391.0, 234.42857142857142], [387.0, 166.5], [385.0, 159.0], [384.0, 159.4], [390.0, 159.66666666666666], [392.0, 193.6], [394.0, 292.0], [393.0, 181.0], [395.0, 180.5], [398.0, 197.0], [399.0, 261.0], [397.0, 168.25], [401.0, 302.6], [400.0, 181.3], [402.0, 211.0], [403.0, 167.36363636363637], [412.0, 221.08333333333331], [413.0, 263.0], [414.0, 219.33333333333334], [415.0, 228.66666666666666], [404.0, 271.5], [405.0, 287.57142857142856], [406.0, 272.75], [407.0, 266.6666666666667], [408.0, 304.4285714285714], [409.0, 242.7142857142857], [410.0, 308.0], [411.0, 314.65217391304344], [417.0, 224.33333333333334], [416.0, 257.06249999999994], [418.0, 243.75], [419.0, 277.25], [420.0, 303.25], [421.0, 258.88235294117646], [422.0, 277.91666666666663], [423.0, 200.5], [424.0, 305.1111111111111], [425.0, 153.0], [431.0, 288.41176470588243], [428.0, 327.0], [429.0, 161.6], [430.0, 316.9375], [426.0, 244.93333333333334], [427.0, 297.85714285714283], [433.0, 273.0], [432.0, 292.9473684210526], [435.0, 181.77777777777777], [444.0, 162.0], [436.0, 281.1], [437.0, 316.8333333333333], [438.0, 298.0], [439.0, 277.0], [442.0, 205.93749999999997], [441.0, 168.0], [440.0, 157.0], [443.0, 170.0], [447.0, 155.83333333333331], [446.0, 158.2], [445.0, 297.3333333333333], [461.0, 270.14285714285717], [459.0, 283.58620689655174], [460.0, 251.75], [451.0, 162.5], [450.0, 157.0], [449.0, 156.25000000000003], [448.0, 152.54545454545453], [462.0, 233.0], [463.0, 196.21428571428572], [457.0, 155.42857142857142], [455.0, 155.57142857142858], [454.0, 155.5], [453.0, 161.66666666666666], [476.0, 242.64705882352945], [464.0, 297.14285714285717], [465.0, 222.8333333333333], [467.0, 154.5], [466.0, 154.33333333333334], [477.0, 181.52380952380955], [478.0, 286.9090909090909], [479.0, 220.5], [468.0, 216.7], [469.0, 270.75], [471.0, 230.24999999999997], [470.0, 168.54545454545453], [472.0, 186.5], [473.0, 282.2857142857143], [474.0, 277.8888888888889], [475.0, 202.63157894736844], [493.0, 265.1428571428571], [480.0, 186.5], [482.0, 203.57142857142856], [481.0, 178.375], [492.0, 168.0], [483.0, 173.5], [494.0, 322.3333333333333], [495.0, 197.7777777777778], [485.0, 399.3333333333333], [484.0, 176.0], [486.0, 211.25], [487.0, 271.0], [488.0, 199.23999999999998], [489.0, 393.0], [490.0, 329.0769230769231], [491.0, 349.6], [508.0, 386.2758620689655], [498.0, 319.23809523809524], [497.0, 341.75], [503.0, 174.89473684210526], [496.0, 168.66666666666666], [499.0, 255.4], [510.0, 411.75], [511.0, 222.19047619047618], [501.0, 228.37499999999997], [500.0, 171.33333333333334], [502.0, 192.45833333333334], [504.0, 327.7037037037037], [505.0, 245.53846153846155], [506.0, 337.70000000000005], [507.0, 241.33333333333334], [515.0, 371.66666666666663], [512.0, 406.0], [527.0, 314.30769230769226], [525.0, 312.5625], [526.0, 355.9], [522.0, 408.2222222222222], [523.0, 181.4], [524.0, 286.0384615384615], [513.0, 279.11111111111114], [514.0, 387.49999999999994], [516.0, 371.0000000000001], [517.0, 366.6666666666667], [518.0, 389.15384615384613], [519.0, 274.74999999999994], [528.0, 398.3333333333333], [542.0, 314.6666666666667], [543.0, 279.8], [540.0, 310.35714285714283], [541.0, 324.9523809523809], [538.0, 295.16666666666663], [539.0, 215.875], [536.0, 329.8333333333333], [537.0, 350.56249999999994], [529.0, 332.7647058823529], [530.0, 245.0476190476191], [531.0, 334.8500000000001], [532.0, 307.24], [533.0, 184.5], [534.0, 232.27777777777777], [535.0, 365.0], [520.0, 339.2857142857143], [521.0, 293.5], [551.0, 211.4], [546.0, 284.7777777777778], [544.0, 359.125], [545.0, 193.5], [558.0, 281.5], [557.0, 205.0], [559.0, 214.44444444444446], [547.0, 312.4545454545455], [548.0, 189.00000000000003], [549.0, 246.16666666666666], [550.0, 233.0], [560.0, 401.2], [573.0, 231.66666666666666], [574.0, 202.5], [575.0, 288.25], [571.0, 215.1428571428571], [572.0, 315.0], [569.0, 368.46153846153845], [568.0, 202.99999999999997], [570.0, 260.0], [561.0, 393.5], [562.0, 269.6], [563.0, 257.0], [564.0, 321.2105263157895], [565.0, 205.38461538461536], [567.0, 259.55555555555554], [566.0, 199.75], [553.0, 274.6666666666667], [552.0, 193.4666666666667], [554.0, 328.12499999999994], [555.0, 226.2], [556.0, 248.73333333333335], [580.0, 334.5882352941176], [589.0, 221.3157894736842], [578.0, 245.37499999999997], [577.0, 283.8260869565217], [576.0, 202.0], [590.0, 308.53846153846155], [591.0, 290.1666666666667], [579.0, 233.16666666666666], [581.0, 240.75], [583.0, 219.57142857142858], [582.0, 218.75], [592.0, 292.75], [599.0, 213.0], [598.0, 212.4], [597.0, 209.5], [596.0, 211.99999999999997], [595.0, 213.9230769230769], [594.0, 205.0], [593.0, 204.25], [607.0, 353.4], [605.0, 311.1666666666667], [604.0, 213.57142857142858], [603.0, 217.29999999999998], [602.0, 210.85714285714283], [606.0, 357.90000000000003], [601.0, 246.2], [586.0, 243.33333333333331], [585.0, 206.0], [584.0, 211.00000000000003], [587.0, 231.4], [588.0, 245.25], [614.0, 331.2105263157895], [621.0, 230.37500000000003], [610.0, 366.3636363636364], [608.0, 285.8], [609.0, 212.125], [622.0, 317.16666666666663], [623.0, 216.57142857142856], [611.0, 313.5277777777778], [612.0, 215.75], [615.0, 331.29629629629625], [633.0, 231.66666666666666], [632.0, 229.66666666666666], [634.0, 395.8], [635.0, 428.6], [636.0, 372.2727272727273], [637.0, 269.4], [639.0, 404.2222222222223], [624.0, 217.66666666666669], [626.0, 217.3913043478261], [625.0, 217.14285714285714], [628.0, 221.5], [627.0, 218.33333333333331], [638.0, 228.0], [629.0, 321.0], [630.0, 298.3076923076923], [631.0, 340.4], [616.0, 296.42105263157896], [617.0, 406.6], [618.0, 427.46666666666664], [620.0, 218.33333333333334], [619.0, 212.33333333333334], [643.0, 449.1111111111111], [640.0, 339.6086956521739], [655.0, 363.30303030303037], [652.0, 306.88], [653.0, 256.0], [654.0, 257.59999999999997], [650.0, 302.25], [651.0, 403.5263157894737], [641.0, 281.88888888888886], [642.0, 280.30769230769226], [644.0, 370.15384615384613], [645.0, 428.3225806451613], [646.0, 251.08695652173913], [647.0, 283.5], [658.0, 313.59999999999997], [657.0, 255.2857142857143], [656.0, 254.0], [659.0, 245.0], [671.0, 275.2857142857143], [670.0, 255.93750000000006], [669.0, 254.66666666666666], [667.0, 339.3636363636364], [668.0, 277.1363636363637], [664.0, 363.0], [665.0, 247.578947368421], [666.0, 269.6666666666667], [660.0, 339.4], [661.0, 325.6666666666667], [663.0, 348.42857142857144], [662.0, 247.33333333333334], [648.0, 305.0625], [649.0, 267.72727272727275], [699.0, 426.0], [675.0, 304.5], [673.0, 470.3157894736842], [672.0, 312.88888888888886], [687.0, 277.12820512820514], [686.0, 279.0], [685.0, 274.25], [684.0, 280.14285714285717], [674.0, 280.22222222222223], [676.0, 428.1428571428572], [677.0, 357.8857142857143], [680.0, 392.35714285714295], [682.0, 271.6666666666667], [681.0, 269.72727272727275], [683.0, 396.0], [688.0, 335.05405405405395], [701.0, 489.50000000000006], [700.0, 342.5], [702.0, 326.4166666666667], [703.0, 332.0909090909091], [696.0, 339.18750000000006], [679.0, 275.5], [678.0, 267.125], [698.0, 328.24999999999994], [697.0, 332.0], [689.0, 301.08333333333337], [690.0, 427.2857142857143], [691.0, 340.77049180327873], [692.0, 482.53333333333336], [693.0, 343.1851851851852], [695.0, 320.11764705882354], [694.0, 316.0], [710.0, 347.77777777777777], [705.0, 361.2333333333333], [704.0, 378.0], [707.0, 361.61290322580635], [706.0, 331.42857142857144], [708.0, 408.55555555555554], [709.0, 353.4545454545455], [720.0, 409.79999999999995], [735.0, 333.5], [733.0, 339.5], [732.0, 330.0], [731.0, 333.87499999999994], [730.0, 332.0], [729.0, 336.0], [728.0, 328.0], [711.0, 330.7777777777778], [721.0, 355.84999999999997], [722.0, 386.7894736842106], [723.0, 368.6666666666667], [725.0, 380.71428571428567], [724.0, 329.53846153846155], [726.0, 340.65217391304344], [727.0, 341.0], [712.0, 423.0], [713.0, 336.3333333333333], [714.0, 415.0], [715.0, 442.72727272727275], [716.0, 327.09090909090907], [718.0, 340.3333333333333], [717.0, 325.0], [719.0, 336.0], [740.0, 447.2], [747.0, 414.2727272727273], [737.0, 369.0], [739.0, 334.83333333333337], [738.0, 336.66666666666663], [751.0, 352.57575757575756], [736.0, 334.1875], [741.0, 597.5], [742.0, 335.0], [743.0, 378.33333333333337], [753.0, 407.1818181818182], [755.0, 335.9], [754.0, 333.44444444444446], [767.0, 384.50000000000006], [752.0, 327.0], [763.0, 495.88235294117635], [765.0, 345.75], [766.0, 470.07692307692304], [761.0, 417.29411764705884], [760.0, 344.1428571428571], [762.0, 436.14285714285717], [756.0, 469.8571428571428], [757.0, 412.1000000000001], [759.0, 426.71428571428567], [758.0, 339.1052631578947], [744.0, 370.0], [745.0, 555.25], [746.0, 368.05882352941177], [748.0, 469.73684210526324], [749.0, 332.99999999999994], [750.0, 444.12499999999994], [774.0, 373.1666666666667], [770.0, 423.75], [769.0, 452.77777777777777], [783.0, 338.65], [782.0, 332.46428571428567], [781.0, 325.625], [780.0, 331.3157894736842], [771.0, 370.4615384615385], [773.0, 348.3333333333333], [772.0, 342.7272727272727], [778.0, 353.76923076923083], [777.0, 323.6666666666667], [776.0, 326.44999999999993], [779.0, 499.3333333333333], [785.0, 444.14285714285717], [784.0, 333.83333333333337], [798.0, 437.6842105263158], [799.0, 452.67999999999995], [794.0, 457.0526315789474], [796.0, 342.45454545454544], [795.0, 336.42105263157896], [797.0, 592.7857142857143], [792.0, 497.0], [775.0, 321.0], [793.0, 436.73333333333335], [786.0, 476.37499999999994], [787.0, 519.1176470588234], [788.0, 570.1428571428571], [791.0, 335.22222222222223], [790.0, 335.0], [789.0, 340.6153846153846], [803.0, 497.8235294117646], [800.0, 363.4666666666666], [801.0, 444.4], [802.0, 572.375], [804.0, 435.84615384615387], [805.0, 389.235294117647], [806.0, 392.74999999999994], [824.0, 508.44444444444457], [825.0, 498.24999999999994], [827.0, 358.9761904761905], [826.0, 362.5], [828.0, 544.5833333333334], [831.0, 361.6153846153846], [830.0, 362.99999999999994], [829.0, 361.6666666666667], [808.0, 447.46153846153845], [810.0, 353.0], [809.0, 345.85714285714283], [812.0, 349.62499999999994], [811.0, 345.77777777777777], [814.0, 351.21739130434787], [813.0, 356.00000000000006], [815.0, 347.5], [816.0, 400.0], [817.0, 607.2727272727271], [818.0, 699.5555555555555], [819.0, 705.875], [820.0, 555.3478260869564], [822.0, 449.25000000000006], [821.0, 360.77777777777777], [823.0, 364.0], [838.0, 439.62500000000006], [833.0, 609.2765957446809], [832.0, 410.13043478260863], [845.0, 379.7391304347826], [846.0, 373.54545454545456], [847.0, 375.7857142857143], [834.0, 483.55555555555554], [835.0, 426.5], [837.0, 434.72727272727275], [836.0, 364.44117647058823], [839.0, 636.782608695652], [856.0, 380.9166666666667], [858.0, 561.0], [859.0, 525.9090909090909], [860.0, 393.3142857142858], [861.0, 543.8571428571429], [863.0, 510.24193548387086], [849.0, 377.61290322580646], [848.0, 375.91666666666663], [851.0, 376.5], [850.0, 372.0], [853.0, 380.13333333333327], [852.0, 383.42307692307696], [855.0, 382.33333333333326], [854.0, 398.5], [862.0, 377.0], [842.0, 406.59999999999997], [841.0, 368.0454545454545], [840.0, 387.3333333333333], [843.0, 368.3333333333333], [844.0, 463.9402985074628], [890.0, 409.15789473684214], [866.0, 595.9545454545453], [864.0, 434.6086956521739], [865.0, 388.81818181818187], [871.0, 471.2857142857143], [870.0, 383.75], [869.0, 382.7142857142857], [868.0, 384.2758620689655], [867.0, 386.5625], [889.0, 393.0], [888.0, 389.6666666666667], [893.0, 409.3888888888889], [892.0, 391.04999999999995], [891.0, 390.6666666666667], [894.0, 470.09999999999997], [895.0, 385.5], [880.0, 388.30952380952374], [872.0, 449.72727272727275], [874.0, 381.85714285714283], [873.0, 385.6], [875.0, 487.54901960784326], [878.0, 560.7777777777778], [877.0, 385.3], [876.0, 380.68965517241384], [879.0, 466.0], [881.0, 522.0], [882.0, 465.25], [883.0, 409.50000000000006], [884.0, 610.7142857142858], [885.0, 524.3333333333334], [887.0, 389.42307692307696], [886.0, 386.4285714285714], [903.0, 398.3888888888889], [898.0, 411.63157894736844], [896.0, 425.80952380952385], [897.0, 390.6666666666667], [911.0, 458.4], [910.0, 387.6428571428572], [909.0, 390.61538461538464], [899.0, 565.1999999999999], [900.0, 389.6363636363637], [901.0, 670.9375], [902.0, 658.4705882352941], [919.0, 619.9375], [918.0, 390.0], [917.0, 387.3571428571429], [916.0, 386.85185185185185], [915.0, 386.8181818181818], [914.0, 386.65625], [913.0, 383.4222222222222], [912.0, 386.94444444444446], [925.0, 473.7777777777778], [926.0, 384.2000000000001], [927.0, 462.9705882352942], [922.0, 459.26923076923066], [921.0, 380.25], [923.0, 386.63888888888897], [924.0, 459.45000000000005], [905.0, 514.6666666666667], [904.0, 391.09090909090907], [906.0, 604.8], [907.0, 404.2971014492755], [908.0, 527.3636363636364], [933.0, 471.76923076923083], [940.0, 409.1862745098039], [930.0, 413.17391304347825], [928.0, 385.84574468085106], [929.0, 389.3333333333333], [942.0, 398.52000000000004], [941.0, 376.1122448979593], [943.0, 376.18300653594787], [931.0, 405.7435897435898], [932.0, 386.55555555555554], [934.0, 509.6666666666666], [935.0, 381.482993197279], [952.0, 352.4137931034485], [954.0, 624.4615384615383], [953.0, 343.2222222222223], [955.0, 347.68749999999994], [956.0, 360.3389830508475], [957.0, 325.71839080459773], [958.0, 344.1212121212122], [959.0, 457.8695652173913], [944.0, 374.0394736842106], [945.0, 402.4], [947.0, 362.5714285714286], [946.0, 364.02222222222207], [948.0, 404.95348837209303], [950.0, 362.8913043478261], [949.0, 355.6956521739129], [951.0, 387.0990990990991], [936.0, 392.32432432432444], [937.0, 451.74999999999994], [939.0, 505.87500000000006], [938.0, 380.8947368421051], [967.0, 310.3561643835617], [961.0, 662.25], [960.0, 591.4], [962.0, 319.469696969697], [964.0, 312.078431372549], [965.0, 399.1084337349399], [966.0, 318.19718309859155], [978.0, 793.6666666666666], [979.0, 313.9178082191782], [991.0, 467.0800000000001], [977.0, 307.4230769230769], [976.0, 307.5], [989.0, 349.31818181818187], [990.0, 353.2333333333334], [987.0, 357.66666666666663], [988.0, 404.2142857142856], [985.0, 374.4], [984.0, 317.14285714285717], [986.0, 404.5], [980.0, 380.1428571428571], [981.0, 674.75], [982.0, 348.60606060606057], [983.0, 483.8437499999999], [969.0, 589.8095238095237], [968.0, 299.6666666666667], [970.0, 366.408163265306], [972.0, 336.66666666666663], [971.0, 302.00000000000006], [974.0, 300.2999999999999], [973.0, 298.5833333333333], [975.0, 294.5], [995.0, 401.8219178082193], [992.0, 431.05084745762707], [993.0, 441.66], [994.0, 416.1101694915256], [996.0, 470.11249999999984], [997.0, 454.5555555555556], [998.0, 638.75], [999.0, 452.0766283524905], [1000.0, 380.8552232104608], [1.0, 36.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[982.5296349999988, 378.6440150000073]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 36379.3, "minX": 1.6615557E12, "maxY": 698539.1, "series": [{"data": [[1.66155576E12, 90287.36666666667], [1.6615557E12, 36379.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66155576E12, 698539.1], [1.6615557E12, 281460.9]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66155576E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 372.9823792254448, "minX": 1.6615557E12, "maxY": 392.69525251998243, "series": [{"data": [[1.66155576E12, 372.9823792254448], [1.6615557E12, 392.69525251998243]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66155576E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 372.98219684481484, "minX": 1.6615557E12, "maxY": 392.69495656412937, "series": [{"data": [[1.66155576E12, 372.98219684481484], [1.6615557E12, 392.69495656412937]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66155576E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0014871035851822915, "minX": 1.6615557E12, "maxY": 0.01131595898400077, "series": [{"data": [[1.66155576E12, 0.0014871035851822915], [1.6615557E12, 0.01131595898400077]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66155576E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 21.0, "minX": 1.6615557E12, "maxY": 870.0, "series": [{"data": [[1.66155576E12, 586.0], [1.6615557E12, 870.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66155576E12, 411.0], [1.6615557E12, 403.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66155576E12, 455.0], [1.6615557E12, 463.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66155576E12, 433.0], [1.6615557E12, 427.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66155576E12, 21.0], [1.6615557E12, 60.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66155576E12, 374.0], [1.6615557E12, 366.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66155576E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 80.0, "minX": 225.0, "maxY": 750.0, "series": [{"data": [[921.0, 750.0], [1002.0, 245.0], [1081.0, 400.0], [1377.0, 659.0], [1737.0, 613.0], [2145.0, 182.0], [2358.0, 479.0], [2416.0, 398.0], [2371.0, 393.0], [2365.0, 413.0], [2374.0, 422.0], [2379.0, 421.0], [2392.0, 416.0], [2399.0, 382.0], [2457.0, 407.0], [2547.0, 370.0], [2517.0, 393.0], [2484.0, 405.0], [2506.0, 393.0], [2459.0, 394.0], [2545.0, 397.0], [2530.0, 393.0], [2494.0, 402.0], [2450.0, 402.0], [2483.0, 402.0], [2470.0, 402.0], [2477.0, 382.0], [2478.0, 393.0], [2630.0, 369.0], [2586.0, 365.0], [2596.0, 377.0], [2613.0, 375.0], [2671.0, 372.0], [2685.0, 377.0], [2660.0, 382.0], [2669.0, 375.0], [2588.0, 403.0], [2670.0, 361.0], [2651.0, 384.0], [2619.0, 371.0], [2638.0, 364.5], [2637.0, 378.0], [2567.0, 390.0], [2575.0, 341.0], [2793.0, 356.0], [2746.0, 365.0], [2729.0, 383.0], [2736.0, 369.0], [2787.0, 362.5], [2724.0, 367.0], [2725.0, 351.0], [2809.0, 369.0], [2803.0, 355.0], [2813.0, 359.0], [2701.0, 358.0], [2759.0, 368.0], [2790.0, 361.0], [2766.0, 371.0], [2765.0, 367.0], [2863.0, 346.0], [2866.0, 338.0], [2858.0, 353.0], [2860.0, 350.0], [2908.0, 342.0], [2852.0, 364.0], [2868.0, 349.0], [2958.0, 335.0], [2993.0, 344.0], [2963.0, 359.0], [2959.0, 359.0], [3150.0, 309.0], [225.0, 80.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3150.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 80.0, "minX": 225.0, "maxY": 750.0, "series": [{"data": [[921.0, 750.0], [1002.0, 245.0], [1081.0, 400.0], [1377.0, 659.0], [1737.0, 613.0], [2145.0, 182.0], [2358.0, 479.0], [2416.0, 398.0], [2371.0, 393.0], [2365.0, 413.0], [2374.0, 422.0], [2379.0, 421.0], [2392.0, 416.0], [2399.0, 382.0], [2457.0, 407.0], [2547.0, 370.0], [2517.0, 393.0], [2484.0, 405.0], [2506.0, 393.0], [2459.0, 394.0], [2545.0, 397.0], [2530.0, 393.0], [2494.0, 402.0], [2450.0, 402.0], [2483.0, 402.0], [2470.0, 402.0], [2477.0, 382.0], [2478.0, 393.0], [2630.0, 369.0], [2586.0, 365.0], [2596.0, 377.0], [2613.0, 375.0], [2671.0, 372.0], [2685.0, 377.0], [2660.0, 382.0], [2669.0, 375.0], [2588.0, 403.0], [2670.0, 361.0], [2651.0, 384.0], [2619.0, 371.0], [2638.0, 364.5], [2637.0, 378.0], [2567.0, 390.0], [2575.0, 341.0], [2793.0, 356.0], [2746.0, 365.0], [2729.0, 383.0], [2736.0, 369.0], [2787.0, 362.5], [2724.0, 367.0], [2725.0, 351.0], [2809.0, 369.0], [2803.0, 355.0], [2813.0, 359.0], [2701.0, 358.0], [2759.0, 368.0], [2790.0, 361.0], [2766.0, 371.0], [2765.0, 367.0], [2863.0, 346.0], [2866.0, 338.0], [2858.0, 353.0], [2860.0, 350.0], [2908.0, 342.0], [2852.0, 364.0], [2868.0, 349.0], [2958.0, 335.0], [2993.0, 344.0], [2963.0, 359.0], [2959.0, 359.0], [3150.0, 309.0], [225.0, 80.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3150.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 974.0166666666667, "minX": 1.6615557E12, "maxY": 2359.3166666666666, "series": [{"data": [[1.66155576E12, 2359.3166666666666], [1.6615557E12, 974.0166666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66155576E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 957.35, "minX": 1.6615557E12, "maxY": 2375.983333333333, "series": [{"data": [[1.66155576E12, 2375.983333333333], [1.6615557E12, 957.35]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66155576E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 957.35, "minX": 1.6615557E12, "maxY": 2375.983333333333, "series": [{"data": [[1.66155576E12, 2375.983333333333], [1.6615557E12, 957.35]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66155576E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 957.35, "minX": 1.6615557E12, "maxY": 2375.983333333333, "series": [{"data": [[1.66155576E12, 2375.983333333333], [1.6615557E12, 957.35]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66155576E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

