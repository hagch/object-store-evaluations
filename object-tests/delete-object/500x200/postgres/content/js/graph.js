/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 16.0, "minX": 0.0, "maxY": 527.0, "series": [{"data": [[0.0, 16.0], [0.1, 109.0], [0.2, 129.0], [0.3, 151.0], [0.4, 174.0], [0.5, 188.0], [0.6, 204.0], [0.7, 217.0], [0.8, 230.0], [0.9, 238.0], [1.0, 246.0], [1.1, 258.0], [1.2, 275.0], [1.3, 283.0], [1.4, 299.0], [1.5, 304.0], [1.6, 306.0], [1.7, 307.0], [1.8, 309.0], [1.9, 311.0], [2.0, 313.0], [2.1, 314.0], [2.2, 315.0], [2.3, 316.0], [2.4, 318.0], [2.5, 319.0], [2.6, 320.0], [2.7, 322.0], [2.8, 323.0], [2.9, 324.0], [3.0, 325.0], [3.1, 325.0], [3.2, 326.0], [3.3, 326.0], [3.4, 327.0], [3.5, 327.0], [3.6, 328.0], [3.7, 328.0], [3.8, 328.0], [3.9, 329.0], [4.0, 329.0], [4.1, 329.0], [4.2, 330.0], [4.3, 330.0], [4.4, 330.0], [4.5, 330.0], [4.6, 330.0], [4.7, 331.0], [4.8, 331.0], [4.9, 331.0], [5.0, 331.0], [5.1, 331.0], [5.2, 331.0], [5.3, 331.0], [5.4, 332.0], [5.5, 332.0], [5.6, 332.0], [5.7, 332.0], [5.8, 332.0], [5.9, 332.0], [6.0, 332.0], [6.1, 332.0], [6.2, 332.0], [6.3, 333.0], [6.4, 333.0], [6.5, 333.0], [6.6, 333.0], [6.7, 333.0], [6.8, 333.0], [6.9, 333.0], [7.0, 333.0], [7.1, 333.0], [7.2, 333.0], [7.3, 333.0], [7.4, 333.0], [7.5, 333.0], [7.6, 334.0], [7.7, 334.0], [7.8, 334.0], [7.9, 334.0], [8.0, 334.0], [8.1, 334.0], [8.2, 334.0], [8.3, 334.0], [8.4, 334.0], [8.5, 334.0], [8.6, 334.0], [8.7, 334.0], [8.8, 334.0], [8.9, 335.0], [9.0, 335.0], [9.1, 335.0], [9.2, 335.0], [9.3, 335.0], [9.4, 335.0], [9.5, 335.0], [9.6, 335.0], [9.7, 335.0], [9.8, 335.0], [9.9, 335.0], [10.0, 335.0], [10.1, 335.0], [10.2, 336.0], [10.3, 336.0], [10.4, 336.0], [10.5, 336.0], [10.6, 336.0], [10.7, 336.0], [10.8, 336.0], [10.9, 336.0], [11.0, 336.0], [11.1, 336.0], [11.2, 336.0], [11.3, 336.0], [11.4, 337.0], [11.5, 337.0], [11.6, 337.0], [11.7, 337.0], [11.8, 337.0], [11.9, 337.0], [12.0, 337.0], [12.1, 337.0], [12.2, 337.0], [12.3, 337.0], [12.4, 337.0], [12.5, 337.0], [12.6, 338.0], [12.7, 338.0], [12.8, 338.0], [12.9, 338.0], [13.0, 338.0], [13.1, 338.0], [13.2, 338.0], [13.3, 338.0], [13.4, 338.0], [13.5, 338.0], [13.6, 338.0], [13.7, 338.0], [13.8, 338.0], [13.9, 338.0], [14.0, 338.0], [14.1, 339.0], [14.2, 339.0], [14.3, 339.0], [14.4, 339.0], [14.5, 339.0], [14.6, 339.0], [14.7, 339.0], [14.8, 339.0], [14.9, 339.0], [15.0, 339.0], [15.1, 339.0], [15.2, 339.0], [15.3, 339.0], [15.4, 339.0], [15.5, 339.0], [15.6, 339.0], [15.7, 340.0], [15.8, 340.0], [15.9, 340.0], [16.0, 340.0], [16.1, 340.0], [16.2, 340.0], [16.3, 340.0], [16.4, 340.0], [16.5, 340.0], [16.6, 340.0], [16.7, 340.0], [16.8, 340.0], [16.9, 340.0], [17.0, 340.0], [17.1, 341.0], [17.2, 341.0], [17.3, 341.0], [17.4, 341.0], [17.5, 341.0], [17.6, 341.0], [17.7, 341.0], [17.8, 341.0], [17.9, 341.0], [18.0, 341.0], [18.1, 341.0], [18.2, 341.0], [18.3, 341.0], [18.4, 341.0], [18.5, 342.0], [18.6, 342.0], [18.7, 342.0], [18.8, 342.0], [18.9, 342.0], [19.0, 342.0], [19.1, 342.0], [19.2, 342.0], [19.3, 342.0], [19.4, 342.0], [19.5, 342.0], [19.6, 342.0], [19.7, 342.0], [19.8, 343.0], [19.9, 343.0], [20.0, 343.0], [20.1, 343.0], [20.2, 343.0], [20.3, 343.0], [20.4, 343.0], [20.5, 343.0], [20.6, 343.0], [20.7, 343.0], [20.8, 343.0], [20.9, 343.0], [21.0, 343.0], [21.1, 343.0], [21.2, 343.0], [21.3, 344.0], [21.4, 344.0], [21.5, 344.0], [21.6, 344.0], [21.7, 344.0], [21.8, 344.0], [21.9, 344.0], [22.0, 344.0], [22.1, 344.0], [22.2, 344.0], [22.3, 344.0], [22.4, 344.0], [22.5, 344.0], [22.6, 345.0], [22.7, 345.0], [22.8, 345.0], [22.9, 345.0], [23.0, 345.0], [23.1, 345.0], [23.2, 345.0], [23.3, 345.0], [23.4, 345.0], [23.5, 346.0], [23.6, 346.0], [23.7, 346.0], [23.8, 346.0], [23.9, 346.0], [24.0, 346.0], [24.1, 346.0], [24.2, 346.0], [24.3, 347.0], [24.4, 347.0], [24.5, 347.0], [24.6, 347.0], [24.7, 347.0], [24.8, 348.0], [24.9, 348.0], [25.0, 348.0], [25.1, 348.0], [25.2, 348.0], [25.3, 348.0], [25.4, 349.0], [25.5, 349.0], [25.6, 349.0], [25.7, 349.0], [25.8, 349.0], [25.9, 349.0], [26.0, 350.0], [26.1, 350.0], [26.2, 350.0], [26.3, 350.0], [26.4, 350.0], [26.5, 351.0], [26.6, 351.0], [26.7, 351.0], [26.8, 351.0], [26.9, 351.0], [27.0, 352.0], [27.1, 352.0], [27.2, 352.0], [27.3, 353.0], [27.4, 353.0], [27.5, 353.0], [27.6, 353.0], [27.7, 354.0], [27.8, 354.0], [27.9, 354.0], [28.0, 354.0], [28.1, 355.0], [28.2, 355.0], [28.3, 355.0], [28.4, 355.0], [28.5, 355.0], [28.6, 356.0], [28.7, 356.0], [28.8, 356.0], [28.9, 356.0], [29.0, 356.0], [29.1, 357.0], [29.2, 357.0], [29.3, 357.0], [29.4, 357.0], [29.5, 358.0], [29.6, 358.0], [29.7, 358.0], [29.8, 358.0], [29.9, 359.0], [30.0, 359.0], [30.1, 359.0], [30.2, 360.0], [30.3, 360.0], [30.4, 360.0], [30.5, 360.0], [30.6, 361.0], [30.7, 361.0], [30.8, 361.0], [30.9, 362.0], [31.0, 362.0], [31.1, 362.0], [31.2, 362.0], [31.3, 363.0], [31.4, 363.0], [31.5, 363.0], [31.6, 363.0], [31.7, 364.0], [31.8, 364.0], [31.9, 364.0], [32.0, 364.0], [32.1, 365.0], [32.2, 365.0], [32.3, 365.0], [32.4, 366.0], [32.5, 366.0], [32.6, 366.0], [32.7, 367.0], [32.8, 367.0], [32.9, 367.0], [33.0, 367.0], [33.1, 368.0], [33.2, 368.0], [33.3, 368.0], [33.4, 368.0], [33.5, 368.0], [33.6, 369.0], [33.7, 369.0], [33.8, 369.0], [33.9, 369.0], [34.0, 369.0], [34.1, 369.0], [34.2, 369.0], [34.3, 370.0], [34.4, 370.0], [34.5, 370.0], [34.6, 370.0], [34.7, 370.0], [34.8, 370.0], [34.9, 370.0], [35.0, 370.0], [35.1, 370.0], [35.2, 370.0], [35.3, 370.0], [35.4, 370.0], [35.5, 371.0], [35.6, 371.0], [35.7, 371.0], [35.8, 371.0], [35.9, 371.0], [36.0, 371.0], [36.1, 371.0], [36.2, 371.0], [36.3, 371.0], [36.4, 371.0], [36.5, 371.0], [36.6, 371.0], [36.7, 371.0], [36.8, 371.0], [36.9, 371.0], [37.0, 371.0], [37.1, 371.0], [37.2, 371.0], [37.3, 372.0], [37.4, 372.0], [37.5, 372.0], [37.6, 372.0], [37.7, 372.0], [37.8, 372.0], [37.9, 372.0], [38.0, 372.0], [38.1, 372.0], [38.2, 372.0], [38.3, 372.0], [38.4, 372.0], [38.5, 372.0], [38.6, 372.0], [38.7, 372.0], [38.8, 372.0], [38.9, 372.0], [39.0, 372.0], [39.1, 372.0], [39.2, 372.0], [39.3, 372.0], [39.4, 373.0], [39.5, 373.0], [39.6, 373.0], [39.7, 373.0], [39.8, 373.0], [39.9, 373.0], [40.0, 373.0], [40.1, 373.0], [40.2, 373.0], [40.3, 373.0], [40.4, 373.0], [40.5, 373.0], [40.6, 373.0], [40.7, 373.0], [40.8, 373.0], [40.9, 373.0], [41.0, 373.0], [41.1, 373.0], [41.2, 373.0], [41.3, 373.0], [41.4, 373.0], [41.5, 374.0], [41.6, 374.0], [41.7, 374.0], [41.8, 374.0], [41.9, 374.0], [42.0, 374.0], [42.1, 374.0], [42.2, 374.0], [42.3, 374.0], [42.4, 374.0], [42.5, 374.0], [42.6, 374.0], [42.7, 374.0], [42.8, 374.0], [42.9, 374.0], [43.0, 374.0], [43.1, 374.0], [43.2, 374.0], [43.3, 374.0], [43.4, 374.0], [43.5, 374.0], [43.6, 375.0], [43.7, 375.0], [43.8, 375.0], [43.9, 375.0], [44.0, 375.0], [44.1, 375.0], [44.2, 375.0], [44.3, 375.0], [44.4, 375.0], [44.5, 375.0], [44.6, 375.0], [44.7, 375.0], [44.8, 375.0], [44.9, 375.0], [45.0, 375.0], [45.1, 375.0], [45.2, 375.0], [45.3, 375.0], [45.4, 375.0], [45.5, 375.0], [45.6, 375.0], [45.7, 375.0], [45.8, 375.0], [45.9, 375.0], [46.0, 375.0], [46.1, 376.0], [46.2, 376.0], [46.3, 376.0], [46.4, 376.0], [46.5, 376.0], [46.6, 376.0], [46.7, 376.0], [46.8, 376.0], [46.9, 376.0], [47.0, 376.0], [47.1, 376.0], [47.2, 376.0], [47.3, 376.0], [47.4, 376.0], [47.5, 376.0], [47.6, 376.0], [47.7, 376.0], [47.8, 376.0], [47.9, 376.0], [48.0, 376.0], [48.1, 376.0], [48.2, 376.0], [48.3, 376.0], [48.4, 376.0], [48.5, 376.0], [48.6, 376.0], [48.7, 376.0], [48.8, 376.0], [48.9, 376.0], [49.0, 376.0], [49.1, 377.0], [49.2, 377.0], [49.3, 377.0], [49.4, 377.0], [49.5, 377.0], [49.6, 377.0], [49.7, 377.0], [49.8, 377.0], [49.9, 377.0], [50.0, 377.0], [50.1, 377.0], [50.2, 377.0], [50.3, 377.0], [50.4, 377.0], [50.5, 377.0], [50.6, 377.0], [50.7, 377.0], [50.8, 377.0], [50.9, 377.0], [51.0, 377.0], [51.1, 377.0], [51.2, 377.0], [51.3, 377.0], [51.4, 377.0], [51.5, 377.0], [51.6, 377.0], [51.7, 377.0], [51.8, 377.0], [51.9, 377.0], [52.0, 377.0], [52.1, 377.0], [52.2, 377.0], [52.3, 377.0], [52.4, 377.0], [52.5, 378.0], [52.6, 378.0], [52.7, 378.0], [52.8, 378.0], [52.9, 378.0], [53.0, 378.0], [53.1, 378.0], [53.2, 378.0], [53.3, 378.0], [53.4, 378.0], [53.5, 378.0], [53.6, 378.0], [53.7, 378.0], [53.8, 378.0], [53.9, 378.0], [54.0, 378.0], [54.1, 378.0], [54.2, 378.0], [54.3, 378.0], [54.4, 378.0], [54.5, 378.0], [54.6, 378.0], [54.7, 378.0], [54.8, 378.0], [54.9, 378.0], [55.0, 378.0], [55.1, 378.0], [55.2, 378.0], [55.3, 378.0], [55.4, 378.0], [55.5, 378.0], [55.6, 378.0], [55.7, 378.0], [55.8, 378.0], [55.9, 378.0], [56.0, 379.0], [56.1, 379.0], [56.2, 379.0], [56.3, 379.0], [56.4, 379.0], [56.5, 379.0], [56.6, 379.0], [56.7, 379.0], [56.8, 379.0], [56.9, 379.0], [57.0, 379.0], [57.1, 379.0], [57.2, 379.0], [57.3, 379.0], [57.4, 379.0], [57.5, 379.0], [57.6, 379.0], [57.7, 379.0], [57.8, 379.0], [57.9, 379.0], [58.0, 379.0], [58.1, 379.0], [58.2, 379.0], [58.3, 379.0], [58.4, 379.0], [58.5, 379.0], [58.6, 379.0], [58.7, 379.0], [58.8, 379.0], [58.9, 379.0], [59.0, 379.0], [59.1, 379.0], [59.2, 379.0], [59.3, 379.0], [59.4, 380.0], [59.5, 380.0], [59.6, 380.0], [59.7, 380.0], [59.8, 380.0], [59.9, 380.0], [60.0, 380.0], [60.1, 380.0], [60.2, 380.0], [60.3, 380.0], [60.4, 380.0], [60.5, 380.0], [60.6, 380.0], [60.7, 380.0], [60.8, 380.0], [60.9, 380.0], [61.0, 380.0], [61.1, 380.0], [61.2, 380.0], [61.3, 380.0], [61.4, 380.0], [61.5, 380.0], [61.6, 380.0], [61.7, 380.0], [61.8, 380.0], [61.9, 380.0], [62.0, 380.0], [62.1, 380.0], [62.2, 380.0], [62.3, 380.0], [62.4, 380.0], [62.5, 380.0], [62.6, 380.0], [62.7, 380.0], [62.8, 381.0], [62.9, 381.0], [63.0, 381.0], [63.1, 381.0], [63.2, 381.0], [63.3, 381.0], [63.4, 381.0], [63.5, 381.0], [63.6, 381.0], [63.7, 381.0], [63.8, 381.0], [63.9, 381.0], [64.0, 381.0], [64.1, 381.0], [64.2, 381.0], [64.3, 381.0], [64.4, 381.0], [64.5, 381.0], [64.6, 381.0], [64.7, 381.0], [64.8, 381.0], [64.9, 381.0], [65.0, 381.0], [65.1, 381.0], [65.2, 381.0], [65.3, 381.0], [65.4, 381.0], [65.5, 381.0], [65.6, 381.0], [65.7, 381.0], [65.8, 381.0], [65.9, 381.0], [66.0, 381.0], [66.1, 381.0], [66.2, 382.0], [66.3, 382.0], [66.4, 382.0], [66.5, 382.0], [66.6, 382.0], [66.7, 382.0], [66.8, 382.0], [66.9, 382.0], [67.0, 382.0], [67.1, 382.0], [67.2, 382.0], [67.3, 382.0], [67.4, 382.0], [67.5, 382.0], [67.6, 382.0], [67.7, 382.0], [67.8, 382.0], [67.9, 382.0], [68.0, 382.0], [68.1, 382.0], [68.2, 382.0], [68.3, 382.0], [68.4, 382.0], [68.5, 382.0], [68.6, 382.0], [68.7, 382.0], [68.8, 382.0], [68.9, 382.0], [69.0, 382.0], [69.1, 382.0], [69.2, 382.0], [69.3, 383.0], [69.4, 383.0], [69.5, 383.0], [69.6, 383.0], [69.7, 383.0], [69.8, 383.0], [69.9, 383.0], [70.0, 383.0], [70.1, 383.0], [70.2, 383.0], [70.3, 383.0], [70.4, 383.0], [70.5, 383.0], [70.6, 383.0], [70.7, 383.0], [70.8, 383.0], [70.9, 383.0], [71.0, 383.0], [71.1, 383.0], [71.2, 383.0], [71.3, 383.0], [71.4, 383.0], [71.5, 383.0], [71.6, 383.0], [71.7, 383.0], [71.8, 383.0], [71.9, 383.0], [72.0, 383.0], [72.1, 383.0], [72.2, 383.0], [72.3, 384.0], [72.4, 384.0], [72.5, 384.0], [72.6, 384.0], [72.7, 384.0], [72.8, 384.0], [72.9, 384.0], [73.0, 384.0], [73.1, 384.0], [73.2, 384.0], [73.3, 384.0], [73.4, 384.0], [73.5, 384.0], [73.6, 384.0], [73.7, 384.0], [73.8, 384.0], [73.9, 384.0], [74.0, 384.0], [74.1, 384.0], [74.2, 384.0], [74.3, 384.0], [74.4, 384.0], [74.5, 384.0], [74.6, 384.0], [74.7, 384.0], [74.8, 384.0], [74.9, 384.0], [75.0, 384.0], [75.1, 384.0], [75.2, 385.0], [75.3, 385.0], [75.4, 385.0], [75.5, 385.0], [75.6, 385.0], [75.7, 385.0], [75.8, 385.0], [75.9, 385.0], [76.0, 385.0], [76.1, 385.0], [76.2, 385.0], [76.3, 385.0], [76.4, 385.0], [76.5, 385.0], [76.6, 385.0], [76.7, 385.0], [76.8, 385.0], [76.9, 385.0], [77.0, 385.0], [77.1, 385.0], [77.2, 385.0], [77.3, 385.0], [77.4, 385.0], [77.5, 385.0], [77.6, 385.0], [77.7, 385.0], [77.8, 385.0], [77.9, 386.0], [78.0, 386.0], [78.1, 386.0], [78.2, 386.0], [78.3, 386.0], [78.4, 386.0], [78.5, 386.0], [78.6, 386.0], [78.7, 386.0], [78.8, 386.0], [78.9, 386.0], [79.0, 386.0], [79.1, 386.0], [79.2, 386.0], [79.3, 386.0], [79.4, 386.0], [79.5, 386.0], [79.6, 386.0], [79.7, 386.0], [79.8, 386.0], [79.9, 386.0], [80.0, 386.0], [80.1, 386.0], [80.2, 386.0], [80.3, 386.0], [80.4, 387.0], [80.5, 387.0], [80.6, 387.0], [80.7, 387.0], [80.8, 387.0], [80.9, 387.0], [81.0, 387.0], [81.1, 387.0], [81.2, 387.0], [81.3, 387.0], [81.4, 387.0], [81.5, 387.0], [81.6, 387.0], [81.7, 387.0], [81.8, 387.0], [81.9, 387.0], [82.0, 387.0], [82.1, 387.0], [82.2, 387.0], [82.3, 387.0], [82.4, 387.0], [82.5, 387.0], [82.6, 387.0], [82.7, 388.0], [82.8, 388.0], [82.9, 388.0], [83.0, 388.0], [83.1, 388.0], [83.2, 388.0], [83.3, 388.0], [83.4, 388.0], [83.5, 388.0], [83.6, 388.0], [83.7, 388.0], [83.8, 388.0], [83.9, 388.0], [84.0, 388.0], [84.1, 388.0], [84.2, 388.0], [84.3, 388.0], [84.4, 388.0], [84.5, 388.0], [84.6, 389.0], [84.7, 389.0], [84.8, 389.0], [84.9, 389.0], [85.0, 389.0], [85.1, 389.0], [85.2, 389.0], [85.3, 389.0], [85.4, 389.0], [85.5, 389.0], [85.6, 389.0], [85.7, 389.0], [85.8, 389.0], [85.9, 389.0], [86.0, 389.0], [86.1, 390.0], [86.2, 390.0], [86.3, 390.0], [86.4, 390.0], [86.5, 390.0], [86.6, 390.0], [86.7, 390.0], [86.8, 390.0], [86.9, 390.0], [87.0, 390.0], [87.1, 390.0], [87.2, 391.0], [87.3, 391.0], [87.4, 391.0], [87.5, 391.0], [87.6, 391.0], [87.7, 391.0], [87.8, 391.0], [87.9, 391.0], [88.0, 392.0], [88.1, 392.0], [88.2, 392.0], [88.3, 392.0], [88.4, 392.0], [88.5, 392.0], [88.6, 392.0], [88.7, 392.0], [88.8, 393.0], [88.9, 393.0], [89.0, 393.0], [89.1, 393.0], [89.2, 393.0], [89.3, 393.0], [89.4, 394.0], [89.5, 394.0], [89.6, 394.0], [89.7, 394.0], [89.8, 394.0], [89.9, 395.0], [90.0, 395.0], [90.1, 395.0], [90.2, 395.0], [90.3, 395.0], [90.4, 396.0], [90.5, 396.0], [90.6, 396.0], [90.7, 397.0], [90.8, 397.0], [90.9, 397.0], [91.0, 398.0], [91.1, 398.0], [91.2, 399.0], [91.3, 399.0], [91.4, 400.0], [91.5, 400.0], [91.6, 401.0], [91.7, 401.0], [91.8, 401.0], [91.9, 401.0], [92.0, 402.0], [92.1, 402.0], [92.2, 402.0], [92.3, 403.0], [92.4, 403.0], [92.5, 403.0], [92.6, 403.0], [92.7, 404.0], [92.8, 404.0], [92.9, 404.0], [93.0, 404.0], [93.1, 405.0], [93.2, 405.0], [93.3, 405.0], [93.4, 405.0], [93.5, 405.0], [93.6, 406.0], [93.7, 406.0], [93.8, 406.0], [93.9, 406.0], [94.0, 407.0], [94.1, 407.0], [94.2, 407.0], [94.3, 408.0], [94.4, 408.0], [94.5, 408.0], [94.6, 409.0], [94.7, 409.0], [94.8, 409.0], [94.9, 410.0], [95.0, 410.0], [95.1, 411.0], [95.2, 411.0], [95.3, 412.0], [95.4, 413.0], [95.5, 414.0], [95.6, 416.0], [95.7, 417.0], [95.8, 418.0], [95.9, 420.0], [96.0, 421.0], [96.1, 421.0], [96.2, 422.0], [96.3, 423.0], [96.4, 424.0], [96.5, 425.0], [96.6, 427.0], [96.7, 429.0], [96.8, 431.0], [96.9, 433.0], [97.0, 433.0], [97.1, 434.0], [97.2, 436.0], [97.3, 438.0], [97.4, 439.0], [97.5, 440.0], [97.6, 441.0], [97.7, 441.0], [97.8, 443.0], [97.9, 445.0], [98.0, 446.0], [98.1, 448.0], [98.2, 451.0], [98.3, 456.0], [98.4, 460.0], [98.5, 464.0], [98.6, 467.0], [98.7, 469.0], [98.8, 471.0], [98.9, 474.0], [99.0, 477.0], [99.1, 481.0], [99.2, 483.0], [99.3, 485.0], [99.4, 486.0], [99.5, 487.0], [99.6, 489.0], [99.7, 491.0], [99.8, 495.0], [99.9, 503.0], [100.0, 527.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 81.0, "minX": 0.0, "maxY": 89925.0, "series": [{"data": [[0.0, 81.0], [300.0, 89925.0], [100.0, 496.0], [200.0, 826.0], [400.0, 8541.0], [500.0, 131.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 122.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 99878.0, "series": [{"data": [[0.0, 99878.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 122.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 487.14947922221035, "minX": 1.66170336E12, "maxY": 496.729827881281, "series": [{"data": [[1.66170336E12, 496.729827881281], [1.66170342E12, 487.14947922221035]], "isOverall": false, "label": "Thread Group Object Store Delete Object by Type id ", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66170342E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 16.0, "minX": 1.0, "maxY": 435.85714285714283, "series": [{"data": [[3.0, 82.5], [4.0, 81.0], [6.0, 87.5], [8.0, 82.0], [9.0, 81.0], [10.0, 85.0], [11.0, 16.0], [12.0, 81.0], [13.0, 86.0], [15.0, 88.0], [16.0, 93.0], [18.0, 49.875], [20.0, 88.0], [21.0, 92.0], [25.0, 95.0], [26.0, 42.5], [27.0, 96.0], [30.0, 96.33333333333333], [31.0, 44.5], [32.0, 75.66666666666667], [33.0, 57.0], [35.0, 69.6], [37.0, 50.0], [39.0, 75.71428571428572], [40.0, 68.0], [41.0, 100.0], [43.0, 79.33333333333333], [44.0, 32.5], [47.0, 104.66666666666667], [49.0, 111.0], [50.0, 56.0], [51.0, 107.0], [53.0, 117.0], [55.0, 110.0], [57.0, 94.0], [56.0, 110.0], [58.0, 93.42857142857143], [61.0, 123.66666666666667], [62.0, 123.0], [67.0, 118.0], [66.0, 121.25], [69.0, 111.42857142857143], [70.0, 107.33333333333333], [71.0, 113.33333333333333], [72.0, 111.6], [74.0, 115.0], [75.0, 123.66666666666667], [73.0, 129.0], [76.0, 129.75], [77.0, 126.5], [78.0, 134.71428571428572], [79.0, 131.33333333333334], [81.0, 137.4], [82.0, 128.33333333333334], [83.0, 129.25], [80.0, 129.0], [84.0, 121.4], [85.0, 118.66666666666667], [86.0, 122.85714285714286], [87.0, 120.66666666666666], [88.0, 120.33333333333333], [90.0, 120.75], [91.0, 123.5], [92.0, 119.33333333333333], [93.0, 116.0], [95.0, 137.0], [94.0, 134.5], [96.0, 120.125], [97.0, 114.5], [98.0, 131.5], [99.0, 139.0], [100.0, 127.5], [102.0, 132.0], [103.0, 126.75], [101.0, 139.0], [104.0, 129.0], [105.0, 124.4], [107.0, 129.75], [109.0, 134.5], [111.0, 137.0], [110.0, 143.0], [108.0, 142.0], [112.0, 136.0], [113.0, 139.25], [115.0, 141.0], [114.0, 146.0], [117.0, 141.33333333333334], [119.0, 142.0], [118.0, 146.0], [123.0, 144.0], [122.0, 145.0], [121.0, 142.0], [120.0, 143.0], [127.0, 146.0], [126.0, 143.0], [125.0, 145.0], [124.0, 144.0], [133.0, 150.0], [132.0, 146.0], [131.0, 149.0], [130.0, 148.0], [129.0, 146.0], [142.0, 188.0], [143.0, 193.85714285714283], [141.0, 151.0], [140.0, 151.0], [139.0, 154.0], [138.0, 151.0], [137.0, 150.0], [136.0, 151.33333333333334], [144.0, 191.66666666666669], [146.0, 194.37500000000003], [147.0, 178.5], [148.0, 188.0], [150.0, 193.0], [151.0, 184.5], [149.0, 155.0], [145.0, 152.0], [156.0, 203.75], [158.0, 196.5], [159.0, 210.125], [157.0, 157.0], [155.0, 156.0], [154.0, 156.0], [153.0, 156.0], [152.0, 154.0], [160.0, 207.5], [161.0, 188.83333333333331], [165.0, 185.0], [166.0, 172.5], [167.0, 202.33333333333334], [164.0, 161.0], [163.0, 162.5], [162.0, 161.33333333333334], [168.0, 209.0], [175.0, 177.75], [174.0, 175.07692307692307], [173.0, 174.0], [172.0, 171.5], [171.0, 170.8], [170.0, 172.0], [169.0, 167.5], [179.0, 231.8], [180.0, 240.14285714285714], [182.0, 242.71428571428572], [183.0, 222.0], [181.0, 182.0], [178.0, 180.5], [177.0, 179.25], [176.0, 180.0], [185.0, 223.42857142857142], [186.0, 219.16666666666666], [188.0, 209.5], [189.0, 216.55555555555554], [190.0, 223.14285714285714], [191.0, 186.0], [187.0, 185.0], [184.0, 183.0], [192.0, 200.85714285714286], [193.0, 213.0], [194.0, 209.33333333333334], [195.0, 199.0], [199.0, 185.5], [198.0, 191.46666666666667], [197.0, 189.5], [196.0, 188.5], [200.0, 192.07142857142853], [202.0, 183.55555555555554], [203.0, 171.625], [205.0, 192.25], [206.0, 189.125], [207.0, 194.66666666666666], [204.0, 200.66666666666666], [201.0, 196.0], [208.0, 181.66666666666666], [211.0, 191.33333333333334], [214.0, 160.6], [215.0, 211.25], [213.0, 210.625], [212.0, 207.0], [210.0, 206.0], [209.0, 209.0], [216.0, 193.57142857142856], [217.0, 200.85714285714286], [219.0, 199.33333333333334], [220.0, 192.0], [222.0, 193.0], [223.0, 206.75], [221.0, 215.1818181818182], [218.0, 210.0], [226.0, 193.75], [227.0, 193.5], [228.0, 214.375], [229.0, 207.66666666666666], [230.0, 195.14285714285717], [231.0, 196.8], [225.0, 217.28571428571428], [232.0, 198.14285714285714], [233.0, 206.0], [236.0, 205.33333333333334], [239.0, 213.6], [238.0, 225.66666666666666], [237.0, 224.0], [235.0, 223.6], [234.0, 224.0], [241.0, 221.0], [242.0, 214.14285714285714], [243.0, 214.0], [244.0, 227.55555555555554], [245.0, 215.0], [247.0, 230.79999999999998], [246.0, 232.66666666666666], [240.0, 228.2], [249.0, 218.0], [255.0, 236.0], [254.0, 236.0], [253.0, 235.71428571428572], [252.0, 236.0], [251.0, 235.0], [250.0, 233.3], [248.0, 231.4], [257.0, 243.7142857142857], [256.0, 242.8], [258.0, 242.77777777777777], [259.0, 246.9230769230769], [261.0, 253.66666666666666], [260.0, 236.5], [262.0, 243.57142857142856], [263.0, 255.55555555555554], [264.0, 243.33333333333334], [271.0, 241.6], [270.0, 240.33333333333334], [268.0, 253.5], [269.0, 266.875], [265.0, 249.5], [266.0, 242.09090909090912], [267.0, 253.66666666666669], [284.0, 291.77777777777777], [274.0, 271.92307692307696], [273.0, 257.5], [272.0, 241.0], [275.0, 271.00000000000006], [279.0, 274.85714285714283], [278.0, 245.0], [277.0, 243.0], [276.0, 243.75], [280.0, 252.6], [281.0, 268.625], [282.0, 285.44444444444446], [283.0, 247.0], [286.0, 302.33333333333337], [285.0, 244.5], [287.0, 246.0], [291.0, 302.77777777777777], [289.0, 261.5], [288.0, 280.75], [290.0, 271.2], [292.0, 318.0], [294.0, 246.0], [293.0, 248.12499999999997], [295.0, 302.99999999999994], [297.0, 273.25], [296.0, 247.66666666666666], [302.0, 326.3166666666667], [303.0, 255.08333333333334], [300.0, 277.875], [301.0, 296.46153846153845], [298.0, 292.8333333333333], [299.0, 266.2], [316.0, 326.6666666666667], [304.0, 286.5], [311.0, 269.25], [310.0, 269.375], [309.0, 267.5], [308.0, 265.7], [305.0, 284.0], [307.0, 267.6], [306.0, 258.125], [318.0, 337.3], [319.0, 307.7], [313.0, 270.25], [312.0, 268.3333333333333], [317.0, 275.0], [315.0, 274.3333333333333], [314.0, 273.1111111111111], [321.0, 292.8], [320.0, 295.8333333333333], [322.0, 293.0476190476191], [323.0, 298.76923076923083], [324.0, 320.6], [325.0, 308.3333333333333], [327.0, 346.5], [326.0, 282.3333333333333], [328.0, 337.0], [332.0, 295.93333333333334], [333.0, 310.05], [334.0, 302.40000000000003], [335.0, 332.78571428571433], [329.0, 287.2], [331.0, 286.2], [337.0, 322.0], [336.0, 316.62500000000006], [338.0, 361.79999999999995], [339.0, 356.6], [341.0, 321.14285714285717], [340.0, 300.0], [342.0, 324.55555555555554], [343.0, 334.15384615384613], [344.0, 317.14285714285717], [351.0, 306.3333333333333], [350.0, 306.0], [348.0, 331.0], [349.0, 356.0], [345.0, 310.375], [346.0, 308.9], [347.0, 320.0], [366.0, 306.0], [367.0, 306.0], [365.0, 309.0], [364.0, 311.3333333333333], [362.0, 306.2], [361.0, 309.0], [360.0, 307.0], [359.0, 306.0], [353.0, 306.3333333333333], [352.0, 305.83333333333337], [355.0, 305.07692307692304], [354.0, 306.0], [358.0, 305.3333333333333], [357.0, 304.0], [356.0, 305.0], [369.0, 375.9285714285714], [368.0, 375.05555555555554], [370.0, 350.90909090909093], [371.0, 385.8], [373.0, 324.0], [372.0, 308.4], [374.0, 334.8333333333333], [375.0, 367.0], [377.0, 345.4], [381.0, 399.73333333333335], [380.0, 306.0], [383.0, 320.0], [382.0, 304.2], [379.0, 331.5], [397.0, 364.8333333333333], [384.0, 355.5], [387.0, 379.0], [386.0, 304.59999999999997], [385.0, 305.5], [396.0, 309.0], [388.0, 376.3333333333333], [389.0, 325.6], [391.0, 304.56249999999994], [394.0, 376.157894736842], [395.0, 399.8333333333333], [398.0, 336.25], [399.0, 310.84444444444443], [393.0, 307.1666666666667], [392.0, 305.6666666666668], [401.0, 365.2], [400.0, 358.0], [403.0, 322.75], [402.0, 313.77777777777777], [412.0, 320.0], [413.0, 405.375], [415.0, 339.0], [408.0, 316.5], [414.0, 321.0], [405.0, 346.59999999999997], [404.0, 313.6666666666667], [406.0, 388.57142857142856], [407.0, 330.11111111111103], [409.0, 331.25], [410.0, 336.5499999999999], [411.0, 352.3636363636363], [416.0, 330.34375], [418.0, 338.1182795698925], [417.0, 324.7368421052632], [428.0, 354.2307692307693], [419.0, 338.5555555555556], [420.0, 354.2499999999999], [421.0, 356.15789473684214], [422.0, 348.6666666666665], [423.0, 360.04999999999995], [429.0, 374.6923076923076], [430.0, 363.99999999999994], [431.0, 366.1282051282052], [427.0, 353.9230769230769], [426.0, 350.34999999999997], [425.0, 349.59999999999997], [424.0, 345.2058823529412], [446.0, 417.6923076923076], [434.0, 389.1666666666667], [439.0, 395.9230769230769], [433.0, 356.28571428571433], [432.0, 356.70588235294116], [438.0, 353.5], [437.0, 355.0], [436.0, 355.0], [441.0, 395.3529411764706], [442.0, 407.92307692307696], [443.0, 382.6], [444.0, 382.6], [435.0, 355.0], [447.0, 400.375], [440.0, 358.0], [445.0, 360.1428571428571], [450.0, 396.1111111111111], [449.0, 386.75], [448.0, 361.25], [451.0, 435.85714285714283], [460.0, 358.3333333333333], [452.0, 375.8666666666666], [453.0, 367.14285714285717], [455.0, 393.5], [454.0, 358.0], [457.0, 402.2], [459.0, 370.111111111111], [458.0, 356.52941176470586], [461.0, 361.02631578947376], [462.0, 388.5], [463.0, 358.55882352941177], [456.0, 356.6], [479.0, 375.28], [466.0, 376.8571428571429], [465.0, 361.6666666666667], [464.0, 359.8461538461538], [467.0, 363.0], [471.0, 367.86440677966107], [470.0, 363.52000000000004], [469.0, 363.9333333333333], [468.0, 362.6060606060607], [474.0, 391.57142857142856], [476.0, 420.6], [478.0, 420.9333333333334], [477.0, 373.3333333333333], [475.0, 373.55555555555554], [473.0, 374.5], [472.0, 381.0], [492.0, 410.795918367347], [480.0, 386.3076923076923], [481.0, 383.2056737588651], [483.0, 388.0], [482.0, 386.28125], [487.0, 394.8461538461538], [486.0, 394.66666666666663], [484.0, 415.10526315789474], [485.0, 395.9761904761905], [488.0, 398.3513513513513], [489.0, 411.46153846153845], [491.0, 381.64000000000004], [490.0, 387.1493506493507], [495.0, 387.1081081081081], [494.0, 383.0888888888891], [493.0, 381.3333333333333], [499.0, 386.925], [500.0, 372.6399844875124], [498.0, 386.87925696594414], [497.0, 386.74999999999994], [496.0, 388.0], [1.0, 74.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[494.0347799999976, 370.08751000000495]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 17816.3, "minX": 1.66170336E12, "maxY": 352158.1, "series": [{"data": [[1.66170336E12, 45517.03333333333], [1.66170342E12, 17816.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66170336E12, 352158.1], [1.66170342E12, 137841.9]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66170342E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 366.96769121596515, "minX": 1.66170336E12, "maxY": 378.05801429028236, "series": [{"data": [[1.66170336E12, 366.96769121596515], [1.66170342E12, 378.05801429028236]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66170342E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 366.9672320471961, "minX": 1.66170336E12, "maxY": 378.05748107070707, "series": [{"data": [[1.66170336E12, 366.9672320471961], [1.66170342E12, 378.05748107070707]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66170342E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.004550140414489356, "minX": 1.66170336E12, "maxY": 0.010032141813577464, "series": [{"data": [[1.66170336E12, 0.010032141813577464], [1.66170342E12, 0.004550140414489356]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66170342E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 16.0, "minX": 1.66170336E12, "maxY": 527.0, "series": [{"data": [[1.66170336E12, 527.0], [1.66170342E12, 460.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66170336E12, 387.0], [1.66170342E12, 407.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66170336E12, 422.0], [1.66170342E12, 445.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66170336E12, 401.0], [1.66170342E12, 424.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66170336E12, 16.0], [1.66170342E12, 74.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66170336E12, 377.0], [1.66170342E12, 382.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66170342E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 178.0, "minX": 419.0, "maxY": 479.0, "series": [{"data": [[714.0, 386.0], [856.0, 228.0], [1089.0, 479.0], [1178.0, 387.0], [1191.0, 433.0], [1269.0, 364.0], [1273.0, 383.0], [1225.0, 404.0], [1249.0, 386.0], [1279.0, 383.0], [1241.0, 388.0], [1265.0, 388.0], [1223.0, 388.0], [1316.0, 387.0], [1327.0, 370.0], [1291.0, 384.0], [1286.0, 383.0], [1285.0, 386.0], [1283.0, 389.0], [1301.0, 383.0], [1304.0, 376.0], [1305.0, 380.0], [1296.0, 377.0], [1300.0, 377.0], [1333.0, 380.0], [1331.0, 371.0], [1334.0, 378.0], [1336.0, 379.0], [1341.0, 382.0], [1310.0, 388.0], [1280.0, 401.0], [1307.0, 379.0], [1306.0, 377.0], [1317.0, 379.0], [1321.0, 376.0], [1323.0, 380.0], [1324.0, 385.0], [1322.0, 380.0], [1320.0, 374.0], [1325.0, 378.0], [1375.0, 365.0], [1373.0, 359.0], [1357.0, 373.0], [1345.0, 382.0], [1346.0, 378.0], [1370.0, 375.0], [1344.0, 379.0], [1350.0, 339.0], [1440.0, 351.0], [1447.0, 344.0], [1461.0, 341.0], [1445.0, 348.0], [1452.0, 343.0], [1446.0, 346.0], [1458.0, 342.0], [1442.0, 343.0], [1482.0, 337.0], [1475.0, 338.0], [1485.0, 337.0], [1489.0, 338.0], [1492.0, 335.0], [1490.0, 336.0], [1478.0, 340.0], [1491.0, 335.0], [1552.0, 323.0], [419.0, 178.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1552.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 178.0, "minX": 419.0, "maxY": 479.0, "series": [{"data": [[714.0, 386.0], [856.0, 228.0], [1089.0, 479.0], [1178.0, 387.0], [1191.0, 433.0], [1269.0, 364.0], [1273.0, 383.0], [1225.0, 404.0], [1249.0, 386.0], [1279.0, 382.0], [1241.0, 388.0], [1265.0, 388.0], [1223.0, 388.0], [1316.0, 387.0], [1327.0, 370.0], [1291.0, 384.0], [1286.0, 383.0], [1285.0, 386.0], [1283.0, 389.0], [1301.0, 383.0], [1304.0, 376.0], [1305.0, 380.0], [1296.0, 377.0], [1300.0, 377.0], [1333.0, 380.0], [1331.0, 371.0], [1334.0, 378.0], [1336.0, 379.0], [1341.0, 382.0], [1310.0, 388.0], [1280.0, 401.0], [1307.0, 379.0], [1306.0, 377.0], [1317.0, 379.0], [1321.0, 376.0], [1323.0, 380.0], [1324.0, 385.0], [1322.0, 380.0], [1320.0, 374.0], [1325.0, 378.0], [1375.0, 365.0], [1373.0, 359.0], [1357.0, 373.0], [1345.0, 382.0], [1346.0, 378.0], [1370.0, 375.0], [1344.0, 379.0], [1350.0, 339.0], [1440.0, 351.0], [1447.0, 344.0], [1461.0, 341.0], [1445.0, 348.0], [1452.0, 343.0], [1446.0, 346.0], [1458.0, 342.0], [1442.0, 343.0], [1482.0, 337.0], [1475.0, 338.0], [1485.0, 337.0], [1489.0, 338.0], [1492.0, 335.0], [1490.0, 336.0], [1478.0, 340.0], [1491.0, 335.0], [1552.0, 323.0], [419.0, 178.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1552.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 460.51666666666665, "minX": 1.66170336E12, "maxY": 1206.15, "series": [{"data": [[1.66170336E12, 1206.15], [1.66170342E12, 460.51666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66170342E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 468.85, "minX": 1.66170336E12, "maxY": 1197.8166666666666, "series": [{"data": [[1.66170336E12, 1197.8166666666666], [1.66170342E12, 468.85]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66170342E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 468.85, "minX": 1.66170336E12, "maxY": 1197.8166666666666, "series": [{"data": [[1.66170336E12, 1197.8166666666666], [1.66170342E12, 468.85]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66170342E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 468.85, "minX": 1.66170336E12, "maxY": 1197.8166666666666, "series": [{"data": [[1.66170336E12, 1197.8166666666666], [1.66170342E12, 468.85]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66170342E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

